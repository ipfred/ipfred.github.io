<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>go基础 - 合集 | Fred的知识库</title>
    <link>https://ipfred.github.io/collections/go%E5%9F%BA%E7%A1%80/</link>
    <description>go基础 - 合集 | Fred的知识库</description>
    <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>330446875@qq.com (Fred)</managingEditor>
      <webMaster>330446875@qq.com (Fred)</webMaster><copyright>本站内容采用 CC BY-NC-SA 4.0 国际许可协议。</copyright><lastBuildDate>Thu, 15 May 2025 17:51:46 &#43;0800</lastBuildDate><atom:link href="https://ipfred.github.io/collections/go%E5%9F%BA%E7%A1%80/" rel="self" type="application/rss+xml" /><item>
  <title>13.go 泛型</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515175146/</link>
  <pubDate>Thu, 15 May 2025 17:51:46 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515175146/</guid>
  <description><![CDATA[<blockquote>
<p>在go语言里，对泛型的争议从未停止过，go也在1.18支持了泛型</p>
<p>原文参考：https://www.jb51.net/article/277511.htm</p>
</blockquote>
<h2 id="泛型初识" class="heading-element">
  <a href="#%e6%b3%9b%e5%9e%8b%e5%88%9d%e8%af%86" class="heading-mark"></a>泛型初识</h2><ul>
<li>
<p>在强类型语言中（java，go），因为存在类型的强制约束，导致了数据类型在应用时没有弱类型语言（go、python）灵活</p>
</li>
<li>
<p>问题假如一个求和函数, 无法计算int类型之外的和.如果想计算浮点或者字符串的和该怎么办？</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Add</span><span class="p">(</span><span class="nx">a</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>泛型引入之前，解决办法之一就是为不同类型定义不同的函数</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">AddFloat32</span><span class="p">(</span><span class="nx">a</span> <span class="kt">float32</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">float32</span><span class="p">)</span> <span class="kt">float32</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">AddString</span><span class="p">(</span><span class="nx">a</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>在引入泛型之后</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"> <span class="kd">func</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span> <span class="p">|</span> <span class="kt">float32</span> <span class="p">|</span> <span class="kt">string</span><span class="p">](</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="nx">T</span><span class="p">)</span> <span class="nx">T</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>在上面这段伪代码中， T 被称为 类型形参(type parameter)，它不是具体的类型，在定义函数时类型并不确定。因为 T 的类型并不确定，所以需要像函数的形参那样，在调用函数的时候再传入具体的类型。这样我们不就能一个函数同时支持多个不同的类型了, 在这里被传入的具体类型被称为 类型实参(type argument)</li>
<li><strong>通过引入 类型形参 和 类型实参 这两个概念，让一个函数获得了处理多种不同类型数据的能力，这种编程方式被称为 泛型编程</strong></li>
</ul>
</li>
<li>
<p>通过Go的 接口+反射 不也能实现这样的动态数据处理吗？是的，泛型能实现的功能通过接口+反射也基本能实现, 但是go的反射机制存在很多问题：用起来麻烦、失去了编译时的类型检查、性能不太理想</p>
</li>
</ul>
<h2 id="泛型基础概念" class="heading-element">
  <a href="#%e6%b3%9b%e5%9e%8b%e5%9f%ba%e7%a1%80%e6%a6%82%e5%bf%b5" class="heading-mark"></a>泛型基础概念</h2><blockquote>
<p>通过引入 类型形参 和 类型实参 这两个概念，让一个函数获得了处理多种不同类型数据的能力，这种编程方式被称为 泛型编程</p>
<p>Go在1.18 泛型中引入了很多全新的概念</p>
</blockquote>
<p><img loading="lazy" src="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-01/20230526230037.png" alt="modb_20230311_b60ea10e-bfc8-11ed-864e-38f9d3cd240d" srcset="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-01/20230526230037.png?size=small, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-01/20230526230037.png?size=medium 1.5x, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-01/20230526230037.png?size=large 2x" data-title="modb_20230311_b60ea10e-bfc8-11ed-864e-38f9d3cd240d" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></p>
<ul>
<li><strong>类型形参 (Type parameter)</strong>:
<ul>
<li><code>type Slice[T int|float32|float64 ] []T</code> T 就是类型形参(Type parameter)在定义Slice类型的时候 T 代表的具体类型并不确定，类似一个占位符</li>
</ul>
</li>
<li><strong>类型实参(Type argument)</strong>
<ul>
<li><code>var b Slice[float32] = []float32{1.0, 2.0, 3.0} </code> float32 就是类型实参</li>
</ul>
</li>
<li><strong>类型形参列表( Type parameter list)</strong>
<ul>
<li>中括号里的<code>T int|float32|float64</code>  这一整串因为定义了所有的类型形参(在这个例子里只有一个类型形参T），所以我们称其为 类型形参列表(type parameter list)</li>
</ul>
</li>
<li><strong>类型约束(Type constraint)</strong>
<ul>
<li>类型约束 指定了类型形参可接受的类型集合，只有属于这个集合中的类型才能替换形参用于实例化</li>
<li><code>int|float32|float64 </code> 这部分被称为类型约束(Type constraint)，中间的 | 的意思是告诉编译器，类型形参 T 只可以接收 int 或 float32 或 float64 这三种类型的实参</li>
</ul>
</li>
<li><strong>泛型类型(Generic type)</strong>
<ul>
<li><code>type Slice[T int|float32|float64 ] []T</code>这种类型定义的方式中带了类型形参，将这种类型定义中带 <strong>类型形参</strong> 的类型，称之为 泛型类型(Generic type)</li>
</ul>
</li>
<li><strong>实例化(Instantiations)</strong>
<ul>
<li><code>var a Slice[int] = []int{1, 2, 3}</code> 泛型类型不能直接拿来使用，必须传入类型实参(Type argument) 将其确定为具体的类型之后才可使用。而传入类型实参确定具体类型的操作被称为 实例化(Instantiations) :</li>
</ul>
</li>
<li><strong>泛型接收器(Generic receiver)</strong></li>
<li><strong>泛型函数(Generic function)</strong></li>
<li>&hellip;</li>
</ul>
<h2 id="泛型基本使用" class="heading-element">
  <a href="#%e6%b3%9b%e5%9e%8b%e5%9f%ba%e6%9c%ac%e4%bd%bf%e7%94%a8" class="heading-mark"></a>泛型基本使用</h2><h3 id="1-demo" class="heading-element">
  <a href="#1-demo" class="heading-mark"></a>1. demo</h3><div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 定义了一个普通的类型 Slice[int] ，它的底层类型是 []int
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Slice</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span> <span class="p">[]</span><span class="kt">int</span>     
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// MyMap类型定义了两个类型形参 KEY 和 VALUE。分别为两个形参指定了不同的类型约束
</span></span></span><span class="line"><span class="cl"><span class="c1">// 这个泛型类型的名字叫： MyMap[KEY, VALUE]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">MyMap</span><span class="p">[</span><span class="nx">KEY</span> <span class="kt">int</span> <span class="p">|</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">VALUE</span> <span class="kt">float32</span> <span class="p">|</span> <span class="kt">float64</span><span class="p">]</span> <span class="kd">map</span><span class="p">[</span><span class="nx">KEY</span><span class="p">]</span><span class="nx">VALUE</span>  
</span></span><span class="line"><span class="cl"> 
</span></span><span class="line"><span class="cl"><span class="c1">// 用类型实参 string 和 flaot64 替换了类型形参 KEY 、 VALUE，泛型类型被实例化为具体的类型：MyMap[string, float64]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">a</span> <span class="nx">MyMap</span><span class="p">[</span><span class="kt">string</span><span class="p">,</span> <span class="kt">float64</span><span class="p">]</span> <span class="p">=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">float64</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;jack_score&#34;</span><span class="p">:</span> <span class="mf">9.6</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;bob_score&#34;</span><span class="p">:</span>  <span class="mf">8.4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 一个泛型类型的结构体。可用 int 或 sring 类型实例化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">MyStruct</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span> <span class="p">|</span> <span class="kt">string</span><span class="p">]</span> <span class="kd">struct</span> <span class="p">{</span>  
</span></span><span class="line"><span class="cl">    <span class="nx">Name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Data</span> <span class="nx">T</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 一个泛型接口(关于泛型接口在后半部分会详细讲解）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">IPrintData</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span> <span class="p">|</span> <span class="kt">float32</span> <span class="p">|</span> <span class="kt">string</span><span class="p">]</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">Print</span><span class="p">(</span><span class="nx">data</span> <span class="nx">T</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 一个泛型通道，可用类型实参 int 或 string 实例化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">MyChan</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span> <span class="p">|</span> <span class="kt">string</span><span class="p">]</span> <span class="kd">chan</span> <span class="nx">T</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2-类型形参的互相套用和约束" class="heading-element">
  <a href="#2-%e7%b1%bb%e5%9e%8b%e5%bd%a2%e5%8f%82%e7%9a%84%e4%ba%92%e7%9b%b8%e5%a5%97%e7%94%a8%e5%92%8c%e7%ba%a6%e6%9d%9f" class="heading-mark"></a>2. 类型形参的互相套用和约束</h3><ul>
<li>
<p>类型形参是可以互相套用</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">WowStruct</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span> <span class="p">|</span> <span class="kt">float32</span><span class="p">,</span> <span class="nx">S</span> <span class="p">[]</span><span class="nx">T</span><span class="p">]</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Data</span>     <span class="nx">S</span>
</span></span><span class="line"><span class="cl">    <span class="nx">MaxValue</span> <span class="nx">T</span>
</span></span><span class="line"><span class="cl">    <span class="nx">MinValue</span> <span class="nx">T</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 实例化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">ws</span> <span class="nx">WowStruct</span><span class="p">[</span><span class="kt">int</span><span class="p">,</span> <span class="p">[]</span><span class="kt">int</span><span class="p">]</span>   <span class="c1">// 泛型类型 WowStuct[T, S] 被实例化后的类型名称就叫 WowStruct[int, []int]
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>上面为T传入了实参 <code>int</code>，然后因为 S 的定义是 <code>[]T</code> ，所以 S 的实参自然是 <code>[]int</code> ，实例化之后 WowStruct[T,S] 的定义类似如下</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">WowStruct</span><span class="p">[</span><span class="kt">int</span><span class="p">,</span> <span class="p">[]</span><span class="kt">int</span><span class="p">]</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Data</span>     <span class="p">[]</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl">    <span class="nx">MaxValue</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">    <span class="nx">MinValue</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>下面两种定义作用一样</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">WowStruct</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span><span class="p">|</span><span class="kt">string</span><span class="p">]</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Data</span> <span class="p">[]</span><span class="nx">T</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">WowStruct2</span><span class="p">[</span><span class="nx">T</span> <span class="p">[]</span><span class="kt">int</span><span class="p">|[]</span><span class="kt">string</span><span class="p">]</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Data</span> <span class="nx">T</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>推荐使用方式</p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">ype</span> <span class="nx">WowStruct3</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span> <span class="p">|</span> <span class="kt">string</span><span class="p">]</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Data</span>     <span class="p">[]</span><span class="nx">T</span>
</span></span><span class="line"><span class="cl">    <span class="nx">MaxValue</span> <span class="nx">T</span>
</span></span><span class="line"><span class="cl">    <span class="nx">MinValue</span> <span class="nx">T</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="3-泛型的嵌套和约束" class="heading-element">
  <a href="#3-%e6%b3%9b%e5%9e%8b%e7%9a%84%e5%b5%8c%e5%a5%97%e5%92%8c%e7%ba%a6%e6%9d%9f" class="heading-mark"></a>3. 泛型的嵌套和约束</h3><ul>
<li>
<p>泛型和普通的类型一样，可以互相嵌套定义出更加复杂的新类型</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 先定义个泛型类型 Slice[T]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Slice</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span><span class="p">|</span><span class="kt">string</span><span class="p">|</span><span class="kt">float32</span><span class="p">|</span><span class="kt">float64</span><span class="p">]</span> <span class="p">[]</span><span class="nx">T</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ✗ 错误。泛型类型Slice[T]的类型约束中不包含uint, uint8
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">UintSlice</span><span class="p">[</span><span class="nx">T</span> <span class="kt">uint</span><span class="p">|</span><span class="kt">uint8</span><span class="p">]</span> <span class="nx">Slice</span><span class="p">[</span><span class="nx">T</span><span class="p">]</span>  
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ✓ 正确。基于泛型类型Slice[T]定义了新的泛型类型 FloatSlice[T] 。FloatSlice[T]只接受float32和float64两种类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">FloatSlice</span><span class="p">[</span><span class="nx">T</span> <span class="kt">float32</span><span class="p">|</span><span class="kt">float64</span><span class="p">]</span> <span class="nx">Slice</span><span class="p">[</span><span class="nx">T</span><span class="p">]</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ✓ 正确。基于泛型类型Slice[T]定义的新泛型类型 IntAndStringSlice[T]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">IntAndStringSlice</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span><span class="p">|</span><span class="kt">string</span><span class="p">]</span> <span class="nx">Slice</span><span class="p">[</span><span class="nx">T</span><span class="p">]</span>  
</span></span><span class="line"><span class="cl"><span class="c1">// ✓ 正确 基于IntAndStringSlice[T]套娃定义出的新泛型类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">IntSlice</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span><span class="p">]</span> <span class="nx">IntAndStringSlice</span><span class="p">[</span><span class="nx">T</span><span class="p">]</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 在map中套一个泛型类型Slice[T]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">WowMap</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span><span class="p">|</span><span class="kt">string</span><span class="p">]</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">Slice</span><span class="p">[</span><span class="nx">T</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 在map中套Slice[T]的另一种写法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">WowMap2</span><span class="p">[</span><span class="nx">T</span> <span class="nx">Slice</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span> <span class="p">|</span> <span class="nx">Slice</span><span class="p">[</span><span class="kt">string</span><span class="p">]]</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">T</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="4-动态判断变量的类型" class="heading-element">
  <a href="#4-%e5%8a%a8%e6%80%81%e5%88%a4%e6%96%ad%e5%8f%98%e9%87%8f%e7%9a%84%e7%b1%bb%e5%9e%8b" class="heading-mark"></a>4. 动态判断变量的类型</h3><ul>
<li>
<p>使用接口的时候经常会用到类型断言或 type swith 来确定接口具体的类型，然后对不同类型做出不同的处理;</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">i</span> <span class="kd">interface</span><span class="p">{}</span> <span class="p">=</span> <span class="mi">123</span>
</span></span><span class="line"><span class="cl"><span class="nx">i</span><span class="p">.(</span><span class="kt">int</span><span class="p">)</span> <span class="c1">// 类型断言
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// type switch
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="k">switch</span> <span class="nx">i</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="kt">int</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">case</span> <span class="kt">string</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>对于 valut T 这样通过类型形参定义的变量，我们能不能判断具体类型然后对不同类型做出不同处理呢？答案是不允许的</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">q</span> <span class="o">*</span><span class="nx">Queue</span><span class="p">[</span><span class="nx">T</span><span class="p">])</span> <span class="nf">Put</span><span class="p">(</span><span class="nx">value</span> <span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">value</span><span class="p">.(</span><span class="kt">int</span><span class="p">)</span> <span class="c1">// 错误。泛型类型定义的变量不能使用类型断言
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 错误。不允许使用type switch 来判断 value 的具体类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">switch</span> <span class="nx">value</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="kt">int</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">case</span> <span class="kt">string</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="5---指定底层类型" class="heading-element">
  <a href="#5---%e6%8c%87%e5%ae%9a%e5%ba%95%e5%b1%82%e7%b1%bb%e5%9e%8b" class="heading-mark"></a>5. <code>~</code>  指定底层类型</h3><div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">s1</span> <span class="nx">Slice</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span> <span class="c1">// 正确 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span> 
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">MyInt</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">s2</span> <span class="nx">Slice</span><span class="p">[</span><span class="nx">MyInt</span><span class="p">]</span> <span class="c1">// ✗ 错误。MyInt类型底层类型是int但并不是int类型，不符合 Slice[T] 的类型约束
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>泛型类型 <code>Slice[T] </code>允许的是 <code>int</code> 作为类型实参，而不是 <code>MyInt</code> （虽然 <code>MyInt </code>类型底层类型是<code>int</code>，但它依旧不是 <code>int </code>类型）</p>
</li>
<li>
<p>为了解决这个问题，Go新增了一个符号 <code>~</code> ，在类型约束中使用类似 <code>~int</code> 这种写法的话，就代表着不光是 <code>int </code>，所有以 <code>int </code>为底层类型的类型也都可用于实例化</p>
</li>
<li>
<p><code>~</code>使用限制</p>
<ol>
<li>
<p><code>~</code><strong>后面的类型不能为接口</strong></p>
</li>
<li>
<p><code>~</code><strong>后面的类型必须为基本类型</strong></p>
</li>
</ol>
</li>
<li>
<p>demo</p>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Int</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">~</span><span class="kt">int</span> <span class="p">|</span> <span class="p">~</span><span class="kt">int8</span> <span class="p">|</span> <span class="p">~</span><span class="kt">int16</span> <span class="p">|</span> <span class="p">~</span><span class="kt">int32</span> <span class="p">|</span> <span class="p">~</span><span class="kt">int64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Uint</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">~</span><span class="kt">uint</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint8</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint16</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint32</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Float</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">~</span><span class="kt">float32</span> <span class="p">|</span> <span class="p">~</span><span class="kt">float64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Slice</span><span class="p">[</span><span class="nx">T</span> <span class="nx">Int</span> <span class="p">|</span> <span class="nx">Uint</span> <span class="p">|</span> <span class="nx">Float</span><span class="p">]</span> <span class="p">[]</span><span class="nx">T</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">s</span> <span class="nx">Slice</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span> <span class="c1">// 正确
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">MyInt</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">s2</span> <span class="nx">Slice</span><span class="p">[</span><span class="nx">MyInt</span><span class="p">]</span>  <span class="c1">// MyInt底层类型是int，所以可以用于实例化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">MyMyInt</span> <span class="nx">MyInt</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">s3</span> <span class="nx">Slice</span><span class="p">[</span><span class="nx">MyMyInt</span><span class="p">]</span>  <span class="c1">// 正确。MyMyInt 虽然基于 MyInt ，但底层类型也是int，所以也能用于实例化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">MyFloat32</span> <span class="kt">float32</span>  <span class="c1">// 正确
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">s4</span> <span class="nx">Slice</span><span class="p">[</span><span class="nx">MyFloat32</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">----------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">MyInt</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">_</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">~[]</span><span class="kt">byte</span>  <span class="c1">// 正确
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">~</span><span class="nx">MyInt</span>   <span class="c1">// 错误，~后的类型必须为基本类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">~</span><span class="kt">error</span>   <span class="c1">// 错误，~后的类型不能为接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="6-常见使用错误" class="heading-element">
  <a href="#6-%e5%b8%b8%e8%a7%81%e4%bd%bf%e7%94%a8%e9%94%99%e8%af%af" class="heading-mark"></a>6. 常见使用错误</h3><ul>
<li>
<p>定义泛型类型的时候，基础类型不能只有类型形参</p>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 错误，类型形参不能单独使用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">CommonType</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span><span class="p">|</span><span class="kt">string</span><span class="p">|</span><span class="kt">float32</span><span class="p">]</span> <span class="nx">T</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>当类型约束的一些写法会被编译器误认为是表达式时会报错</p>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//✗ 错误。T *int会被编译器误认为是表达式 T乘以int，而不是int指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">NewType</span><span class="p">[</span><span class="nx">T</span> <span class="o">*</span><span class="kt">int</span><span class="p">]</span> <span class="p">[]</span><span class="nx">T</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 上面代码再编译器眼中：它认为你要定义一个存放切片的数组，数组长度由 T 乘以 int 计算得到
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">NewType</span> <span class="p">[</span><span class="nx">T</span> <span class="o">*</span> <span class="kt">int</span><span class="p">][]</span><span class="nx">T</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//✗ 错误。和上面一样，这里不光*被会认为是乘号，| 还会被认为是按位或操作
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">NewType2</span><span class="p">[</span><span class="nx">T</span> <span class="o">*</span><span class="kt">int</span><span class="p">|</span><span class="o">*</span><span class="kt">float64</span><span class="p">]</span> <span class="p">[]</span><span class="nx">T</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//✗ 错误
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">NewType2</span> <span class="p">[</span><span class="nf">T</span> <span class="p">(</span><span class="kt">int</span><span class="p">)]</span> <span class="p">[]</span><span class="nx">T</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">///////////// 解决方式 ///////////// 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">// 推荐统一用 interface{} 解决问题
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">NewType</span><span class="p">[</span><span class="nx">T</span> <span class="kd">interface</span><span class="p">{</span><span class="o">*</span><span class="kt">int</span><span class="p">}]</span> <span class="p">[]</span><span class="nx">T</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">NewType2</span><span class="p">[</span><span class="nx">T</span> <span class="kd">interface</span><span class="p">{</span><span class="o">*</span><span class="kt">int</span><span class="p">|</span><span class="o">*</span><span class="kt">float64</span><span class="p">}]</span> <span class="p">[]</span><span class="nx">T</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 如果类型约束中只有一个类型，可以添加个逗号消除歧义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">NewType3</span><span class="p">[</span><span class="nx">T</span> <span class="o">*</span><span class="kt">int</span><span class="p">,]</span> <span class="p">[]</span><span class="nx">T</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//✗ 错误。如果类型约束不止一个类型，加逗号是不行的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">NewType4</span><span class="p">[</span><span class="nx">T</span> <span class="o">*</span><span class="kt">int</span><span class="p">|</span><span class="o">*</span><span class="kt">float32</span><span class="p">,]</span> <span class="p">[]</span><span class="nx">T</span> 
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>匿名结构体不支持泛型</p>
<div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 下面的用法是错误的：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">testCase</span> <span class="o">:=</span> <span class="kd">struct</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span><span class="p">|</span><span class="kt">string</span><span class="p">]</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">caseName</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">        <span class="nx">got</span>      <span class="nx">T</span>
</span></span><span class="line"><span class="cl">        <span class="nx">want</span>     <span class="nx">T</span>
</span></span><span class="line"><span class="cl">    <span class="p">}[</span><span class="kt">int</span><span class="p">]{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">caseName</span><span class="p">:</span> <span class="s">&#34;test OK&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">got</span><span class="p">:</span>      <span class="mi">100</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">want</span><span class="p">:</span>     <span class="mi">100</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>虽然type switch和类型断言不能用，但我们可通过反射机制达到目的：</p>
<div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">receiver</span> <span class="nx">Queue</span><span class="p">[</span><span class="nx">T</span><span class="p">])</span> <span class="nf">Put</span><span class="p">(</span><span class="nx">value</span> <span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// Printf() 可输出变量value的类型(底层就是通过反射实现的)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%T&#34;</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// 通过反射可以动态获得变量value的类型从而分情况处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">v</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">ValueOf</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">switch</span> <span class="nx">v</span><span class="p">.</span><span class="nf">Kind</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">case</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">Int</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">case</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">String</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// do something
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>为了避免使用反射而选择了泛型，结果到头来又为了一些功能在在泛型中使用反射, 当出现这种情况的时候你可能需要重新思考一下，自己的需求是不是真的需要用泛型（毕竟泛型机制本身就很复杂了，再加上反射的复杂度，增加的复杂度并不一定值得）</p>
</blockquote>
</li>
</ul>
<h2 id="泛型接收器receiver" class="heading-element">
  <a href="#%e6%b3%9b%e5%9e%8b%e6%8e%a5%e6%94%b6%e5%99%a8receiver" class="heading-mark"></a>泛型接收器(receiver)</h2><h3 id="1-泛型切片" class="heading-element">
  <a href="#1-%e6%b3%9b%e5%9e%8b%e5%88%87%e7%89%87" class="heading-mark"></a>1. 泛型切片</h3><ul>
<li>
<p>单纯的泛型类型实际上对开发来说用处并不大。但是如果将泛型类型和接下来要介绍的泛型receiver相结合的话，泛型就有了非常大的实用性了</p>
<div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">MySlice</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span> <span class="p">|</span> <span class="kt">float32</span><span class="p">]</span> <span class="p">[]</span><span class="nx">T</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">MySlice</span><span class="p">[</span><span class="nx">T</span><span class="p">])</span> <span class="nf">Sum</span><span class="p">()</span> <span class="nx">T</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">sum</span> <span class="nx">T</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">value</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">s</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">sum</span> <span class="o">+=</span> <span class="nx">value</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">sum</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">s</span> <span class="nx">MySlice</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nf">Sum</span><span class="p">())</span> <span class="c1">// 输出：10
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">s2</span> <span class="nx">MySlice</span><span class="p">[</span><span class="kt">float32</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">float32</span><span class="p">{</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.0</span><span class="p">,</span> <span class="mf">4.0</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">s2</span><span class="p">.</span><span class="nf">Sum</span><span class="p">())</span> <span class="c1">// 输出：10.0
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="2-泛型结构体" class="heading-element">
  <a href="#2-%e6%b3%9b%e5%9e%8b%e7%bb%93%e6%9e%84%e4%bd%93" class="heading-mark"></a>2. 泛型结构体</h3><ul>
<li>
<p>泛型结构体和泛型方法</p>
<div class="highlight" id="id-19"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">MyStruct</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span> <span class="p">|</span> <span class="kt">string</span> <span class="p">|</span> <span class="kt">float32</span><span class="p">]</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Res</span> <span class="nx">T</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">MyStruct</span><span class="p">[</span><span class="nx">T</span><span class="p">])</span> <span class="nf">Add</span><span class="p">(</span><span class="nx">a</span> <span class="o">...</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">r</span> <span class="nx">T</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">a</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">r</span> <span class="o">+=</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">r</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">m1</span> <span class="o">:=</span> <span class="nx">MyStruct</span><span class="p">[</span><span class="kt">int</span><span class="p">]{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">m1</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">m2</span> <span class="o">:=</span> <span class="nx">MyStruct</span><span class="p">[</span><span class="kt">float32</span><span class="p">]{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">m2</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.1</span><span class="p">,</span> <span class="mf">4.2</span><span class="p">,</span> <span class="mf">5.1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">m3</span> <span class="o">:=</span> <span class="nx">MyStruct</span><span class="p">[</span><span class="kt">string</span><span class="p">]{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">m3</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">&#34;1.0&#34;</span><span class="p">,</span> <span class="s">&#34;2&#34;</span><span class="p">,</span> <span class="s">&#34;3&#34;</span><span class="p">,</span> <span class="s">&#34;4&#34;</span><span class="p">,</span> <span class="s">&#34;5&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="3-泛型队列" class="heading-element">
  <a href="#3-%e6%b3%9b%e5%9e%8b%e9%98%9f%e5%88%97" class="heading-mark"></a>3. 泛型队列</h3><ul>
<li>
<p>队列是一种先入先出的数据结构</p>
<div class="highlight" id="id-20"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 这里类型约束使用了空接口，代表的意思是所有类型都可以用来实例化泛型类型 Queue[T] (关于接口在后半部分会详细介绍）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Queue</span><span class="p">[</span><span class="nx">T</span> <span class="kd">interface</span><span class="p">{}]</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">elements</span> <span class="p">[]</span><span class="nx">T</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 将数据放入队列尾部
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">q</span> <span class="o">*</span><span class="nx">Queue</span><span class="p">[</span><span class="nx">T</span><span class="p">])</span> <span class="nf">Put</span><span class="p">(</span><span class="nx">value</span> <span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">q</span><span class="p">.</span><span class="nx">elements</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 从队列头部取出并从头部删除对应数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">q</span> <span class="o">*</span><span class="nx">Queue</span><span class="p">[</span><span class="nx">T</span><span class="p">])</span> <span class="nf">Pop</span><span class="p">()</span> <span class="p">(</span><span class="nx">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kd">var</span> <span class="nx">value</span> <span class="nx">T</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">elements</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">value</span><span class="p">,</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">value</span> <span class="p">=</span> <span class="nx">q</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">    <span class="nx">q</span><span class="p">.</span><span class="nx">elements</span> <span class="p">=</span> <span class="nx">q</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">value</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">elements</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 队列大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">q</span> <span class="nx">Queue</span><span class="p">[</span><span class="nx">T</span><span class="p">])</span> <span class="nf">Size</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">elements</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="o">-----------------------------------------------------</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">q1</span> <span class="nx">Queue</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span>  <span class="c1">// 可存放int类型数据的队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">q1</span><span class="p">.</span><span class="nf">Put</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">q1</span><span class="p">.</span><span class="nf">Put</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">q1</span><span class="p">.</span><span class="nf">Put</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">q1</span><span class="p">.</span><span class="nf">Pop</span><span class="p">()</span> <span class="c1">// 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">q1</span><span class="p">.</span><span class="nf">Pop</span><span class="p">()</span> <span class="c1">// 2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">q1</span><span class="p">.</span><span class="nf">Pop</span><span class="p">()</span> <span class="c1">// 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">q2</span> <span class="nx">Queue</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span>  <span class="c1">// 可存放string类型数据的队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">q2</span><span class="p">.</span><span class="nf">Put</span><span class="p">(</span><span class="s">&#34;A&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">q2</span><span class="p">.</span><span class="nf">Put</span><span class="p">(</span><span class="s">&#34;B&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">q2</span><span class="p">.</span><span class="nf">Put</span><span class="p">(</span><span class="s">&#34;C&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">q2</span><span class="p">.</span><span class="nf">Pop</span><span class="p">()</span> <span class="c1">// &#34;A&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">q2</span><span class="p">.</span><span class="nf">Pop</span><span class="p">()</span> <span class="c1">// &#34;B&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">q2</span><span class="p">.</span><span class="nf">Pop</span><span class="p">()</span> <span class="c1">// &#34;C&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">q3</span> <span class="nx">Queue</span><span class="p">[</span><span class="kd">struct</span><span class="p">{</span><span class="nx">Name</span> <span class="kt">string</span><span class="p">}]</span> 
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">q4</span> <span class="nx">Queue</span><span class="p">[[]</span><span class="kt">int</span><span class="p">]</span> <span class="c1">// 可存放[]int切片的队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">q5</span> <span class="nx">Queue</span><span class="p">[</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">]</span> <span class="c1">// 可存放int通道的队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">q6</span> <span class="nx">Queue</span><span class="p">[</span><span class="nx">io</span><span class="p">.</span><span class="nx">Reader</span><span class="p">]</span> <span class="c1">// 可存放接口的队列
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="泛型函数" class="heading-element">
  <a href="#%e6%b3%9b%e5%9e%8b%e5%87%bd%e6%95%b0" class="heading-mark"></a>泛型函数</h2><h3 id="1-泛型函数" class="heading-element">
  <a href="#1-%e6%b3%9b%e5%9e%8b%e5%87%bd%e6%95%b0" class="heading-mark"></a>1. 泛型函数</h3><ul>
<li>
<p>泛型函数定义</p>
<div class="highlight" id="id-21"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nx">Add</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span> <span class="p">|</span> <span class="kt">float32</span> <span class="p">|</span> <span class="kt">float64</span><span class="p">](</span><span class="nx">a</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">b</span> <span class="nx">T</span><span class="p">)</span> <span class="nx">T</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>泛型函数调用</p>
<ol>
<li>
<p>声明调用</p>
<div class="highlight" id="id-22"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">Add</span><span class="p">[</span><span class="kt">int</span><span class="p">](</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span> <span class="c1">// 传入类型实参int，计算结果为 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">Add</span><span class="p">[</span><span class="kt">float32</span><span class="p">](</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">)</span> <span class="c1">// 传入类型实参float32, 计算结果为 3.0
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Go还支持类型实参的自动推导</p>
<div class="highlight" id="id-23"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>  <span class="c1">// 1，2是int类型，编译请自动推导出类型实参T是int
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nf">Add</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">)</span> <span class="c1">// 1.0, 2.0 是浮点，编译请自动推导出类型实参T是float32
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
</li>
</ul>
<h3 id="2-匿名函数" class="heading-element">
  <a href="#2-%e5%8c%bf%e5%90%8d%e5%87%bd%e6%95%b0" class="heading-mark"></a>2. 匿名函数</h3><blockquote>
<p>匿名函数不支持泛型，匿名函数不能自己定义类型形参</p>
</blockquote>
<ul>
<li>
<p>匿名函数不能自己定义类型形参</p>
<div class="highlight" id="id-24"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 错误，匿名函数不能自己定义类型实参
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">fnGeneric</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span> <span class="p">|</span> <span class="kt">float32</span><span class="p">](</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="nx">T</span><span class="p">)</span> <span class="nx">T</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span> 
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>匿名函数可以使用别处定义好的类型实参</p>
<div class="highlight" id="id-25"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nx">MyFunc</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span> <span class="p">|</span> <span class="kt">float32</span> <span class="p">|</span> <span class="kt">float64</span><span class="p">](</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 匿名函数可使用已经定义好的类型形参
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">fn2</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">i</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">j</span> <span class="nx">T</span><span class="p">)</span> <span class="nx">T</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="nx">i</span><span class="o">*</span><span class="mi">2</span> <span class="o">-</span> <span class="nx">j</span><span class="o">*</span><span class="mi">2</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">fn2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="3-泛型方法" class="heading-element">
  <a href="#3-%e6%b3%9b%e5%9e%8b%e6%96%b9%e6%b3%95" class="heading-mark"></a>3. 泛型方法</h3><ul>
<li>
<p>目前Go的方法并不支持泛型</p>
<div class="highlight" id="id-26"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">A</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 错误 不支持泛型方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">receiver</span> <span class="nx">A</span><span class="p">)</span> <span class="nx">Add</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span> <span class="p">|</span> <span class="kt">float32</span> <span class="p">|</span> <span class="kt">float64</span><span class="p">](</span><span class="nx">a</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">b</span> <span class="nx">T</span><span class="p">)</span> <span class="nx">T</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>但是receiver支持泛型， 所以通过receiver使用类型形参在方法中使用泛型的话</p>
<div class="highlight" id="id-27"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">A</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span> <span class="p">|</span> <span class="kt">float32</span> <span class="p">|</span> <span class="kt">float64</span><span class="p">]</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 方法可以使用类型定义中的形参 T 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">receiver</span> <span class="nx">A</span><span class="p">[</span><span class="nx">T</span><span class="p">])</span> <span class="nf">Add</span><span class="p">(</span><span class="nx">a</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">b</span> <span class="nx">T</span><span class="p">)</span> <span class="nx">T</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 用法：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">a</span> <span class="nx">A</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">a</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">aa</span> <span class="nx">A</span><span class="p">[</span><span class="kt">float32</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="nx">aa</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="泛型接口" class="heading-element">
  <a href="#%e6%b3%9b%e5%9e%8b%e6%8e%a5%e5%8f%a3" class="heading-mark"></a>泛型接口</h2><h3 id="1-泛型接口定义" class="heading-element">
  <a href="#1-%e6%b3%9b%e5%9e%8b%e6%8e%a5%e5%8f%a3%e5%ae%9a%e4%b9%89" class="heading-mark"></a>1. 泛型接口定义</h3><ul>
<li>
<p>有时候使用泛型编程时会书写长长的类型约束</p>
<div class="highlight" id="id-28"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 一个可以容纳所有int,uint以及浮点类型的泛型切片
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Slice</span><span class="p">[</span><span class="nx">T</span> <span class="kt">int</span> <span class="p">|</span> <span class="kt">int8</span> <span class="p">|</span> <span class="kt">int16</span> <span class="p">|</span> <span class="kt">int32</span> <span class="p">|</span> <span class="kt">int64</span> <span class="p">|</span> <span class="kt">uint</span> <span class="p">|</span> <span class="kt">uint8</span> <span class="p">|</span> <span class="kt">uint16</span> <span class="p">|</span> <span class="kt">uint32</span> <span class="p">|</span> <span class="kt">uint64</span> <span class="p">|</span> <span class="kt">float32</span> <span class="p">|</span> <span class="kt">float64</span><span class="p">]</span> <span class="p">[]</span><span class="nx">T</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>为了方便维护，go支持如下定义</p>
<div class="highlight" id="id-29"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">IntUintFloat</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">|</span> <span class="kt">int8</span> <span class="p">|</span> <span class="kt">int16</span> <span class="p">|</span> <span class="kt">int32</span> <span class="p">|</span> <span class="kt">int64</span> <span class="p">|</span> <span class="kt">uint</span> <span class="p">|</span> <span class="kt">uint8</span> <span class="p">|</span> <span class="kt">uint16</span> <span class="p">|</span> <span class="kt">uint32</span> <span class="p">|</span> <span class="kt">uint64</span> <span class="p">|</span> <span class="kt">float32</span> <span class="p">|</span> <span class="kt">float64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Slice</span><span class="p">[</span><span class="nx">T</span> <span class="nx">IntUintFloat</span><span class="p">]</span> <span class="p">[]</span><span class="nx">T</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>也可以通过接口组合，更加灵活</p>
<div class="highlight" id="id-30"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Int</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span> <span class="p">|</span> <span class="kt">int8</span> <span class="p">|</span> <span class="kt">int16</span> <span class="p">|</span> <span class="kt">int32</span> <span class="p">|</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Uint</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">uint</span> <span class="p">|</span> <span class="kt">uint8</span> <span class="p">|</span> <span class="kt">uint16</span> <span class="p">|</span> <span class="kt">uint32</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Float</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">float32</span> <span class="p">|</span> <span class="kt">float64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Slice</span><span class="p">[</span><span class="nx">T</span> <span class="nx">Int</span> <span class="p">|</span> <span class="nx">Uint</span> <span class="p">|</span> <span class="nx">Float</span><span class="p">]</span> <span class="p">[]</span><span class="nx">T</span>  <span class="c1">// 使用 &#39;|&#39; 将多个接口类型组合
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>接口嵌套</p>
<div class="highlight" id="id-31"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">SliceElement</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Int</span> <span class="p">|</span> <span class="nx">Uint</span> <span class="p">|</span> <span class="nx">Float</span> <span class="p">|</span> <span class="kt">string</span> <span class="c1">// 组合了三个接口类型并额外增加了一个 string 类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Slice</span><span class="p">[</span><span class="nx">T</span> <span class="nx">SliceElement</span><span class="p">]</span> <span class="p">[]</span><span class="nx">T</span> 
</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="2-从方法集到类型集" class="heading-element">
  <a href="#2-%e4%bb%8e%e6%96%b9%e6%b3%95%e9%9b%86%e5%88%b0%e7%b1%bb%e5%9e%8b%e9%9b%86" class="heading-mark"></a>2. 从方法集到类型集</h3><ul>
<li>
<p>在Go1.18之前，Go官方对 <code>接口(interface)</code> 的定义是：<strong>接口是一个方法集(method set)</strong>  <code>An interface type specifies a method set called its interface</code>.</p>
</li>
<li>
<p><code>ReadWriter</code> 接口定义了一个接口(方法集)，这个集合中包含了 <code>Read()</code> 和 <code>Write()</code> 这两个方法。所有同时定义了这两种方法的类型被视为实现了这一接口。</p>
<div class="highlight" id="id-32"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ReadWriter</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">Read</span><span class="p">(</span><span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">Write</span><span class="p">(</span><span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>如果换一个角度来重新思考上面这个接口的话，会发现接口的定义实际上还能这样理解：可以把 ReaderWriter 接口看成代表了一个 类型的集合，所有实现了 <code>Read() Writer()</code> 这两个方法的类型都在接口代表的类型集合当中。</p>
</li>
<li>
<p>通过换个角度看待接口，在我们眼中接口的定义就从 <code>方法集(method set)</code> 变为了 <code>类型集(type set)</code>。而Go1.18开始就是依据这一点将接口的定义正式更改为了 <strong>类型集(Type set)</strong>。</p>
</li>
<li>
<p>接口类型 Float 代表了一个 类型集合， 所有以 float32 或 float64 为底层类型的类型，都在这一类型集之中; 而 <code>type Slice[T Float] []T</code> 中， 类型约束 的真正意思是：类型约束 指定了类型形参可接受的类型集合，只有属于这个集合中的类型才能替换形参用于实例化</p>
<div class="highlight" id="id-33"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">s</span> <span class="nx">Slice</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span>      <span class="c1">// int 属于类型集 Float ，所以int可以作为类型实参
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">s</span> <span class="nx">Slice</span><span class="p">[</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">]</span> <span class="c1">// chan int 类型不在类型集 Float 中，所以错误
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>接口实现(implement)定义的变化</strong>：既然接口定义发生了变化，那么从Go1.18开始 <code>接口实现(implement)</code> 的定义自然也发生了变化：当满足以下条件时，可以说 <strong>类型 T 实现了接口 I ( type T implements interface I)：</strong></p>
<ol>
<li><strong>T 不是接口时：类型 T 是接口 I 代表的类型集中的一个成员 (T is an element of the type set of I)。</strong></li>
<li><strong>T 是接口时： T 接口代表的类型集是 I 代表的类型集的子集(Type set of T is a subset of the type set of I)。</strong></li>
</ol>
</li>
</ul>
<h3 id="3-类型的交集和并集" class="heading-element">
  <a href="#3-%e7%b1%bb%e5%9e%8b%e7%9a%84%e4%ba%a4%e9%9b%86%e5%92%8c%e5%b9%b6%e9%9b%86" class="heading-mark"></a>3. 类型的交集和并集</h3><ul>
<li>
<p>并集<code>|</code></p>
<div class="highlight" id="id-34"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Uint</span> <span class="kd">interface</span> <span class="p">{</span>  <span class="c1">// 类型集 Uint 是 ~uint 和 ~uint8 等类型的并集
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">~</span><span class="kt">uint</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint8</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint16</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint32</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>交集</p>
<div class="highlight" id="id-35"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">AllInt</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">~</span><span class="kt">int</span> <span class="p">|</span> <span class="p">~</span><span class="kt">int8</span> <span class="p">|</span> <span class="p">~</span><span class="kt">int16</span> <span class="p">|</span> <span class="p">~</span><span class="kt">int32</span> <span class="p">|</span> <span class="p">~</span><span class="kt">int64</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint8</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint16</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint32</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint32</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Uint</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">~</span><span class="kt">uint</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint8</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint16</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint32</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">A</span> <span class="kd">interface</span> <span class="p">{</span> <span class="c1">// 接口A代表的类型集是 AllInt 和 Uint 的交集 ~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">AllInt</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Uint</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">B</span> <span class="kd">interface</span> <span class="p">{</span> <span class="c1">// 接口B代表的类型集是 AllInt 和 ~int 的交集  ~int
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">AllInt</span>
</span></span><span class="line"><span class="cl">    <span class="p">~</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>空集</p>
<div class="highlight" id="id-36"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Bad</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kt">int</span>
</span></span><span class="line"><span class="cl">    <span class="kt">float32</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span> <span class="c1">// 类型 int 和 float32 没有相交的类型，所以接口 Bad 代表的类型集为空
</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p><strong>没有任何一种类型属于空集</strong>。虽然这样的写法是可以编译的，但实际上并没有什么意义。</p>
</blockquote>
</li>
</ul>
<h3 id="4-interface-和-any" class="heading-element">
  <a href="#4-interface-%e5%92%8c-any" class="heading-mark"></a>4. interface{} 和 any</h3><ul>
<li>
<p>Go1.18开始接口的定义发生了改变，所以 <code>interface{}</code> 的定义也发生了一些变更： 空接口代表了所有类型的集合</p>
</li>
<li>
<p>对于Go1.18之后的空接口应该这样理解：</p>
<ol>
<li>虽然空接口内没有写入任何的类型，但它代表的是所有类型的集合，而非一个<strong>空集</strong>。</li>
<li>类型约束中指定 <strong>空接口</strong> 的意思是指定了一个包含所有类型的类型集，并不是类型约束限定了只能使用 <strong>空接口</strong> 来做类型形参。</li>
</ol>
<div class="highlight" id="id-37"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 空接口代表所有类型的集合。写入类型约束意味着所有类型都可拿来做类型实参
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Slice</span><span class="p">[</span><span class="nx">T</span> <span class="kd">interface</span><span class="p">{}]</span> <span class="p">[]</span><span class="nx">T</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">s1</span> <span class="nx">Slice</span><span class="p">[</span><span class="kt">int</span><span class="p">]</span>    <span class="c1">// 正确
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">s2</span> <span class="nx">Slice</span><span class="p">[</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">]</span>  <span class="c1">// 正确
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">s3</span> <span class="nx">Slice</span><span class="p">[</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">]</span>  <span class="c1">// 正确
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">s4</span> <span class="nx">Slice</span><span class="p">[</span><span class="kd">interface</span><span class="p">{}]</span>  <span class="c1">// 正确
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>在Go1.18+中，<code>any </code>等价于 <code>interface{}</code> , 这个是官方提供为了方便使用而设定的新的关键字</p>
<div class="highlight" id="id-38"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Slice</span><span class="p">[</span><span class="nx">T</span> <span class="nx">any</span><span class="p">]</span> <span class="p">[]</span><span class="nx">T</span> <span class="c1">// 代码等价于 type Slice[T interface{}] []T
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>any</code> 的定义就位于Go语言的 <code>builtin.go</code> 文件中（参考如下）， <code>any</code> 实际上就是 <code>interaface{}</code> 的别名(alias)，两者完全等价。</p>
<div class="highlight" id="id-39"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// any is an alias for interface{} and is equivalent to interface{} in all ways.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">any</span> <span class="p">=</span> <span class="kd">interface</span><span class="p">{}</span> 
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>所以从 Go 1.18 开始，所有可以用到空接口的地方其实都可以直接替换为any：</p>
<div class="highlight" id="id-40"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">s</span> <span class="p">[]</span><span class="nx">any</span> <span class="c1">// 等价于 var s []interface{}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">m</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="nx">any</span> <span class="c1">// 等价于 var m map[string]interface{}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">MyPrint</span><span class="p">(</span><span class="nx">value</span> <span class="nx">any</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>如果你高兴的话，项目迁移到 Go1.18 之后可以使用下面这行命令直接把整个项目中的空接口全都替换成 any。当然因为并不强制，所以到底是用 <code>interface{}</code> 还是 <code>any</code> 全看自己喜好。</p>
<div class="highlight" id="id-41"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">gofmt</span> <span class="o">-</span><span class="nx">w</span> <span class="o">-</span><span class="nx">r</span> <span class="err">&#39;</span><span class="kd">interface</span><span class="p">{}</span> <span class="o">-</span><span class="p">&gt;</span> <span class="nx">any</span><span class="err">&#39;</span> <span class="p">.</span><span class="o">/...</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Go语言项目中就曾经有人提出过把Go语言中所有 interface{ }替换成 any 的 issue，然后因为影响范围过大过而且影响因素不确定，理所当然被驳回了。</p>
</li>
</ul>
<h3 id="5-comparable和-ordered" class="heading-element">
  <a href="#5-comparable%e5%92%8c-ordered" class="heading-mark"></a>5. comparable和 ordered</h3><blockquote>
<p><strong>comparable(可比较) 和 可排序(ordered)</strong></p>
</blockquote>
<ul>
<li>
<p>对于一些数据类型，我们需要在类型约束中限制只接受能 <code>!=</code> 和 <code>==</code> 对比的类型，以Go直接内置了一个叫 <code>comparable</code> 的接口，它代表了所有可用 <code>!=</code> 以及 <code>==</code> 对比的类型：</p>
<div class="highlight" id="id-42"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 错误。因为 map 中键的类型必须是可进行 != 和 == 比较的类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">MyMap</span><span class="p">[</span><span class="nx">KEY</span> <span class="nx">any</span><span class="p">,</span> <span class="nx">VALUE</span> <span class="nx">any</span><span class="p">]</span> <span class="kd">map</span><span class="p">[</span><span class="nx">KEY</span><span class="p">]</span><span class="nx">VALUE</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 正确
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">MyMap</span><span class="p">[</span><span class="nx">KEY</span> <span class="nx">comparable</span><span class="p">,</span> <span class="nx">VALUE</span> <span class="nx">any</span><span class="p">]</span> <span class="kd">map</span><span class="p">[</span><span class="nx">KEY</span><span class="p">]</span><span class="nx">VALUE</span> 
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><code>comparable</code> 比较容易引起误解的一点是很多人容易把他与可排序搞混淆。可比较指的是 可以执行 <code>!= ==</code> 操作的类型，并没确保这个类型可以执行大小比较（ <code>&gt;,&lt;,&lt;=,&gt;= </code>）。、</p>
<div class="highlight" id="id-43"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">OhMyStruct</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">a</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="nx">OhMyStruct</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">==</span> <span class="nx">b</span> <span class="c1">// 正确。结构体可使用 == 进行比较
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">a</span> <span class="o">!=</span> <span class="nx">b</span> <span class="c1">// 正确
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="nx">a</span> <span class="p">&gt;</span> <span class="nx">b</span> <span class="c1">// 错误。结构体不可比大小
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>而可进行大小比较的类型被称为 <code>Orderd</code> 。目前Go语言并没有像 <code>comparable</code> 这样直接内置对应的关键词，所以想要的话需要自己来定义相关接口，比如我们可以参考Go官方包 <code>golang.org/x/exp/constraints</code> 如何定义：</p>
<div class="highlight" id="id-44"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Ordered 代表所有可比大小排序的类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Ordered</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Integer</span> <span class="p">|</span> <span class="nx">Float</span> <span class="p">|</span> <span class="p">~</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Integer</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Signed</span> <span class="p">|</span> <span class="nx">Unsigned</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Signed</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">~</span><span class="kt">int</span> <span class="p">|</span> <span class="p">~</span><span class="kt">int8</span> <span class="p">|</span> <span class="p">~</span><span class="kt">int16</span> <span class="p">|</span> <span class="p">~</span><span class="kt">int32</span> <span class="p">|</span> <span class="p">~</span><span class="kt">int64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Unsigned</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">~</span><span class="kt">uint</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint8</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint16</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint32</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint64</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uintptr</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Float</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">~</span><span class="kt">float32</span> <span class="p">|</span> <span class="p">~</span><span class="kt">float64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>虽然可以直接使用官方包 <code>golang.org/x/exp/constraints</code> ，但因为这个包属于实验性质的 x 包，今后可能会发生非常大变动，所以并不推荐直接使用</p>
</li>
</ul>
<h3 id="6-接口的两种类型" class="heading-element">
  <a href="#6-%e6%8e%a5%e5%8f%a3%e7%9a%84%e4%b8%a4%e7%a7%8d%e7%b1%bb%e5%9e%8b" class="heading-mark"></a>6. 接口的两种类型</h3><ul>
<li>
<p>Go1.18开始将接口分为了两种类型</p>
<ol>
<li><strong>基本接口(Basic interface)</strong></li>
<li><strong>通用接口(General interface)</strong></li>
</ol>
</li>
<li>
<p><strong>基本接口(Basic interface)</strong>:接口定义中如果只有方法的话，那么这种接口被称为基本接口(Basic interface)。这种接口就是Go1.18之前的接口，用法也基本和Go1.18之前保持一致。</p>
<div class="highlight" id="id-45"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">MyError</span> <span class="kd">interface</span> <span class="p">{</span> <span class="c1">// 接口中只有方法，所以是基本接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">Error</span><span class="p">()</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 用法和 Go1.18之前保持一致
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">err</span> <span class="nx">MyError</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;hello world&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// io.Reader 和 io.Writer 都是基本接口，也可以用在类型约束中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">MySlice</span><span class="p">[</span><span class="nx">T</span> <span class="nx">io</span><span class="p">.</span><span class="nx">Reader</span> <span class="p">|</span> <span class="nx">io</span><span class="p">.</span><span class="nx">Writer</span><span class="p">]</span>  <span class="p">[]</span><span class="nx">Slice</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>通用接口(General interface)</strong>:果接口内不光只有方法，还有类型的话，这种接口被称为 通用接口(General interface) ；<strong>通用接口，只能用于类型约束，不得用于变量定义</strong>， 这一限制保证了一般接口的使用被限定在了泛型之中，不会影响到Go1.18之前的代码，同时也极大减少了书写代码时的心智负担</p>
<div class="highlight" id="id-46"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Uint</span> <span class="kd">interface</span> <span class="p">{</span> <span class="c1">// 接口 Uint 中有类型，所以是通用接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">~</span><span class="kt">uint</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint8</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint16</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint32</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ReadWriter</span> <span class="kd">interface</span> <span class="p">{</span>  <span class="c1">// ReadWriter 接口既有方法也有类型，所以是通用接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="p">~</span><span class="kt">string</span> <span class="p">|</span> <span class="p">~[]</span><span class="kt">rune</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">Read</span><span class="p">(</span><span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">Write</span><span class="p">(</span><span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 类型 StringReadWriter 实现了接口 Readwriter
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">StringReadWriter</span> <span class="kt">string</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">StringReadWriter</span><span class="p">)</span> <span class="nf">Read</span><span class="p">(</span><span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">StringReadWriter</span><span class="p">)</span> <span class="nf">Write</span><span class="p">(</span><span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="c1">// ...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 类型BytesReadWriter 没有实现接口 Readwriter  
</span></span></span><span class="line"><span class="cl"><span class="c1">// StringReadWriter 存在于接口 ReadWriter 代表的类型集中，而 BytesReadWriter 因为底层类型是 []byte（既不是string也是不[]rune） ，所以它不属于 ReadWriter 代表的类型集
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">BytesReadWriter</span> <span class="p">[]</span><span class="kt">byte</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">BytesReadWriter</span><span class="p">)</span> <span class="nf">Read</span><span class="p">(</span><span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">BytesReadWriter</span><span class="p">)</span> <span class="nf">Write</span><span class="p">(</span><span class="nx">p</span> <span class="p">[]</span><span class="kt">byte</span><span class="p">)</span> <span class="p">(</span><span class="nx">n</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"> <span class="o">...</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">--------------------------------</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Uint</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">~</span><span class="kt">uint</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint8</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint16</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint32</span> <span class="p">|</span> <span class="p">~</span><span class="kt">uint64</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">uintInf</span> <span class="nx">Uint</span> <span class="c1">// 错误。Uint是通用接口，只能用于类型约束，不得用于变量定义  
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="go泛型的其他限制" class="heading-element">
  <a href="#go%e6%b3%9b%e5%9e%8b%e7%9a%84%e5%85%b6%e4%bb%96%e9%99%90%e5%88%b6" class="heading-mark"></a>go泛型的其他限制</h2><blockquote>
<ol>
<li>用 <code>|</code> 连接多个类型的时候，类型之间不能有相交的部分(即必须是不交集）; 但是相交的类型中是接口的话，则不受这一限制</li>
<li>类型的并集中不能有类型形参</li>
<li>接口不能直接或间接地并入自己</li>
<li>接口的并集成员个数大于一的时候不能直接或间接并入 comparable 接口</li>
<li>带方法的接口(无论是基本接口还是一般接口)，都不能写入接口的并集中</li>
</ol>
</blockquote>
<ol>
<li>
<p><strong>用 <code>|</code> 连接多个类型的时候，类型之间不能有相交的部分(即必须是不交集）; 但是相交的类型中是接口的话，则不受这一限制：</strong></p>
<div class="highlight" id="id-47"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">MyInt</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 错误，MyInt的底层类型是int,和 ~int 有相交的部分
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">_</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">~</span><span class="kt">int</span> <span class="p">|</span> <span class="nx">MyInt</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">MyInt</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">_</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">~</span><span class="kt">int</span> <span class="p">|</span> <span class="kd">interface</span><span class="p">{</span> <span class="nx">MyInt</span> <span class="p">}</span>  <span class="c1">// 正确
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">_</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">interface</span><span class="p">{</span> <span class="p">~</span><span class="kt">int</span> <span class="p">}</span> <span class="p">|</span> <span class="nx">MyInt</span> <span class="c1">// 也正确
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">_</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">interface</span><span class="p">{</span> <span class="p">~</span><span class="kt">int</span> <span class="p">}</span> <span class="p">|</span> <span class="kd">interface</span><span class="p">{</span> <span class="nx">MyInt</span> <span class="p">}</span>  <span class="c1">// 也正确
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>类型的并集中不能有类型形参</strong></p>
<div class="highlight" id="id-48"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">MyInf</span><span class="p">[</span><span class="nx">T</span> <span class="p">~</span><span class="kt">int</span> <span class="p">|</span> <span class="p">~</span><span class="kt">string</span><span class="p">]</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">~</span><span class="kt">float32</span> <span class="p">|</span> <span class="nx">T</span>  <span class="c1">// 错误。T是类型形参
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">MyInf2</span><span class="p">[</span><span class="nx">T</span> <span class="p">~</span><span class="kt">int</span> <span class="p">|</span> <span class="p">~</span><span class="kt">string</span><span class="p">]</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">T</span>  <span class="c1">// 错误
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>接口不能直接或间接地并入自己</strong></p>
<div class="highlight" id="id-49"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Bad</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Bad</span> <span class="c1">// 错误，接口不能直接并入自己
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Bad2</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Bad1</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Bad1</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Bad2</span> <span class="c1">// 错误，接口Bad1通过Bad2间接并入了自己
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Bad3</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">~</span><span class="kt">int</span> <span class="p">|</span> <span class="p">~</span><span class="kt">string</span> <span class="p">|</span> <span class="nx">Bad3</span> <span class="c1">// 错误，通过类型的并集并入了自己
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>接口的并集成员个数大于一的时候不能直接或间接并入 comparable 接口</strong></p>
<div class="highlight" id="id-50"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">OK</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">comparable</span> <span class="c1">// 正确。只有一个类型的时候可以使用 comparable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Bad1</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">[]</span><span class="kt">int</span> <span class="p">|</span> <span class="nx">comparable</span> <span class="c1">// 错误，类型并集不能直接并入 comparable 接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">CmpInf</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">comparable</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Bad2</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">chan</span> <span class="kt">int</span> <span class="p">|</span> <span class="nx">CmpInf</span>  <span class="c1">// 错误，类型并集通过 CmpInf 间接并入了comparable
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Bad3</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">chan</span> <span class="kt">int</span> <span class="p">|</span> <span class="kd">interface</span><span class="p">{</span><span class="nx">comparable</span><span class="p">}</span>  <span class="c1">// 理所当然，这样也是不行的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>带方法的接口(无论是基本接口还是一般接口)，都不能写入接口的并集中</strong></p>
<div class="highlight" id="id-51"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">_</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">~</span><span class="kt">int</span> <span class="p">|</span> <span class="p">~</span><span class="kt">string</span> <span class="p">|</span> <span class="kt">error</span> <span class="c1">// 错误，error是带方法的接口(一般接口) 不能写入并集中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">DataProcessor</span><span class="p">[</span><span class="nx">T</span> <span class="nx">any</span><span class="p">]</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">~</span><span class="kt">string</span> <span class="p">|</span> <span class="p">~[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nf">Process</span><span class="p">(</span><span class="nx">data</span> <span class="nx">T</span><span class="p">)</span> <span class="p">(</span><span class="nx">newData</span> <span class="nx">T</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">Save</span><span class="p">(</span><span class="nx">data</span> <span class="nx">T</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 错误，实例化之后的 DataProcessor[string] 是带方法的一般接口，不能写入类型并集
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">_</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">~</span><span class="kt">int</span> <span class="p">|</span> <span class="p">~</span><span class="kt">string</span> <span class="p">|</span> <span class="nx">DataProcessor</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span> 
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Bad</span><span class="p">[</span><span class="nx">T</span> <span class="nx">any</span><span class="p">]</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="p">~</span><span class="kt">int</span> <span class="p">|</span> <span class="p">~</span><span class="kt">string</span> <span class="p">|</span> <span class="nx">DataProcessor</span><span class="p">[</span><span class="nx">T</span><span class="p">]</span>  <span class="c1">// 也不行
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
]]></description>
</item>
<item>
  <title>12. 正则表达式</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515175142/</link>
  <pubDate>Thu, 15 May 2025 17:51:42 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515175142/</guid>
  <description><![CDATA[<h2 id="编译函数" class="heading-element">
  <a href="#%e7%bc%96%e8%af%91%e5%87%bd%e6%95%b0" class="heading-mark"></a>1 编译函数</h2><blockquote>
<p>Compile函数或MustCompile函数是将正则表达式进行编译，返回优化的 Regexp 结构体</p>
</blockquote>
<ol>
<li><code>Compile</code>: 返回两个参数*Regexp,error类型</li>
<li><code>MustCompile</code>: 只返回*Regexp类型</li>
</ol>
<h2 id="正则匹配" class="heading-element">
  <a href="#%e6%ad%a3%e5%88%99%e5%8c%b9%e9%85%8d" class="heading-mark"></a>2 正则匹配</h2><h3 id="1-matchstring" class="heading-element">
  <a href="#1-matchstring" class="heading-mark"></a>2.1 1. MatchString</h3><blockquote>
<p>返回的<strong>第一个参数是bool类型</strong>即匹配结果，<strong>第二个参数是error类型</strong></p>
</blockquote>
<ul>
<li>
<p>demo</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">sourceStr</span> <span class="o">:=</span> <span class="s">`my email is gerrylon@163.com`</span>
</span></span><span class="line"><span class="cl"><span class="nx">matched</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">MatchString</span><span class="p">(</span><span class="s">`[\w-]+@[\w]+(?:\.[\w]+)+`</span><span class="p">,</span> <span class="nx">sourceStr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%v&#34;</span><span class="p">,</span> <span class="nx">matched</span><span class="p">)</span> <span class="c1">// true
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="2-findstring" class="heading-element">
  <a href="#2-findstring" class="heading-mark"></a>2.2 2. FindString</h3><blockquote>
<p><strong>返回一个字符串</strong>，该字符串具有最左边匹配的文本。如果找不到匹配项，则返回空字符串。</p>
</blockquote>
<ul>
<li>
<p>demo</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">,</span><span class="nx">_</span><span class="o">:=</span><span class="nx">regexp</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">&#34;p([a-z]+)ch&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">//查找匹配的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nf">FindString</span><span class="p">(</span><span class="s">&#34;peach punch&#34;</span><span class="p">))</span>  <span class="c1">//打印结果：peach
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="3-findstringindex" class="heading-element">
  <a href="#3-findstringindex" class="heading-mark"></a>2.3 3. FindStringIndex</h3><blockquote>
<p>查找第一个匹配<strong>字符串开始</strong>和<strong>结束位置的索引</strong>，而不是匹配内容</p>
</blockquote>
<ul>
<li>
<p>demo</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">,</span><span class="nx">_</span><span class="o">:=</span><span class="nx">regexp</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">&#34;p([a-z]+)ch&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 查找匹配字符串开始和结束位置的索引，而不是匹配内容[0 5]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nf">FindStringIndex</span><span class="p">(</span><span class="s">&#34;peach punch&#34;</span><span class="p">))</span>  <span class="c1">//打印结果： [0 5]
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="4-findstringsubmatch" class="heading-element">
  <a href="#4-findstringsubmatch" class="heading-mark"></a>2.4 4. FindStringSubmatch</h3><blockquote>
<p>查找第一个， 返回完全匹配和局部匹配的字符串</p>
</blockquote>
<ul>
<li>
<p>dmeo</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">,</span><span class="nx">_</span><span class="o">:=</span><span class="nx">regexp</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">&#34;p([a-z]+)ch&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">//返回完全匹配和局部匹配的字符串，例如，这里会返回  p([a-z]+)ch 和 `([a-z]+) 的信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nf">FindStringSubmatch</span><span class="p">(</span><span class="s">&#34;peach punch&#34;</span><span class="p">))</span>   <span class="c1">//打印结果：[peach ea]
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="5-findallstring" class="heading-element">
  <a href="#5-findallstring" class="heading-mark"></a>2.5 5. FindAllString</h3><blockquote>
<p>查找字符串中所有符合规则的，可以指定个数</p>
</blockquote>
<ul>
<li>
<p>demo</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">r</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">&#34;p([a-z]+)ch&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nf">FindAllString</span><span class="p">(</span><span class="s">&#34;aapeach punch pqwerch&#34;</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">//打印结果： [peach punch]
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="6-findstringindex" class="heading-element">
  <a href="#6-findstringindex" class="heading-mark"></a>2.6 6. FindStringIndex</h3><blockquote>
<p>查找全部 匹配<strong>字符串开始</strong>和<strong>结束位置的索引</strong>，而不是匹配内容</p>
</blockquote>
<ul>
<li>
<p>demo</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">&#34;p([a-z]+)ch&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nf">FindAllStringIndex</span><span class="p">(</span><span class="s">&#34;aapeach punch pqwerch&#34;</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">//打印结果： [[2 7] [8 13]]
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="7-findallstringsubmatch" class="heading-element">
  <a href="#7-findallstringsubmatch" class="heading-mark"></a>2.7 7. FindAllStringSubmatch</h3><blockquote>
<p>返回全部的 完全匹配和局部匹配的字符串，可以指定个数</p>
</blockquote>
<ul>
<li>
<p>demo</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">&#34;p([a-z]+)ch&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nf">FindAllStringSubmatch</span><span class="p">(</span><span class="s">&#34;aapeach punch pqwerch&#34;</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span> <span class="c1">//打印结果： [[peach ea] [punch un]]
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="7-replaceallstring" class="heading-element">
  <a href="#7-replaceallstring" class="heading-mark"></a>2.8 7. ReplaceAllString</h3><blockquote>
<p>将匹配的结果，替换成新输入的结果, 没有匹配到返回原string</p>
</blockquote>
<ul>
<li>
<p>demo</p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">	<span class="nx">r</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">regexp</span><span class="p">.</span><span class="nf">Compile</span><span class="p">(</span><span class="s">&#34;p([a-z]+)ch&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nf">ReplaceAllString</span><span class="p">(</span><span class="s">&#34;aapeach punch pqwerch&#34;</span><span class="p">,</span> <span class="s">&#34;-&#34;</span><span class="p">))</span> <span class="c1">//打印结果： aa- - -
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="8-replaceallfunc" class="heading-element">
  <a href="#8-replaceallfunc" class="heading-mark"></a>2.9 8. ReplaceAllFunc</h3><ul>
<li>
<p>demo</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//Func 变量允许传递匹配内容到一个给定的函数中，
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">in</span><span class="o">:=</span><span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;a peach&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">out</span><span class="o">:=</span><span class="nx">r1</span><span class="p">.</span><span class="nf">ReplaceAllFunc</span><span class="p">(</span><span class="nx">in</span><span class="p">,</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">ToUpper</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">out</span><span class="p">))</span> <span class="c1">//打印结果：   a PEACH
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
]]></description>
</item>
<item>
  <title>11. Context</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515175139/</link>
  <pubDate>Thu, 15 May 2025 17:51:39 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515175139/</guid>
  <description><![CDATA[<h1 id="context" class="heading-element">
  <a href="#context" class="heading-mark"></a>Context</h1><ul>
<li>在 Go http包的Server中，每一个请求在都有一个对应的 goroutine 去处理。请求处理函数通常会启动额外的 goroutine 用来访问后端服务，比如数据库和RPC服务。用来处理一个请求的 goroutine 通常需要访问一些与请求特定的数据，比如终端用户的身份认证信息、验证相关的token、请求的截止时间。 当一个请求被取消或超时时，所有用来处理该请求的 goroutine 都应该迅速退出，然后系统才能释放这些 goroutine 占用的资源。</li>
</ul>
<h2 id="为什么需要context" class="heading-element">
  <a href="#%e4%b8%ba%e4%bb%80%e4%b9%88%e9%9c%80%e8%a6%81context" class="heading-mark"></a>1 为什么需要Context</h2><ul>
<li>下面以取消一个goroutine做示例说明为什么需要Context</li>
</ul>
<h3 id="1-基本示例" class="heading-element">
  <a href="#1-%e5%9f%ba%e6%9c%ac%e7%a4%ba%e4%be%8b" class="heading-mark"></a>1.1 1. 基本示例</h3><div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;sync&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 初始的例子
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">worker</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;worker&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 如何接收外部命令实现退出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nf">worker</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 如何优雅的实现结束子goroutine
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;over&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2-全局变量方式" class="heading-element">
  <a href="#2-%e5%85%a8%e5%b1%80%e5%8f%98%e9%87%8f%e6%96%b9%e5%bc%8f" class="heading-mark"></a>1.2 2. 全局变量方式</h3><div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;sync&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">exit</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 全局变量方式存在的问题：
</span></span></span><span class="line"><span class="cl"><span class="c1">// 1. 使用全局变量在跨包调用时不容易统一
</span></span></span><span class="line"><span class="cl"><span class="c1">// 2. 如果worker中再启动goroutine，就不太好控制了。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">worker</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;worker&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">exit</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nf">worker</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">// sleep3秒以免程序过快退出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">exit</span> <span class="p">=</span> <span class="kc">true</span>                 <span class="c1">// 修改全局变量实现子goroutine的退出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;over&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3-通道方式" class="heading-element">
  <a href="#3-%e9%80%9a%e9%81%93%e6%96%b9%e5%bc%8f" class="heading-mark"></a>1.3 3. 通道方式</h3><div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;sync&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 管道方式存在的问题：
</span></span></span><span class="line"><span class="cl"><span class="c1">// 1. 使用全局变量在跨包调用时不容易实现规范和统一，需要维护一个共用的channel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">exitChan</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nx">LOOP</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;worker&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">exitChan</span><span class="p">:</span> <span class="c1">// 等待接收上级通知
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">break</span> <span class="nx">LOOP</span>
</span></span><span class="line"><span class="cl">		<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">exitChan</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">exitChan</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span> <span class="c1">// sleep3秒以免程序过快退出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">exitChan</span> <span class="o">&lt;-</span> <span class="kd">struct</span><span class="p">{}{}</span>      <span class="c1">// 给子goroutine发送退出信号
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nb">close</span><span class="p">(</span><span class="nx">exitChan</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;over&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="4-官方版的方案" class="heading-element">
  <a href="#4-%e5%ae%98%e6%96%b9%e7%89%88%e7%9a%84%e6%96%b9%e6%a1%88" class="heading-mark"></a>1.4 4. 官方版的方案</h3><div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;sync&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nx">LOOP</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;worker&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span> <span class="c1">// 等待上级通知
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">break</span> <span class="nx">LOOP</span>
</span></span><span class="line"><span class="cl">		<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">cancel</span><span class="p">()</span> <span class="c1">// 通知子goroutine结束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;over&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>当子goroutine又开启另外一个goroutine时，只需要将ctx传入即可：</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;sync&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nf">worker2</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">LOOP</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;worker&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span> <span class="c1">// 等待上级通知
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">break</span> <span class="nx">LOOP</span>
</span></span><span class="line"><span class="cl">		<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">worker2</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nx">LOOP</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;worker2&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span> <span class="c1">// 等待上级通知
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">break</span> <span class="nx">LOOP</span>
</span></span><span class="line"><span class="cl">		<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">cancel</span><span class="p">()</span> <span class="c1">// 通知子goroutine结束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;over&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="context初识" class="heading-element">
  <a href="#context%e5%88%9d%e8%af%86" class="heading-mark"></a>2 Context初识</h2><ul>
<li>
<p>Go1.7加入了一个新的标准库<code>context</code>，它定义了<code>Context</code>类型，<strong>专门用来简化 对于处理单个请求的多个 goroutine 之间与请求域的数据、取消信号、截止时间等相关操作</strong>，这些操作可能涉及多个 API 调用。</p>
</li>
<li>
<p>对服务器传入的请求应该创建上下文，而对服务器的传出调用应该接受上下文。它们之间的函数调用链必须传递上下文，或者可以使用<code>WithCancel</code>、<code>WithDeadline</code>、<code>WithTimeout</code>或<code>WithValue</code>创建的派生上下文。当一个上下文被取消时，它派生的所有上下文也被取消。</p>
</li>
</ul>
<h2 id="context接口" class="heading-element">
  <a href="#context%e6%8e%a5%e5%8f%a3" class="heading-mark"></a>3 Context接口</h2><p><code>context.Context</code>是一个接口，该接口定义了四个需要实现的方法。具体签名如下：</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Context</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">Deadline</span><span class="p">()</span> <span class="p">(</span><span class="nx">deadline</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">,</span> <span class="nx">ok</span> <span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nf">Done</span><span class="p">()</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">    <span class="nf">Err</span><span class="p">()</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">    <span class="nf">Value</span><span class="p">(</span><span class="nx">key</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kd">interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><code>Deadline</code>方法需要返回当前<code>Context</code>被取消的时间，也就是完成工作的截止时间（deadline）；</li>
<li><code>Done</code>方法需要返回一个<code>Channel</code>，这个Channel会在当前工作完成或者上下文被取消之后关闭，多次调用<code>Done</code>方法会返回同一个Channel；</li>
<li><code>Err</code>方法会返回当前<code>Context</code>结束的原因，它只会在<code>Done</code>返回的Channel被关闭时才会返回非空的值；
<ul>
<li>如果当前<code>Context</code>被取消就会返回<code>Canceled</code>错误；</li>
<li>如果当前<code>Context</code>超时就会返回<code>DeadlineExceeded</code>错误；</li>
</ul>
</li>
<li><code>Value</code>方法会从<code>Context</code>中返回键对应的值，对于同一个上下文来说，多次调用<code>Value</code> 并传入相同的<code>Key</code>会返回相同的结果，该方法仅用于传递跨API和进程间跟请求域的数据；</li>
</ul>
<h3 id="1-background和todo" class="heading-element">
  <a href="#1-background%e5%92%8ctodo" class="heading-mark"></a>3.1 1. Background()和TODO()</h3><p>Go内置两个函数：<code>Background()</code>和<code>TODO()</code>，这两个函数分别返回一个实现了<code>Context</code>接口的<code>background</code>和<code>todo</code>。我们代码中最开始都是以这两个内置的上下文对象作为最顶层的<code>partent context</code>，衍生出更多的子上下文对象。</p>
<ul>
<li>
<p><code>Background()</code>主要用于main函数、初始化以及测试代码中，作为Context这个树结构的最顶层的Context，也就是根Context。</p>
</li>
<li>
<p><code>TODO()</code>，它目前还不知道具体的使用场景，如果我们不知道该使用什么Context的时候，可以使用这个。</p>
</li>
<li>
<p><code>background</code>和<code>todo</code>本质上都是<code>emptyCtx</code>结构体类型，是一个不可取消，没有设置截止时间，没有携带任何值的Context。</p>
</li>
</ul>
<h2 id="with系列函数" class="heading-element">
  <a href="#with%e7%b3%bb%e5%88%97%e5%87%bd%e6%95%b0" class="heading-mark"></a>4 With系列函数</h2><h3 id="1-withcancel" class="heading-element">
  <a href="#1-withcancel" class="heading-mark"></a>4.1 1. WithCancel</h3><ul>
<li><code>WithCancel</code>的函数签名如下：</li>
</ul>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">WithCancel</span><span class="p">(</span><span class="nx">parent</span> <span class="nx">Context</span><span class="p">)</span> <span class="p">(</span><span class="nx">ctx</span> <span class="nx">Context</span><span class="p">,</span> <span class="nx">cancel</span> <span class="nx">CancelFunc</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><code>WithCancel</code>返回带有新Done通道的父节点的副本。当调用返回的cancel函数或当关闭父上下文的Done通道时，将关闭返回上下文的Done通道，无论先发生什么情况。</p>
</li>
<li>
<p>取消此上下文将释放与其关联的资源，因此代码应该在此上下文中运行的操作完成后立即调用cancel。</p>
</li>
</ul>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">gen</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">dst</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">n</span> <span class="o">:=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">				<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">					<span class="k">return</span> <span class="c1">// return结束该goroutine，防止泄露
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>				<span class="k">case</span> <span class="nx">dst</span> <span class="o">&lt;-</span> <span class="nx">n</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">					<span class="nx">n</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">				<span class="p">}</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="p">}()</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">dst</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithCancel</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span> <span class="c1">// 当我们取完需要的整数后调用cancel
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">n</span> <span class="o">:=</span> <span class="k">range</span> <span class="nf">gen</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">n</span> <span class="o">==</span> <span class="mi">5</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>上面的示例代码中，<code>gen</code>函数在单独的goroutine中生成整数并将它们发送到返回的通道。 gen的调用者在使用生成的整数之后需要取消上下文，以免<code>gen</code>启动的内部goroutine发生泄漏。</li>
</ul>
<h3 id="2-withdeadline" class="heading-element">
  <a href="#2-withdeadline" class="heading-mark"></a>4.2 2. WithDeadline</h3><ul>
<li><code>WithDeadline</code>的函数签名如下：</li>
</ul>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">WithDeadline</span><span class="p">(</span><span class="nx">parent</span> <span class="nx">Context</span><span class="p">,</span> <span class="nx">deadline</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">)</span> <span class="p">(</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">CancelFunc</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>返回父上下文的副本，并将deadline调整为不迟于d。如果父上下文的deadline已经早于d，则WithDeadline(parent, d)在语义上等同于父上下文。当截止日过期时，当调用返回的cancel函数时，或者当父上下文的Done通道关闭时，返回上下文的Done通道将被关闭，以最先发生的情况为准。</p>
</li>
<li>
<p>取消此上下文将释放与其关联的资源，因此代码应该在此上下文中运行的操作完成后立即调用cancel。</p>
</li>
</ul>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">d</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">Add</span><span class="p">(</span><span class="mi">50</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithDeadline</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="nx">d</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 尽管ctx会过期，但在任何情况下调用它的cancel函数都是很好的实践。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 如果不这样做，可能会使上下文及其父类存活的时间超过必要的时间。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">time</span><span class="p">.</span><span class="nf">After</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;overslept&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Err</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>上面的代码中，定义了一个50毫秒之后过期的deadline，然后我们调用<code>context.WithDeadline(context.Background(), d)</code>得到一个上下文（ctx）和一个取消函数（cancel），然后使用一个select让主程序陷入等待：等待1秒后打印<code>overslept</code>退出或者等待ctx过期后退出。 因为ctx50秒后就过期，所以<code>ctx.Done()</code>会先接收到值，上面的代码会打印ctx.Err()取消原因。</li>
</ul>
<h3 id="3-withtimeout" class="heading-element">
  <a href="#3-withtimeout" class="heading-mark"></a>4.3 3. WithTimeout</h3><ul>
<li><code>WithTimeout</code>的函数签名如下：</li>
</ul>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">WithTimeout</span><span class="p">(</span><span class="nx">parent</span> <span class="nx">Context</span><span class="p">,</span> <span class="nx">timeout</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span><span class="p">)</span> <span class="p">(</span><span class="nx">Context</span><span class="p">,</span> <span class="nx">CancelFunc</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>WithTimeout</code>返回<code>WithDeadline(parent, time.Now().Add(timeout))</code>。</p>
<ul>
<li>取消此上下文将释放与其相关的资源，因此代码应该在此上下文中运行的操作完成后立即调用cancel，通常用于数据库或者网络连接的超时控制。具体示例如下：</li>
</ul>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;sync&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// context.WithTimeout
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="nx">LOOP</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;db connecting ...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="c1">// 假设正常连接数据库耗时10毫秒
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span> <span class="c1">// 50毫秒后自动调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">break</span> <span class="nx">LOOP</span>
</span></span><span class="line"><span class="cl">		<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;worker done!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置一个50毫秒的超时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithTimeout</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="o">*</span><span class="mi">50</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">cancel</span><span class="p">()</span> <span class="c1">// 通知子goroutine结束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;over&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="4-withvalue" class="heading-element">
  <a href="#4-withvalue" class="heading-mark"></a>4.4 4. WithValue</h3><ul>
<li><code>WithValue</code>函数能够将请求作用域的数据与 Context 对象建立关系。声明如下：</li>
</ul>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">WithValue</span><span class="p">(</span><span class="nx">parent</span> <span class="nx">Context</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">val</span> <span class="kd">interface</span><span class="p">{})</span> <span class="nx">Context</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>WithValue</code>返回父节点的副本，其中与key关联的值为val。</p>
<ul>
<li>
<p>仅对API和进程间传递请求域的数据使用上下文值，而不是使用它来传递可选参数给函数。</p>
</li>
<li>
<p>所提供的键必须是可比较的，并且不应该是<code>string</code>类型或任何其他内置类型，以避免使用上下文在包之间发生冲突。<code>WithValue</code>的用户应该为键定义自己的类型。为了避免在分配给interface{}时进行分配，上下文键通常具有具体类型<code>struct{}</code>。或者，导出的上下文关键变量的静态类型应该是指针或接口。</p>
</li>
</ul>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;sync&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// context.WithValue
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">TraceCode</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">key</span> <span class="o">:=</span> <span class="nf">TraceCode</span><span class="p">(</span><span class="s">&#34;TRACE_CODE&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">traceCode</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">ctx</span><span class="p">.</span><span class="nf">Value</span><span class="p">(</span><span class="nx">key</span><span class="p">).(</span><span class="kt">string</span><span class="p">)</span> <span class="c1">// 在子goroutine中获取trace code
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;invalid trace code&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">LOOP</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;worker, trace code:%s\n&#34;</span><span class="p">,</span> <span class="nx">traceCode</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="c1">// 假设正常连接数据库耗时10毫秒
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span> <span class="c1">// 50毫秒后自动调用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="k">break</span> <span class="nx">LOOP</span>
</span></span><span class="line"><span class="cl">		<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;worker done!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置一个50毫秒的超时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithTimeout</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="o">*</span><span class="mi">50</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 在系统的入口中设置trace code传递给后续启动的goroutine实现日志数据聚合
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ctx</span> <span class="p">=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithValue</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nf">TraceCode</span><span class="p">(</span><span class="s">&#34;TRACE_CODE&#34;</span><span class="p">),</span> <span class="s">&#34;12512312234&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">5</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">cancel</span><span class="p">()</span> <span class="c1">// 通知子goroutine结束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;over&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="使用context的注意事项" class="heading-element">
  <a href="#%e4%bd%bf%e7%94%a8context%e7%9a%84%e6%b3%a8%e6%84%8f%e4%ba%8b%e9%a1%b9" class="heading-mark"></a>5 使用Context的注意事项</h2><ul>
<li>推荐以参数的方式显示传递Context</li>
<li>以Context作为参数的函数方法，应该把Context作为第一个参数。</li>
<li>给一个函数方法传递Context的时候，不要传递nil，如果不知道传递什么，就使用context.TODO()</li>
<li>Context的Value相关方法应该传递请求域的必要数据，不应该用于传递可选参数</li>
<li>Context是线程安全的，可以放心的在多个goroutine中传递</li>
</ul>
<h2 id="客户端超时取消示例小爬虫" class="heading-element">
  <a href="#%e5%ae%a2%e6%88%b7%e7%ab%af%e8%b6%85%e6%97%b6%e5%8f%96%e6%b6%88%e7%a4%ba%e4%be%8b%e5%b0%8f%e7%88%ac%e8%99%ab" class="heading-mark"></a>6 客户端超时取消示例(小爬虫)</h2><p>调用服务端API时如何在客户端实现超时控制？</p>
<h3 id="server" class="heading-element">
  <a href="#server" class="heading-mark"></a>6.1 server</h3><div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// context_timeout/server/main.go
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;math/rand&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// server端，随机出现慢响应
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">indexHandler</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">number</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">number</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">10</span><span class="p">)</span> <span class="c1">// 耗时10秒的慢响应
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&#34;slow response&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprint</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&#34;quick response&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">http</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">indexHandler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8000&#34;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="client" class="heading-element">
  <a href="#client" class="heading-mark"></a>6.2 client</h3><div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// context_timeout/client/main.go
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;context&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;io/ioutil&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;sync&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 客户端
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">respData</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Response</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span>  <span class="kt">error</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">doCall</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">transport</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Transport</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	   <span class="c1">// 请求频繁可定义全局的client对象并启用长链接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	   <span class="c1">// 请求不频繁使用短链接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	   <span class="nx">DisableKeepAlives</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span> 	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Client</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Transport</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">transport</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">respChan</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="o">*</span><span class="nx">respData</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">req</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">NewRequest</span><span class="p">(</span><span class="s">&#34;GET&#34;</span><span class="p">,</span> <span class="s">&#34;http://127.0.0.1:8000/&#34;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;new requestg failed, err:%v\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">req</span> <span class="p">=</span> <span class="nx">req</span><span class="p">.</span><span class="nf">WithContext</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span> <span class="c1">// 使用带超时的ctx创建一个新的client request
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="nx">req</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;client.do resp:%v, err:%v\n&#34;</span><span class="p">,</span> <span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">rd</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">respData</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">resp</span><span class="p">:</span> <span class="nx">resp</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">err</span><span class="p">:</span>  <span class="nx">err</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">respChan</span> <span class="o">&lt;-</span> <span class="nx">rd</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="o">&lt;-</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Done</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">		<span class="c1">//transport.CancelRequest(req)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;call api timeout&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">result</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">respChan</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;call server api success&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">result</span><span class="p">.</span><span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;call server api failed, err:%v\n&#34;</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nx">result</span><span class="p">.</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">data</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;resp:%v\n&#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 定义一个100毫秒的超时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ctx</span><span class="p">,</span> <span class="nx">cancel</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithTimeout</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Millisecond</span><span class="o">*</span><span class="mi">100</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nf">cancel</span><span class="p">()</span> <span class="c1">// 调用cancel释放子goroutine资源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nf">doCall</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="坑" class="heading-element">
  <a href="#%e5%9d%91" class="heading-mark"></a>7 坑</h2><h3 id="1-withcancel-1" class="heading-element">
  <a href="#1-withcancel-1" class="heading-mark"></a>7.1 1. WithCancel</h3><ul>
<li>withCancel的使用要非常明确程序什么时候被取消</li>
<li>由于go大量的官方库、第三方库使用了context，所以调用<code>接收context的函数</code>时要小心，要清楚context在什么时候cancel，什么行为会触发cancel</li>
</ul>
<h3 id="2-withvalue" class="heading-element">
  <a href="#2-withvalue" class="heading-mark"></a>7.2 2. WithValue</h3><ul>
<li>
<p>所提供的键必须是可比较的，并且不应该是<code>string</code>类型或任何其他内置类型，以避免使用上下文在包之间发生冲突。<code>WithValue</code>的用户应该为键定义自己的类型。为了避免在分配给interface{}时进行分配，上下文键通常具有具体类型<code>struct{}</code>。或者，导出的上下文关键变量的静态类型应该是指针或接口。</p>
<div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">TraceCode</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span> <span class="p">=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithValue</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nf">TraceCode</span><span class="p">(</span><span class="s">&#34;TRACE_CODE&#34;</span><span class="p">),</span> <span class="s">&#34;1&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Value</span><span class="p">(</span><span class="s">&#34;TRACE_CODE&#34;</span><span class="p">))</span> <span class="c1">// nil
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Value</span><span class="p">(</span><span class="nf">TraceCode</span><span class="p">(</span><span class="s">&#34;TRACE_CODE&#34;</span><span class="p">)))</span> <span class="c1">// 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="3-context-函数传递是值传递" class="heading-element">
  <a href="#3-context-%e5%87%bd%e6%95%b0%e4%bc%a0%e9%80%92%e6%98%af%e5%80%bc%e4%bc%a0%e9%80%92" class="heading-mark"></a>7.3 3. context 函数传递是值传递</h3><ul>
<li>
<p>error demo</p>
<div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">ctxType</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ctx</span> <span class="o">:=</span> <span class="nx">context</span><span class="p">.</span><span class="nf">WithValue</span><span class="p">(</span><span class="nx">context</span><span class="p">.</span><span class="nf">Background</span><span class="p">(),</span> <span class="nf">ctxType</span><span class="p">(</span><span class="s">&#34;key&#34;</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">valueChange</span><span class="p">(</span><span class="nx">ctx</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">ctx</span><span class="p">.</span><span class="nf">Value</span><span class="p">(</span><span class="nf">ctxType</span><span class="p">(</span><span class="s">&#34;key&#34;</span><span class="p">)))</span> <span class="c1">// 1; 并不会更改值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">valueChange</span><span class="p">(</span><span class="nx">ctx</span> <span class="nx">context</span><span class="p">.</span><span class="nx">Context</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">context</span><span class="p">.</span><span class="nf">WithValue</span><span class="p">(</span><span class="nx">ctx</span><span class="p">,</span> <span class="nf">ctxType</span><span class="p">(</span><span class="s">&#34;key&#34;</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
]]></description>
</item>
<item>
  <title>10. 内置函数&amp;库</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515175137/</link>
  <pubDate>Thu, 15 May 2025 17:51:37 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515175137/</guid>
  <description><![CDATA[<h1 id="内置函数" class="heading-element">
  <a href="#%e5%86%85%e7%bd%ae%e5%87%bd%e6%95%b0" class="heading-mark"></a>内置函数</h1><h2 id="close" class="heading-element">
  <a href="#close" class="heading-mark"></a>1 close</h2><p>close 用于 channel 通讯。使用它来关闭 channel</p>
<h2 id="delete" class="heading-element">
  <a href="#delete" class="heading-mark"></a>2 delete</h2><p>delete 用于在 map 中删除实例。</p>
<h2 id="len-和-cap" class="heading-element">
  <a href="#len-%e5%92%8c-cap" class="heading-mark"></a>3 len 和 cap</h2><p>len 和 cap 可用于不同的类型，len 用于返回字符串、slice 和数组的长度。</p>
<h2 id="new" class="heading-element">
  <a href="#new" class="heading-mark"></a>4 new</h2><p>new 用于各种类型的内存分配, new 返回一个指针类型,但是不会初始化变量, 会将值全部置为零值</p>
<h2 id="make" class="heading-element">
  <a href="#make" class="heading-mark"></a>5 make</h2><p>make 用于内建类型（map、slice 和 channel）的内存分配。返回这三个的引用变量</p>
<h2 id="copy" class="heading-element">
  <a href="#copy" class="heading-mark"></a>6 copy</h2><p>copy 用于复制 slice。</p>
<h2 id="append" class="heading-element">
  <a href="#append" class="heading-mark"></a>7 append</h2><p>append 用于追加 slice</p>
<h2 id="panic" class="heading-element">
  <a href="#panic" class="heading-mark"></a>8 panic</h2><p>panic 和 recover 用于异常处理机制。</p>
<h2 id="print-和-println" class="heading-element">
  <a href="#print-%e5%92%8c-println" class="heading-mark"></a>9 print 和 println</h2><p>print 和 println 是底层打印函数，可以在不引入 fmt 包的情况下使用。它们主要用于调试。</p>
<h2 id="complexreal-和-imag" class="heading-element">
  <a href="#complexreal-%e5%92%8c-imag" class="heading-mark"></a>10 complex、real 和 imag</h2><p>complex、real 和 imag 全部用于处理 复数</p>
<h1 id="库包" class="heading-element">
  <a href="#%e5%ba%93%e5%8c%85" class="heading-mark"></a>库/包</h1><h1 id="os" class="heading-element">
  <a href="#os" class="heading-mark"></a>OS</h1><ul>
<li>
<p>os.Args  获取命令行参数,返回值是一个切片,第一个参数是可执行文件名称</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">go run main.go   // os.Args[1] = &#34;n&#34;</span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="containerlist" class="heading-element">
  <a href="#containerlist" class="heading-mark"></a>1 container/list</h2><ul>
<li>
<p>list是一个双向链表。该结构具有链表的所有功能。</p>
</li>
<li>
<p>type Element</p>
<ul>
<li>func (e *Element) Next() *Element //返回该元素的下一个元素，如果没有下一个元素则返回nil</li>
<li>func (e *Element) Prev() *Element//返回该元素的前一个元素，如果没有前一个元素则返回nil。</li>
<li>element.Value  获取元素的值</li>
</ul>
</li>
</ul>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Element</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Value</span> <span class="kd">interface</span><span class="p">{}</span>   <span class="c1">//在元素中存储的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>type List
<ul>
<li>func New() *List //返回一个初始化的list</li>
<li>func (l *List) Back() *Element //获取list l的最后一个元素</li>
<li>func (l *List) Front() *Element //获取list l的第一个元素</li>
<li>func (l *List) Init() *List //list l初始化或者清除list l</li>
<li>func (l *List) InsertAfter(v interface{}, mark *Element) *Element //在list l中元素mark之后插入一个值为v的元素，并返回该元素，如果mark不是list中元素，则list不改变。</li>
<li>func (l *List) InsertBefore(v interface{}, mark *Element) *Element//在list l中元素mark之前插入一个值为v的元素，并返回该元素，如果mark不是list中元素，则list不改变。</li>
<li>func (l *List) Len() int //获取list l的长度</li>
<li>func (l *List) MoveAfter(e, mark *Element) //将元素e移动到元素mark之后，如果元素e或者mark不属于list l，或者e==mark，则list l不改变。</li>
<li>func (l *List) MoveBefore(e, mark *Element)//将元素e移动到元素mark之前，如果元素e或者mark不属于list l，或者e==mark，则list l不改变。</li>
<li>func (l *List) MoveToBack(e *Element)//将元素e移动到list l的末尾，如果e不属于list l，则list不改变。</li>
<li>func (l *List) MoveToFront(e *Element)//将元素e移动到list l的首部，如果e不属于list l，则list不改变。</li>
<li>func (l *List) PushBack(v interface{}) *Element//在list l的末尾插入值为v的元素，并返回该元素。</li>
<li>func (l *List) PushBackList(other *List)//在list l的尾部插入另外一个list，其中l和other可以相等。</li>
<li>func (l *List) PushFront(v interface{}) *Element//在list l的首部插入值为v的元素，并返回该元素。</li>
<li>func (l *List) PushFrontList(other *List)//在list l的首部插入另外一个list，其中l和other可以相等。</li>
<li>func (l *List) Remove(e *Element) interface{}//如果元素e属于list l，将其从list中删除，并返回元素e的值。</li>
</ul>
</li>
</ul>
<p>举例说明其用法。</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;container/list&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">l</span> <span class="o">:=</span> <span class="nx">list</span><span class="p">.</span><span class="nf">New</span><span class="p">()</span> <span class="c1">//创建一个新的list
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">l</span><span class="p">.</span><span class="nf">PushBack</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">e</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nf">Front</span><span class="p">();</span> <span class="nx">e</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">;</span> <span class="nx">e</span> <span class="p">=</span> <span class="nx">e</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span> <span class="c1">//输出list的值,01234
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nf">Front</span><span class="p">().</span><span class="nx">Value</span><span class="p">)</span> <span class="c1">//输出首部元素的值,0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nf">Back</span><span class="p">().</span><span class="nx">Value</span><span class="p">)</span>  <span class="c1">//输出尾部元素的值,4
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">l</span><span class="p">.</span><span class="nf">InsertAfter</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="nx">l</span><span class="p">.</span><span class="nf">Front</span><span class="p">())</span>  <span class="c1">//首部元素之后插入一个值为10的元素
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">e</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nf">Front</span><span class="p">();</span> <span class="nx">e</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">;</span> <span class="nx">e</span> <span class="p">=</span> <span class="nx">e</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span> <span class="c1">//输出list的值,061234
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">l</span><span class="p">.</span><span class="nf">MoveBefore</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nf">Front</span><span class="p">().</span><span class="nf">Next</span><span class="p">(),</span> <span class="nx">l</span><span class="p">.</span><span class="nf">Front</span><span class="p">())</span> <span class="c1">//首部两个元素位置互换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">e</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nf">Front</span><span class="p">();</span> <span class="nx">e</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">;</span> <span class="nx">e</span> <span class="p">=</span> <span class="nx">e</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span> <span class="c1">//输出list的值,601234
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">l</span><span class="p">.</span><span class="nf">MoveToFront</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nf">Back</span><span class="p">())</span> <span class="c1">//将尾部元素移动到首部
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">e</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nf">Front</span><span class="p">();</span> <span class="nx">e</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">;</span> <span class="nx">e</span> <span class="p">=</span> <span class="nx">e</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span> <span class="c1">//输出list的值,460123
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">l2</span> <span class="o">:=</span> <span class="nx">list</span><span class="p">.</span><span class="nf">New</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">l2</span><span class="p">.</span><span class="nf">PushBackList</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span> <span class="c1">//将l中元素放在l2的末尾
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">e</span> <span class="o">:=</span> <span class="nx">l2</span><span class="p">.</span><span class="nf">Front</span><span class="p">();</span> <span class="nx">e</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">;</span> <span class="nx">e</span> <span class="p">=</span> <span class="nx">e</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span> <span class="c1">//输出l2的值,460123
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">&lt;</span><span class="nx">span</span> <span class="nx">style</span><span class="p">=</span><span class="s">&#34;color:#FF0000;&#34;</span><span class="p">&gt;</span><span class="nx">l</span><span class="p">.</span><span class="nf">Init</span><span class="p">()</span>           <span class="c1">//清空l&lt;/span&gt;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nf">Len</span><span class="p">())</span> <span class="c1">//0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">e</span> <span class="o">:=</span> <span class="nx">l</span><span class="p">.</span><span class="nf">Front</span><span class="p">();</span> <span class="nx">e</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">;</span> <span class="nx">e</span> <span class="p">=</span> <span class="nx">e</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">Value</span><span class="p">)</span> <span class="c1">//输出list的值,无内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="syncwaitgroup" class="heading-element">
  <a href="#syncwaitgroup" class="heading-mark"></a>2 sync.WaitGroup</h2><ul>
<li>WaitGroup提供3个方法实现优雅退出</li>
</ul>
<ol>
<li>Add() ：每收到http/mq请求，会在计数器+1</li>
<li>Done()：每执行完http/mq请求，会在计数器-1</li>
<li>Wait()：计数器=0，即没有正在处理的 请求</li>
</ol>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;sync&#34;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;os/signal&#34;</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sig</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Signal</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">signal</span><span class="p">.</span><span class="nf">Notify</span><span class="p">(</span><span class="nx">sigs</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGINT</span><span class="p">,</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">SIGTERM</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">httpHandle</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">sig</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">sig</span>
</span></span><span class="line"><span class="cl">		<span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">done</span> <span class="o">&lt;-</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">done</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nb">println</span><span class="p">(</span><span class="s">&#34;quit success&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">httpHandle</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">xxx</span>     
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="syncmap" class="heading-element">
  <a href="#syncmap" class="heading-mark"></a>3 sync.Map()</h2><ul>
<li>
<p>支持并发的map</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Map</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//删除指定key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">Map</span><span class="p">)</span> <span class="nf">Delete</span><span class="p">(</span><span class="nx">key</span> <span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//查询指定key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">Map</span><span class="p">)</span> <span class="nf">Load</span><span class="p">(</span><span class="nx">key</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">(</span><span class="nx">value</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">ok</span> <span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//查询，查不到则追加
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">Map</span><span class="p">)</span> <span class="nf">LoadOrStore</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">(</span><span class="nx">actual</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">loaded</span> <span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//遍历map
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">Map</span><span class="p">)</span> <span class="nf">Range</span><span class="p">(</span><span class="nx">f</span> <span class="kd">func</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="kd">interface</span><span class="p">{})</span> <span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//添加
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="o">*</span><span class="nx">Map</span><span class="p">)</span> <span class="nf">Store</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span> <span class="kd">interface</span><span class="p">{})</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
]]></description>
</item>
<item>
  <title>9. Socket编程</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515175134/</link>
  <pubDate>Thu, 15 May 2025 17:51:34 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515175134/</guid>
  <description><![CDATA[<h1 id="计算机网络基础" class="heading-element">
  <a href="#%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%bd%91%e7%bb%9c%e5%9f%ba%e7%a1%80" class="heading-mark"></a>计算机网络基础</h1><ul>
<li>常见的两种架构:
<ul>
<li>C/S 	微信,qq,迅雷等需要安装客户端的应用.
<ul>
<li>client 客户端</li>
<li>serve 服务端</li>
</ul>
</li>
<li>B/S   百度,知乎,博客园登不需要客户端,通过一个浏览器即可实现相关服务
<ul>
<li>browser 浏览器</li>
<li>server 服务端</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="协议" class="heading-element">
  <a href="#%e5%8d%8f%e8%ae%ae" class="heading-mark"></a>协议</h1><ul>
<li>
<p>server和client得到的内容都是二进制,所以每一位代表什么就需要事先规定好,再按照约定进行发送和解析,这个约定就是协议.</p>
</li>
<li>
<p><strong>arp协议(重点)</strong></p>
<ul>
<li>地址解析协议，即ARP（Address Resolution Protocol），是根据IP地址获取物理地址的一个TCP/IP协议。</li>
<li>由交换机完成:交换机<strong>先广播再单播</strong>完成通讯</li>
<li>arp协议:通过ip地址获取mac地址</li>
<li>交换机通过arp协议识别一台机器</li>
</ul>
</li>
<li>
<p><strong>IP协议</strong></p>
<ul>
<li>规定网络地址的协议叫ip协议</li>
<li>规定网络地址的协议叫ip协议，它定义的地址称之为ip地址，广泛采用的v4版本即ipv4，它规定网络地址32位2进制表示范围0.0.0.0-255.255.255.255
一个ip地址通常写成四段十进制数，例：172.16.10.1</li>
<li>IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。</li>
</ul>
</li>
</ul>
<h3 id="tcp协议" class="heading-element">
  <a href="#tcp%e5%8d%8f%e8%ae%ae" class="heading-mark"></a>TCP协议</h3><ul>
<li>
<p>可靠,速度慢,全双工通信</p>
</li>
<li>
<p>建立连接<strong>三次握手</strong>,断开连接<strong>四次挥手</strong></p>
</li>
<li>
<p>建立起链接之后,发送每条消息都有回执,为了保证数据的完整性,还有重传机制</p>
</li>
<li>
<p>数据传输:有收必有发,收发必相等</p>
</li>
<li>
<p>长连接:会一直占用对方端口</p>
</li>
<li>
<p>IO操作(input/output),IO操作的输入输出时相对内存来说</p>
<ul>
<li>write-send (输出ouput)</li>
<li>read-recv (输入input)</li>
</ul>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">#三次握手</span>
</span></span><span class="line"><span class="cl"><span class="n">TCP是因特网中的传输层协议</span><span class="err">，</span><span class="n">使用三次握手协议建立连接</span><span class="err">。</span><span class="n">当主动方发出SYN连接请求后</span><span class="err">，</span><span class="n">等待对方回答SYN</span><span class="o">+</span><span class="n">ACK</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="err">，</span><span class="n">并最终对对方的</span> <span class="n">SYN</span> <span class="n">执行</span> <span class="n">ACK</span> <span class="n">确认</span><span class="err">。</span><span class="n">这种建立连接的方法可以防止产生错误的连接</span><span class="err">。</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> 
</span></span><span class="line"><span class="cl"><span class="n">TCP三次握手的过程如下</span><span class="err">：</span>
</span></span><span class="line"><span class="cl"><span class="n">客户端发送SYN</span><span class="err">（</span><span class="n">SEQ</span><span class="o">=</span><span class="n">x</span><span class="err">）</span><span class="n">报文给服务器端</span><span class="err">，</span><span class="n">进入SYN_SEND状态</span><span class="err">。</span>
</span></span><span class="line"><span class="cl"><span class="n">服务器端收到SYN报文</span><span class="err">，</span><span class="n">回应一个SYN</span> <span class="err">（</span><span class="n">SEQ</span><span class="o">=</span><span class="n">y</span><span class="err">）</span><span class="n">ACK</span><span class="p">(</span><span class="n">ACK</span><span class="o">=</span><span class="n">x</span><span class="o">+</span><span class="mi">1</span><span class="err">）</span><span class="n">报文</span><span class="err">，</span><span class="n">进入SYN_RECV状态</span><span class="err">。</span>
</span></span><span class="line"><span class="cl"><span class="n">客户端收到服务器端的SYN报文</span><span class="err">，</span><span class="n">回应一个ACK</span><span class="p">(</span><span class="n">ACK</span><span class="o">=</span><span class="n">y</span><span class="o">+</span><span class="mi">1</span><span class="err">）</span><span class="n">报文</span><span class="err">，</span><span class="n">进入Established状态</span><span class="err">。</span>
</span></span><span class="line"><span class="cl"><span class="n">三次握手完成</span><span class="err">，</span><span class="n">TCP客户端和服务器端成功地建立连接</span><span class="err">，</span><span class="n">可以开始传输数据了</span><span class="err">。</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#四次挥手</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="n">某个应用进程首先调用close</span><span class="err">，</span><span class="n">称该端执行</span><span class="err">“</span><span class="n">主动关闭</span><span class="err">”（</span><span class="n">active</span> <span class="n">close</span><span class="err">）。</span><span class="n">该端的TCP于是发送一个FIN分节</span><span class="err">，</span><span class="n">表示数据发送完毕</span><span class="err">。</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="n">接收到这个FIN的对端执行</span> <span class="err">“</span><span class="n">被动关闭</span><span class="err">”（</span><span class="n">passive</span> <span class="n">close</span><span class="err">），</span><span class="n">这个FIN由TCP确认</span><span class="err">。</span>
</span></span><span class="line"><span class="cl"><span class="n">注意</span><span class="err">：</span><span class="n">FIN的接收也作为一个文件结束符</span><span class="err">（</span><span class="n">end</span><span class="o">-</span><span class="n">of</span><span class="o">-</span><span class="n">file</span><span class="err">）</span><span class="n">传递给接收端应用进程</span><span class="err">，</span><span class="n">放在已排队等候该应用进程接收的任何其他数据之后</span><span class="err">，</span><span class="n">因为</span><span class="err">，</span><span class="n">FIN的接收意味着接收端应用进程在相应连接上再无额外数据可接收</span><span class="err">。</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mi">3</span><span class="p">)</span> <span class="n">一段时间后</span><span class="err">，</span><span class="n">接收到这个文件结束符的应用进程将调用close关闭它的套接字</span><span class="err">。</span><span class="n">这导致它的TCP也发送一个FIN</span><span class="err">。</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="n">接收这个最终FIN的原发送端TCP</span><span class="err">（</span><span class="n">即执行主动关闭的那一端</span><span class="err">）</span><span class="n">确认这个FIN</span><span class="err">。</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> 
</span></span><span class="line"><span class="cl"><span class="n">既然每个方向都需要一个FIN和一个ACK</span><span class="err">，</span><span class="n">因此通常需要4个分节</span><span class="err">。</span></span></span></code></pre></td></tr></table>
</div>
</div><p><img loading="lazy" src="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220706221143.png" alt="image-20220706221143179" srcset="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220706221143.png?size=small, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220706221143.png?size=medium 1.5x, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20220706221143.png?size=large 2x" data-title="image-20220706221143179" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210324215259267.png" alt="image-20210324215259267" srcset="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210324215259267.png?size=small, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210324215259267.png?size=medium 1.5x, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210324215259267.png?size=large 2x" data-title="image-20210324215259267" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></p>
</li>
</ul>
<h3 id="udp协议" class="heading-element">
  <a href="#udp%e5%8d%8f%e8%ae%ae" class="heading-mark"></a>UDP协议</h3><ul>
<li>不需要建立连接,速度特别快,可能会丢消息.</li>
</ul>
<h3 id="小结tcpudp重点" class="heading-element">
  <a href="#%e5%b0%8f%e7%bb%93tcpudp%e9%87%8d%e7%82%b9" class="heading-mark"></a>小结(TCP/UDP重点)</h3><ul>
<li>
<p>应用场景</p>
<ul>
<li>TCP:文件上传下载(邮件,网盘)</li>
<li>UDP:即时通讯(微信,qq)</li>
</ul>
</li>
<li>
<p>传输文件长度:</p>
<ul>
<li>TCP 长度无限</li>
<li>UDP 能够传输的数据航都是有限的,根据数据传递设备的设置有关系</li>
</ul>
</li>
</ul>
<h1 id="osi七层模型" class="heading-element">
  <a href="#osi%e4%b8%83%e5%b1%82%e6%a8%a1%e5%9e%8b" class="heading-mark"></a>osi七层模型</h1><ul>
<li>
<p>&lsquo;应表会传网数物&rsquo;</p>
<p><code>也叫osi五层模型,专业七层,开发人员掌握五层模型,表示层会话层了解</code></p>
<ul>
<li><strong>应用层</strong>:python代码</li>
<li>表示层</li>
<li>会话层</li>
<li><strong>传输层</strong>:tcp协议 udp协议 端口</li>
<li><strong>网络层</strong>:ipv4/ipv6协议</li>
<li><strong>数据链路层</strong>:mac地址 arp协议</li>
<li><strong>物理层</strong>:</li>
</ul>
<p><img loading="lazy" src="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20210324215659.png" alt="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20210324215659.png" srcset="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20210324215659.png?size=small, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20210324215659.png?size=medium 1.5x, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20210324215659.png?size=large 2x" data-title="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/20210324215659.png" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></p>
</li>
<li>
<p>每层运行常见协议/物理设备</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>tcp/ip五层</th>
<th>每层运行常见协议</th>
<th>每层运行常见物理设备</th>
</tr>
</thead>
<tbody>
<tr>
<td>5应用层</td>
<td>python代码/http/https/ftp/smtp/</td>
<td></td>
</tr>
<tr>
<td>4传输层</td>
<td>tcp/udp协议 端口</td>
<td>四层交换机/四层路由器</td>
</tr>
<tr>
<td>3网络层</td>
<td>ipv4/ipv6协议</td>
<td>三层路由器/三层交换机</td>
</tr>
<tr>
<td>2数据链路层</td>
<td>mac地址/arp协议</td>
<td>网卡/交换机/二层交换机</td>
</tr>
<tr>
<td>1物理层</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h1 id="socket" class="heading-element">
  <a href="#socket" class="heading-mark"></a>socket</h1><ul>
<li>中文名字:套接字</li>
<li><strong>Socket是应用层与传输层中间的抽象层，Socket帮助去组织拼接信息数据，以符合指定的协议。</strong></li>
<li>用来描述IP地址和端口,是一个通信的句柄,用来实现不同计算机之间的通信</li>
<li>socket对于程序员来说,已经是网络操作的底层了</li>
</ul>
<h1 id="粘包" class="heading-element">
  <a href="#%e7%b2%98%e5%8c%85" class="heading-mark"></a>粘包</h1><h3 id="粘包概念" class="heading-element">
  <a href="#%e7%b2%98%e5%8c%85%e6%a6%82%e5%bf%b5" class="heading-mark"></a>粘包概念:</h3><ul>
<li>TCP粘包是指发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。</li>
<li>粘包可能由发送方造成，也可能由接收方造成。</li>
<li>只有TCP有粘包现象，UDP永远不会粘包</li>
<li>粘包不一定会发生</li>
</ul>
<h3 id="粘包原因" class="heading-element">
  <a href="#%e7%b2%98%e5%8c%85%e5%8e%9f%e5%9b%a0" class="heading-mark"></a>粘包原因:</h3><p><code>所谓粘包问题主要还是因为接收方不知道消息之间的界限，不知道一次性提取多少字节的数据所造成的。</code></p>
<ul>
<li>发送端原因:  由于TCP协议本身的机制（面向连接的可靠地协议-三次握手机制）客户端与服务器会<strong>维持一个连接</strong>（Channel），数据在连接不断开的情况下，可以<strong>持续不断地将多个数据包发往服务器</strong>，但是如果发送的网络数据包太小，那么他本身会启用Nagle算法（可配置是否启用）<strong>对较小的数据包进行合并</strong>（基于此，TCP的网络延迟要UDP的高些）然后再发送（超时或者包大小足够）。那么这样的话，服务器在接收到消息（数据流）的时候就<strong>无法区分哪些数据包是客户端自己分开发送的</strong>，这样产生了粘包.</li>
<li>接收端原因:  服务器在接收到数据库后，<strong>放到缓冲区</strong>中，如果<strong>消息没有被及时从缓存区取走</strong>，下次在取数据的时候可能就会出现<strong>一次取出多个数据包</strong>的情况，造成粘包现象。</li>
</ul>
<h1 id="tcp粘包解决办法" class="heading-element">
  <a href="#tcp%e7%b2%98%e5%8c%85%e8%a7%a3%e5%86%b3%e5%8a%9e%e6%b3%95" class="heading-mark"></a>tcp粘包解决办法</h1><h3 id="python版" class="heading-element">
  <a href="#python%e7%89%88" class="heading-mark"></a>python版</h3><ul>
<li>在每次使用tcp协议发送数据流时,在开头标记一个数据流长度信息,并固定该报文长度(自定义协议).在客户端接收数据时先接收该长度字节数据,判断客户端发送数据流长度,并只接收该长度字节数据,就可以实现拆包,完美解决tcp粘包问题.</li>
</ul>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">#struct模块</span>
</span></span><span class="line"><span class="cl"><span class="c1">#该模块可以把一个类型，如数字，转成固定长度为4的bytes类型</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">struct</span>
</span></span><span class="line"><span class="cl"><span class="n">res</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">,</span><span class="mi">12345</span><span class="p">)</span>	<span class="c1">#i表示整数int</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">res</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">res</span><span class="p">),</span><span class="nb">type</span><span class="p">(</span><span class="n">res</span><span class="p">))</span>  <span class="c1">#长度是4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">res2</span> <span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">,</span><span class="mi">12345111</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">res</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">res</span><span class="p">),</span><span class="nb">type</span><span class="p">(</span><span class="n">res2</span><span class="p">))</span>  <span class="c1">#长度也是4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">unpack_res</span> <span class="o">=</span><span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">,</span><span class="n">res2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">unpack_res</span><span class="p">)</span>  <span class="c1">#(12345111,)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">unpack_res</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1">#12345111</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">###################客户端client###################</span>
</span></span><span class="line"><span class="cl"><span class="c1">#!/usr/bin/env python</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -*- coding:utf-8 -*-</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">socket</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">struct</span>
</span></span><span class="line"><span class="cl"><span class="n">sock</span><span class="o">=</span><span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span>	
</span></span><span class="line"><span class="cl"><span class="n">sock</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">13459</span><span class="p">))</span>	
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">content1</span><span class="o">=</span><span class="s1">&#39;我好&#39;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>		<span class="c1">#要发送消息</span>
</span></span><span class="line"><span class="cl"><span class="n">content2</span><span class="o">=</span><span class="s1">&#39;他也好&#39;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">con1_len</span><span class="o">=</span><span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">content1</span><span class="p">))</span>	<span class="c1"># 计算要发送消息(字节)的长度,并使用struct模块转化为长度为4的字节b&#39;\x06\x00\x00\x00&#39;</span>
</span></span><span class="line"><span class="cl"><span class="n">sock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">con1_len</span><span class="p">)</span>						<span class="c1">#先把这个4字节的报文发送</span>
</span></span><span class="line"><span class="cl"><span class="n">sock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">content1</span><span class="p">)</span>						<span class="c1">#发送内容</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">con2_len</span><span class="o">=</span><span class="n">struct</span><span class="o">.</span><span class="n">pack</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">content2</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">sock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">con2_len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">sock</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">content2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">###################服务端server###################</span>
</span></span><span class="line"><span class="cl"><span class="c1">#!/usr/bin/env python</span>
</span></span><span class="line"><span class="cl"><span class="c1"># -*- coding:utf-8 -*-</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">struct</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">socket</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">sock</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span>		<span class="c1">#买手机</span>
</span></span><span class="line"><span class="cl"><span class="n">sock</span><span class="o">.</span><span class="n">bind</span><span class="p">((</span><span class="s1">&#39;127.0.0.1&#39;</span><span class="p">,</span> <span class="mi">13459</span><span class="p">))</span>		<span class="c1">#插卡</span>
</span></span><span class="line"><span class="cl"><span class="n">sock</span><span class="o">.</span><span class="n">listen</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>  	<span class="c1">#开机(同时最大连接10)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">conn</span><span class="p">,</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="n">accept</span><span class="p">()</span>		<span class="c1">#(受)与cilent端connect(攻)对应.</span>
</span></span><span class="line"><span class="cl"><span class="n">msg</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>				<span class="c1">#首先接收4个字节(4个字节由client端struct模块转化)</span>
</span></span><span class="line"><span class="cl"><span class="n">len_msg</span><span class="o">=</span> <span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">,</span><span class="n">msg</span><span class="p">)</span>	<span class="c1">#struct模块读取报文,判断跟随数据长度.返回值是一个元祖(6,)</span>
</span></span><span class="line"><span class="cl"><span class="n">size_msg</span><span class="o">=</span><span class="n">len_msg</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>					<span class="c1">#取值判断跟随数据长度</span>
</span></span><span class="line"><span class="cl"><span class="n">msg</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">size_msg</span><span class="p">)</span>			<span class="c1">#接收报文读取长度字节</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">))</span>			<span class="c1">#解码输出</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">msg</span><span class="o">=</span><span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">len_msg</span><span class="o">=</span><span class="n">struct</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s1">&#39;i&#39;</span><span class="p">,</span><span class="n">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">size_msg</span><span class="o">=</span><span class="n">len_msg</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="n">msg</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="n">size_msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">msg</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;utf-8&#39;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">conn</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">sock</span><span class="o">.</span><span class="n">close</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>!重要struct模块转化与读取都是对字节进行操作</strong>!</p>
<h3 id="go" class="heading-element">
  <a href="#go" class="heading-mark"></a>Go</h3><p>将消息长度转为<code>int32(len(msg))</code>,4个字节</p>
<ul>
<li>
<p>协议代码</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">proto</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;bufio&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;bytes&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;encoding/binary&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Encode</span><span class="p">(</span><span class="nx">message</span> <span class="kt">string</span><span class="p">)</span> <span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 读取消息的长度转换成int32类型（4字节）
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">length</span> <span class="p">=</span> <span class="nb">int32</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">message</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">pkg</span> <span class="p">=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 写入消息头
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">binary</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">pkg</span><span class="p">,</span> <span class="nx">binary</span><span class="p">.</span><span class="nx">LittleEndian</span><span class="p">,</span> <span class="nx">length</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 写入包体
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">err</span> <span class="p">=</span> <span class="nx">binary</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">pkg</span><span class="p">,</span> <span class="nx">binary</span><span class="p">.</span><span class="nx">LittleEndian</span><span class="p">,</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">message</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">pkg</span><span class="p">.</span><span class="nf">Bytes</span><span class="p">(),</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 解码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">Decode</span><span class="p">(</span><span class="nx">reader</span> <span class="o">*</span><span class="nx">bufio</span><span class="p">.</span><span class="nx">Reader</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 读消息长度
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">lengthByte</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">reader</span><span class="p">.</span><span class="nf">Peek</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">lengthBuff</span> <span class="o">:=</span> <span class="nx">bytes</span><span class="p">.</span><span class="nf">NewBuffer</span><span class="p">(</span><span class="nx">lengthByte</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">length</span> <span class="kt">int32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">binary</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">lengthBuff</span><span class="p">,</span> <span class="nx">binary</span><span class="p">.</span><span class="nx">LittleEndian</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">length</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// buffer返回缓冲中现有的可读的字节数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nb">int32</span><span class="p">(</span><span class="nx">reader</span><span class="p">.</span><span class="nf">Buffered</span><span class="p">())</span> <span class="p">&lt;</span> <span class="nx">length</span><span class="o">+</span><span class="mi">4</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 读取真正的数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">pack</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="nb">int</span><span class="p">(</span><span class="mi">4</span><span class="o">+</span><span class="nx">length</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">reader</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">pack</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="s">&#34;&#34;</span><span class="p">,</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">pack</span><span class="p">[</span><span class="mi">4</span><span class="p">:]),</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>server code</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;20_tcp/03_粘包/proto&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;bufio&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;io&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 本地端口启动服务
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">listener</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">Listen</span><span class="p">(</span><span class="s">&#34;tcp&#34;</span><span class="p">,</span> <span class="s">&#34;localhost:20000&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;服务器启动失败....&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;监听成功...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 等待连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">listener</span><span class="p">.</span><span class="nf">Accept</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;连接建立失败...&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;连接成功...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nf">Process</span><span class="p">(</span><span class="nx">conn</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 通信
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Process</span><span class="p">(</span><span class="nx">conn</span> <span class="nx">net</span><span class="p">.</span><span class="nx">Conn</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">conn</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">reader</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">conn</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">msg</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proto</span><span class="p">.</span><span class="nf">Decode</span><span class="p">(</span><span class="nx">reader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;收到消息：&#34;</span><span class="p">,</span> <span class="nx">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;decode失败，err:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>client</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;20_tcp/03_粘包/proto&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">conn</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">Dial</span><span class="p">(</span><span class="s">&#34;tcp&#34;</span><span class="p">,</span> <span class="s">&#34;127.0.0.1:20000&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;连接失败,err:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">conn</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">msg</span> <span class="o">:=</span> <span class="s">&#34;hello socket&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">20</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// 调用协议编码协议
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">b</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">proto</span><span class="p">.</span><span class="nf">Encode</span><span class="p">(</span><span class="nx">msg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Encode失败，err:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">conn</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;发送成功...,msg：&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="tcp代码实现" class="heading-element">
  <a href="#tcp%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0" class="heading-mark"></a>TCP代码实现</h1><ul>
<li>golang中使用net包实现socker编程; net常用的函数:
<ul>
<li>Dial   拨号</li>
<li>Listen   监听</li>
<li>Accept   接受</li>
</ul>
</li>
</ul>
<h3 id="tcp客户端" class="heading-element">
  <a href="#tcp%e5%ae%a2%e6%88%b7%e7%ab%af" class="heading-mark"></a>TCP客户端</h3><ul>
<li>
<p>tcp客户端</p>
</li>
<li>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 尝试连接百度服务器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">conn</span><span class="p">,</span><span class="nx">err</span><span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">Dial</span><span class="p">(</span><span class="s">&#34;tcp&#34;</span><span class="p">,</span><span class="s">&#34;www.baidu.com:80&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span><span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">conn</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;连接成功&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 发送数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">conn</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;test\n&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 接收数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">buf</span><span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">conn</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="tcp服务端" class="heading-element">
  <a href="#tcp%e6%9c%8d%e5%8a%a1%e7%ab%af" class="heading-mark"></a>TCP服务端</h3><ul>
<li>
<p>服务端</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">listener</span><span class="p">,</span><span class="nx">err</span><span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">Listen</span><span class="p">(</span><span class="s">&#34;tcp&#34;</span><span class="p">,</span><span class="s">&#34;:80&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span><span class="o">!=</span><span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">listener</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;启动成功...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 阻塞等待客户端连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">conn</span><span class="p">,</span><span class="nx">err</span><span class="o">:=</span> <span class="nx">listener</span><span class="p">.</span><span class="nf">Accept</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置连接超时时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">conn</span><span class="p">.</span><span class="nf">SetDeadline</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">Add</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置读取超时时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">conn</span><span class="p">.</span><span class="nf">SetReadDeadline</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">Add</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置写入超时时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">conn</span><span class="p">.</span><span class="nf">SetWriteDeadline</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">Add</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="udp代码实现" class="heading-element">
  <a href="#udp%e4%bb%a3%e7%a0%81%e5%ae%9e%e7%8e%b0" class="heading-mark"></a>UDP代码实现</h1><h3 id="udp客户端" class="heading-element">
  <a href="#udp%e5%ae%a2%e6%88%b7%e7%ab%af" class="heading-mark"></a>UDP客户端</h3><ul>
<li>
<p>与tcp类似; 将Dial第一个参数改为udp</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 尝试连接百度服务器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">conn</span><span class="p">,</span><span class="nx">err</span><span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">Dial</span><span class="p">(</span><span class="s">&#34;udp&#34;</span><span class="p">,</span><span class="s">&#34;www.baidu.com:80&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span><span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">conn</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;连接成功&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 发送数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">conn</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;test\n&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 接收数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">buf</span><span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">conn</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">buf</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="udp服务端" class="heading-element">
  <a href="#udp%e6%9c%8d%e5%8a%a1%e7%ab%af" class="heading-mark"></a>UDP服务端</h3><ul>
<li>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">checkErr</span><span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span><span class="o">!=</span><span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建一个UDP地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">udpaddr</span><span class="p">,</span> <span class="nx">err</span><span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">ResolveUDPAddr</span><span class="p">(</span><span class="s">&#34;udp4&#34;</span><span class="p">,</span><span class="s">&#34;:1234&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">checkErr</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建udp服务
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">conn</span><span class="p">,</span><span class="nx">err</span><span class="o">:=</span> <span class="nx">net</span><span class="p">.</span><span class="nf">ListenUDP</span><span class="p">(</span><span class="s">&#34;udp&#34;</span><span class="p">,</span><span class="nx">udpaddr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">checkErr</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">conn</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;UDP服务创建成功&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">buf</span><span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span><span class="mi">1024</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">conn</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">buf</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span><span class="nx">raddr</span><span class="p">,</span><span class="nx">err</span><span class="o">:=</span> <span class="nx">conn</span><span class="p">.</span><span class="nf">ReadFromUDP</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">conn</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;hello word\r\n&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">conn</span><span class="p">.</span><span class="nf">WriteToUDP</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;hello word\r\n&#34;</span><span class="p">),</span><span class="nx">raddr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
]]></description>
</item>
<item>
  <title>8. nethttp模块</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515175131/</link>
  <pubDate>Thu, 15 May 2025 17:51:31 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515175131/</guid>
  <description><![CDATA[<ul>
<li>
<p>Go语言内置的<code>net/http</code>包十分的优秀，</p>
</li>
<li>
<p>压力测试数据</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># mac 配置 8核 16G内存</span>
</span></span><span class="line"><span class="cl"><span class="c1"># goland 多核模式</span>
</span></span><span class="line"><span class="cl">  <span class="m">16</span> threads and <span class="m">200</span> connections
</span></span><span class="line"><span class="cl">  Thread Stats   Avg      Stdev     Max   +/- Stdev
</span></span><span class="line"><span class="cl">    Latency     5.75ms   14.07ms 224.91ms   90.89%
</span></span><span class="line"><span class="cl">    Req/Sec     9.46k     6.90k  100.80k    80.15%
</span></span><span class="line"><span class="cl">  <span class="m">4403567</span> requests in 30.09s, 596.34MB <span class="nb">read</span>
</span></span><span class="line"><span class="cl">  Socket errors: connect 0, <span class="nb">read</span> 56, write 0, timeout <span class="m">0</span>
</span></span><span class="line"><span class="cl">Requests/sec: 146360.93 <span class="c1"># 每秒并发数高达 14.6w  是sanic 10进程的3倍</span>
</span></span><span class="line"><span class="cl">Transfer/sec:  19.82MB</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>HTTP客户端有两个非常重要的类型client和request</p>
</li>
</ul>
<h2 id="1-client" class="heading-element">
  <a href="#1-client" class="heading-mark"></a>1. Client</h2><ul>
<li>Client 结构体共有四个成员
<ol>
<li>Transport 指定独立单次HTTP请求的机制</li>
<li>CheckRedirect 指定处理重定向策略</li>
<li>Jar 指定cookie管理器</li>
<li>Timeout 指定文本类型的执行请求的时间限制</li>
</ol>
</li>
</ul>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Client</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Transport</span> <span class="nx">RoundTripper</span>
</span></span><span class="line"><span class="cl">	<span class="nx">CheckRedirect</span> <span class="kd">func</span><span class="p">(</span><span class="nx">req</span> <span class="o">*</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">via</span> <span class="p">[]</span><span class="o">*</span><span class="nx">Request</span><span class="p">)</span><span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Jar</span> <span class="nx">CookieJar</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Timeout</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Duration</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>Client类型主要充当浏览器角色; 它拥有一下方法:
<ul>
<li>Do   <em>get和post都是基于do方法进行的封装</em></li>
<li>Head</li>
<li>Get</li>
<li>Post</li>
<li>PostForm</li>
</ul>
</li>
</ul>
<img src="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20211206214457663.png" alt="image-20211206214457663" style="zoom:50%;" />
<h3 id="11-启动client" class="heading-element">
  <a href="#11-%e5%90%af%e5%8a%a8client" class="heading-mark"></a>1.1 启动client</h3><p><img loading="lazy" src="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20211206214745422.png" alt="image-20211206214745422" srcset="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20211206214745422.png?size=small, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20211206214745422.png?size=medium 1.5x, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20211206214745422.png?size=large 2x" data-title="image-20211206214745422" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @date: 2021/12/6
</span></span></span><span class="line"><span class="cl"><span class="cm"> * @desc: ...
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;io/ioutil&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建连接池
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">transport</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Transport</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">DialContext</span><span class="p">:</span> <span class="p">(</span><span class="o">&amp;</span><span class="nx">net</span><span class="p">.</span><span class="nx">Dialer</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Timeout</span><span class="p">:</span>   <span class="mi">30</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span> <span class="c1">// 连接超时
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">KeepAlive</span><span class="p">:</span> <span class="mi">30</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span> <span class="c1">// 长连接保持时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="p">}).</span><span class="nx">DialContext</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">MaxIdleConns</span><span class="p">:</span>          <span class="mi">100</span><span class="p">,</span>              <span class="c1">// 最大空闲连接
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">IdleConnTimeout</span><span class="p">:</span>       <span class="mi">90</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span> <span class="c1">//空闲超时时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">TLSHandshakeTimeout</span><span class="p">:</span>   <span class="mi">10</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span> <span class="c1">//tls 握手超时时间 (https使用)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">ExpectContinueTimeout</span><span class="p">:</span> <span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">,</span>  <span class="c1">//100-continue状态码超时时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建客户端
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">client</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Client</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Timeout</span><span class="p">:</span>   <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">30</span><span class="p">,</span> <span class="c1">// 请求超时时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">Transport</span><span class="p">:</span> <span class="nx">transport</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 请求数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;http://127.0.0.1:8080/bye&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 读取body内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">bds</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">bds</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="2-request" class="heading-element">
  <a href="#2-request" class="heading-mark"></a>2. Request</h2><ul>
<li>
<p>request是对请求体的封装吗任何形式的http请求都可以由request来构造, 构造完成之后使用Client发送请求;</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Request</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Method</span> <span class="kt">string</span>		<span class="c1">//请求方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Url</span> <span class="o">*</span><span class="nx">url</span><span class="p">.</span><span class="nx">URL</span> 		<span class="c1">//请求地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Proto</span> <span class="kt">string</span> 		<span class="c1">//协议版本
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Header</span> <span class="nx">Header</span> 		<span class="c1">//请求头
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Body</span> <span class="nx">io</span><span class="p">.</span><span class="nx">ReadCloser</span> 	<span class="c1">//请求体
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Form</span> <span class="nx">url</span><span class="p">.</span><span class="nx">Values</span> 	<span class="c1">//解析好的表单数据,包括URL字段的query参数和post或者put的表单数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//...
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="3-get和post的区别" class="heading-element">
  <a href="#3-get%e5%92%8cpost%e7%9a%84%e5%8c%ba%e5%88%ab" class="heading-mark"></a>3. Get和Post的区别</h2><ol>
<li>get是从服务器上获取数据, post是向服务器推送数据</li>
<li>get和post传递参数的方式不同, get将参数放在url后面,post是将表单数据放在请求体中</li>
<li>get数据不安全,用户提交的数据用户能看到, post对用户不可见;</li>
<li>GET请求传输数据量很小, 而POST请求可以传输大量的数据</li>
<li>POST传输数据可以通过设置编码的方式正确转化中文, 而GET请求传输的数据没有变化</li>
</ol>
<h3 id="31-发起get请求" class="heading-element">
  <a href="#31-%e5%8f%91%e8%b5%b7get%e8%af%b7%e6%b1%82" class="heading-mark"></a>3.1 发起GET请求</h3><ol>
<li><strong>简单请求</strong></li>
</ol>
<ul>
<li>不带参数</li>
</ul>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;io&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;io/ioutil&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">get</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;http://www.baidu.com&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;get error&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="kd">func</span><span class="p">(</span><span class="nx">Body</span> <span class="nx">io</span><span class="p">.</span><span class="nx">ReadCloser</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;close error&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">err</span> <span class="o">:=</span> <span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}(</span><span class="nx">get</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">all</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">get</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;read error&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> 
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">all</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>带参数</li>
</ul>
<p>关于GET请求的参数需要使用Go语言内置的<code>net/url</code>这个标准库来处理。</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">apiUrl</span> <span class="o">:=</span> <span class="s">&#34;http://127.0.0.1:9090/get&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// URL param
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">data</span> <span class="o">:=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">Values</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">data</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="s">&#34;小王子&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">data</span><span class="p">.</span><span class="nf">Set</span><span class="p">(</span><span class="s">&#34;age&#34;</span><span class="p">,</span> <span class="s">&#34;18&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">u</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">url</span><span class="p">.</span><span class="nf">ParseRequestURI</span><span class="p">(</span><span class="nx">apiUrl</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;parse url requestUrl failed, err:%v\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">u</span><span class="p">.</span><span class="nx">RawQuery</span> <span class="p">=</span> <span class="nx">data</span><span class="p">.</span><span class="nf">Encode</span><span class="p">()</span> <span class="c1">// URL encode
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">u</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;post failed, err:%v\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">b</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;get resp failed, err:%v\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>对应的Server端HandlerFunc如下：</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">getHandler</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">data</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nf">Query</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;name&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;age&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">answer</span> <span class="o">:=</span> <span class="s">`{&#34;status&#34;: &#34;ok&#34;}`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">answer</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li><strong>自定义get 请求</strong></li>
</ol>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;io/ioutil&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">client</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Client</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">request</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">NewRequest</span><span class="p">(</span><span class="s">&#34;GET&#34;</span><span class="p">,</span> <span class="s">&#34;http://www.baidu.com&#34;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">response</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">StatusCode</span><span class="p">)</span> <span class="c1">// 响应码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">res</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">res</span><span class="p">))</span>  <span class="c1">// 获取的代码
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="32-发起post请求" class="heading-element">
  <a href="#32-%e5%8f%91%e8%b5%b7post%e8%af%b7%e6%b1%82" class="heading-mark"></a>3.2 发起Post请求</h3><ol>
<li><strong>简单post请求</strong></li>
</ol>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;io/ioutil&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;strings&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// net/http post demo
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">url</span> <span class="o">:=</span> <span class="s">&#34;http://127.0.0.1:9090/post&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 表单数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//contentType := &#34;application/x-www-form-urlencoded&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//data := &#34;name=小王子&amp;age=18&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// json
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">contentType</span> <span class="o">:=</span> <span class="s">&#34;application/json&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">data</span> <span class="o">:=</span> <span class="s">`{&#34;name&#34;:&#34;小王子&#34;,&#34;age&#34;:18}`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resp</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">Post</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="nx">contentType</span><span class="p">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">data</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;post failed, err:%v\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">b</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">resp</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;get resp failed, err:%v\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>对应的Server端HandlerFunc如下：</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">postHandler</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">r</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 1. 请求类型是application/x-www-form-urlencoded时解析form数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">r</span><span class="p">.</span><span class="nf">ParseForm</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">PostForm</span><span class="p">)</span> <span class="c1">// 打印form数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">PostForm</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;name&#34;</span><span class="p">),</span> <span class="nx">r</span><span class="p">.</span><span class="nx">PostForm</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;age&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 2. 请求类型是application/json时从r.Body读取数据
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">b</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;read request.Body failed, err:%v\n&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">answer</span> <span class="o">:=</span> <span class="s">`{&#34;status&#34;: &#34;ok&#34;}`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">answer</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li><strong>自定义post请求</strong></li>
</ol>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;io/ioutil&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;strings&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resq</span><span class="p">,</span> <span class="nx">err</span><span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">Post</span><span class="p">(</span><span class="s">&#34;http://www.baidu.com&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;application/x-www-form-urlencoded&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">strings</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="s">&#34;user=admin&amp;pass=admin&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span><span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">resq</span><span class="p">.</span><span class="nx">Body</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">body</span><span class="p">,</span> <span class="nx">err</span><span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">resq</span><span class="p">.</span><span class="nx">Body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span><span class="o">!=</span><span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">body</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="4-curl工具" class="heading-element">
  <a href="#4-curl%e5%b7%a5%e5%85%b7" class="heading-mark"></a>4. curl工具</h2><ul>
<li>
<p>curl 是一个利用URL语法在命令行工作的文件传输工具, 一般称之为下载工具</p>
</li>
<li>
<p>Curl 基础命令</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">curl</span> <span class="nx">URL</span> <span class="c1">// get请求获取页面, 如果是一个图片,将会下载图片
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">curl</span> <span class="o">-</span><span class="nx">o</span> <span class="nx">URL</span> <span class="c1">// 下载到本地
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">curl</span> <span class="o">-</span><span class="nx">i</span> <span class="nx">URL</span> <span class="c1">// 显示头信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">curl</span> <span class="o">-</span><span class="nx">v</span> <span class="nx">URL</span> <span class="c1">// 显示一次http通信的整个过程
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">curl</span> <span class="o">-</span><span class="nx">X</span> <span class="nx">POST</span> <span class="o">--</span><span class="nx">data</span> <span class="s">&#34;data=xxx&#34;</span> <span class="nx">URL</span>  <span class="c1">//发送post请求
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">curl</span> <span class="o">--</span><span class="nx">user</span><span class="o">-</span><span class="nx">agent</span> <span class="s">&#34;[USER AGENT]&#34;</span> <span class="nx">URL</span>  <span class="c1">// 添加useragent
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">curl</span> <span class="o">--</span><span class="nx">cokie</span> <span class="s">&#34;cookie&#34;</span> <span class="nx">URL</span> <span class="c1">//添加cookie
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">curl</span> <span class="o">--</span><span class="nx">head</span> <span class="s">&#34;head&#34;</span> <span class="nx">URL</span>  <span class="c1">//添加请求头
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="5-启动server服务" class="heading-element">
  <a href="#5-%e5%90%af%e5%8a%a8server%e6%9c%8d%e5%8a%a1" class="heading-mark"></a>5. 启动server服务</h2><ul>
<li>
<p>方式一</p>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;math/rand&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">indexHandler</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rand</span><span class="p">.</span><span class="nf">Seed</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">UnixNano</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">randNum</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Intn</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">randNum</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">5</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Fprintf</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&#34;quick response&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">http</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">indexHandler</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:8000&#34;</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>方式二:</p>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;net/http&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="nx">ADDR</span> <span class="p">=</span> <span class="s">&#34;127.0.0.1:8080&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">sayBay</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="s">&#34;bye bye!&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建路由器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">mux</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">NewServeMux</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 设置路由规则
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">mux</span><span class="p">.</span><span class="nf">HandleFunc</span><span class="p">(</span><span class="s">&#34;/bye&#34;</span><span class="p">,</span> <span class="nx">sayBay</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 创建服务器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">server</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Addr</span><span class="p">:</span>         <span class="nx">ADDR</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">WriteTimeout</span><span class="p">:</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span> <span class="o">*</span> <span class="mi">3</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Handler</span><span class="p">:</span>      <span class="nx">mux</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 监听端口并提供服务
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;starting http server at: &#34;</span> <span class="o">+</span> <span class="nx">ADDR</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">server</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="常见错误码" class="heading-element">
  <a href="#%e5%b8%b8%e8%a7%81%e9%94%99%e8%af%af%e7%a0%81" class="heading-mark"></a>常见错误码</h2><ul>
<li>200 成功状态吗</li>
<li>301 临时重定向</li>
<li>302 永久重定向</li>
<li>400 客户端 语法错误</li>
<li>401 客户端身份认证失败</li>
<li>403 拒绝访问</li>
<li>404 找不到资源</li>
<li>500 服务器内部错误</li>
<li>501 服务器不支持</li>
<li>502 错误的网关</li>
<li>503 服务器过载</li>
<li>504 网关超时</li>
<li>505 http协议错误</li>
</ul>
]]></description>
</item>
<item>
  <title>7. 反射</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515175128/</link>
  <pubDate>Thu, 15 May 2025 17:51:28 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515175128/</guid>
  <description><![CDATA[<h2 id="反射定义" class="heading-element">
  <a href="#%e5%8f%8d%e5%b0%84%e5%ae%9a%e4%b9%89" class="heading-mark"></a>反射定义</h2><h3 id="python-反射" class="heading-element">
  <a href="#python-%e5%8f%8d%e5%b0%84" class="heading-mark"></a>Python 反射</h3><ul>
<li>
<p>python一切皆对象,所以想要通过字符串的形式操作内部成员都可以通过反射去完成操作.</p>
</li>
<li>
<p>py文件 包 类 对象&hellip;(导入包操作类调用方法)</p>
</li>
<li>
<p>反射:根据字符串的形式去某个对象操作对象的成员.</p>
<ul>
<li>
<p>getattr(对象名,&ldquo;方法名&rdquo;)</p>
<ul>
<li>
<p><strong>根据字符串的形式去某个对象中获取对象的成员</strong>.</p>
</li>
<li>
<p>attribute属性</p>
</li>
</ul>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Foo</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">name</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">login</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">      <span class="k">pass</span>
</span></span><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">(</span><span class="s1">&#39;alex&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 获取变量</span>
</span></span><span class="line"><span class="cl"><span class="n">v1</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span><span class="s1">&#39;name&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 获取方法</span>
</span></span><span class="line"><span class="cl"><span class="n">method_name</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span><span class="s1">&#39;login&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="n">method_name</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>setattr(对象名称,&ldquo;变量&rdquo;,值 )</p>
<ul>
<li><strong>根据字符串的形式去某个对象中设置成员</strong>.</li>
</ul>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Foo</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  <span class="k">pass</span>
</span></span><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">obj</span><span class="o">.</span><span class="n">k1</span> <span class="o">=</span> <span class="mi">999</span>
</span></span><span class="line"><span class="cl"><span class="nb">setattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span><span class="s1">&#39;k1&#39;</span><span class="p">,</span><span class="mi">123</span><span class="p">)</span> <span class="c1"># obj.k1 = 123</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nb">print</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">k1</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>hasattr(对象名称,&ldquo;方法名&rdquo;)</p>
<ul>
<li><strong>根据字符串的形式去某个对象中判断是否含有某成员</strong>.返回布尔类型</li>
</ul>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl">  <span class="k">class</span> <span class="nc">Foo</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">      <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="n">obj</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">  <span class="n">obj</span><span class="o">.</span><span class="n">k1</span> <span class="o">=</span> <span class="mi">999</span>
</span></span><span class="line"><span class="cl">  <span class="nb">hasattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span><span class="s1">&#39;k1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nb">print</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">k1</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>delattr(对象,&ldquo;方法名&rdquo;)</p>
</li>
<li>
<p><strong>根据字符串的形式去某个对象中删除某成员</strong>.</p>
</li>
</ul>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="k">class</span> <span class="nc">Foo</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="k">pass</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">obj</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="n">obj</span><span class="o">.</span><span class="n">k1</span> <span class="o">=</span> <span class="mi">999</span>
</span></span><span class="line"><span class="cl"><span class="nb">delattr</span><span class="p">(</span><span class="n">obj</span><span class="p">,</span><span class="s1">&#39;k1&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nb">print</span><span class="p">(</span><span class="n">obj</span><span class="o">.</span><span class="n">k1</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>importlib</strong> 用字符串的形式导入模块</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">模块</span> <span class="o">=</span> <span class="n">importlib</span><span class="o">.</span><span class="n">import_module</span><span class="p">(</span><span class="s1">&#39;utils.redis&#39;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>示例:</li>
</ul>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="kn">import</span> <span class="nn">importlib</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">#用字符串的模式导入模块</span>
</span></span><span class="line"><span class="cl"><span class="n">redis</span> <span class="o">=</span> <span class="n">importlib</span><span class="o">.</span><span class="n">import_module</span><span class="p">(</span><span class="s2">&#34;utils.redis&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">#用字符串的形式去对象(模块)找到他的成员</span>
</span></span><span class="line"><span class="cl"><span class="nb">getattr</span><span class="p">(</span><span class="n">redis</span><span class="p">,</span><span class="s2">&#34;func&#34;</span><span class="p">)()</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="bp">self</span><span class="o">.</span><span class="n">MIDDLEWARE_CLASSES</span> <span class="o">=</span> <span class="p">[</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;utils.session.SessionMiddleware&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;utils.auth.AuthMiddleware&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="s1">&#39;utils.csrf.CrsfMiddleware&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="p">]</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">mes</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">MIDDLEWARE_CLASSES</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">    <span class="n">module_path</span><span class="p">,</span><span class="n">class_name</span><span class="o">=</span><span class="n">mes</span><span class="o">.</span><span class="n">rsplit</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">,</span><span class="n">maxsplit</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>       <span class="c1">#切割路径和类名</span>
</span></span><span class="line"><span class="cl">    <span class="n">module_object</span> <span class="o">=</span> <span class="n">importlib</span><span class="o">.</span><span class="n">import_module</span><span class="p">(</span><span class="n">module_path</span><span class="p">)</span>    <span class="c1">#插入模块-字符串操作</span>
</span></span><span class="line"><span class="cl">    <span class="n">cla</span><span class="o">=</span><span class="nb">getattr</span><span class="p">(</span><span class="n">module_object</span><span class="p">,</span><span class="n">class_name</span><span class="p">)</span>        <span class="c1">#根据模块对象找到类名(字符串操作-反射)</span>
</span></span><span class="line"><span class="cl">    <span class="n">obj</span> <span class="o">=</span> <span class="n">cla</span><span class="p">()</span>      <span class="c1">#实例化对象</span>
</span></span><span class="line"><span class="cl">	<span class="n">obj</span><span class="o">.</span><span class="n">process</span><span class="p">()</span>      <span class="c1">#运行内部函数process</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="golang反射" class="heading-element">
  <a href="#golang%e5%8f%8d%e5%b0%84" class="heading-mark"></a>Golang反射</h3><ul>
<li>
<p>反射是指程序在运行期间，动态地更新、获取变量的值，包括获取字段类型、名称、调用类变量对应的方法等。</p>
</li>
<li>
<p><strong>在运行时更新变量和检查他们的值并调用他们的方法和他们支持的内在操作, 但是在编译时b并不知道这些变量的具体类型; 这种机制叫做反射</strong></p>
</li>
<li>
<p>python的反射和Golang反射的区别</p>
<ul>
<li>python反射:
<ul>
<li>确认对象的类</li>
<li>确认类中所有的成员变量和方法</li>
<li>动态调用任意一个对象的方法</li>
</ul>
</li>
<li>golang反射
<ul>
<li><strong>不支持对字符串解析!</strong></li>
<li><strong>获取对象的值和类型,获取结构体成员的类型, 调用结构体方法</strong></li>
<li><strong>只能作用于已经存在的对象上</strong></li>
</ul>
</li>
</ul>
</li>
<li>
<p>变量包括两部分:</p>
<ul>
<li>类型信息, 这部分是原信息, 是预定义好的</li>
<li>值类型, 这部分在程序运行过程中是动态改变的</li>
</ul>
</li>
<li>
<p>反射与空接口</p>
<ul>
<li>在运行时动态的获取一个变量的类型信息和值信息就是反射</li>
</ul>
</li>
<li>
<p>reflect</p>
<ul>
<li><strong>reflect.TypeOf()</strong>  获取变量类型信息, 返回一个type接口</li>
<li><strong>reflect.ValueOf()</strong>  获取变量值信息</li>
<li><strong>reflect.Kind()</strong>   获取变量类型</li>
</ul>
</li>
</ul>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;reflect&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">x</span> <span class="kt">float64</span> <span class="p">=</span> <span class="mf">3.4</span>
</span></span><span class="line"><span class="cl">	<span class="nx">t</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">TypeOf</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>  <span class="c1">// t是一个type对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">reflect</span><span class="p">.</span><span class="nf">TypeOf</span><span class="p">(</span><span class="nx">t</span><span class="p">))</span>  <span class="c1">//*reflect.rtype
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;type:&#34;</span><span class="p">,</span> <span class="nx">t</span><span class="p">.</span><span class="nf">Kind</span><span class="p">())</span>  <span class="c1">// float64
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="反射的基本用法" class="heading-element">
  <a href="#%e5%8f%8d%e5%b0%84%e7%9a%84%e5%9f%ba%e6%9c%ac%e7%94%a8%e6%b3%95" class="heading-mark"></a>反射的基本用法</h2><ul>
<li>
<p>reflect</p>
<ul>
<li><strong>t := reflect.TypeOf()</strong>  获取变量类型信息, 返回一个type接口</li>
<li><strong>t := reflect.ValueOf()</strong>  获取变量值信息</li>
<li><strong>t.Kind()</strong>   获取变量类型</li>
</ul>
</li>
<li>
<p><strong>t.Elem()</strong>   反射获取指针变量所指向的元素类型</p>
<ul>
<li><strong>t.Name()</strong>   获取变量类型名称</li>
</ul>
</li>
<li>
<p>reflect.Kind() 获取到的变量种类:</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span>  <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Invalid</span> <span class="nx">Kind</span> <span class="p">=</span> <span class="kc">iota</span>   <span class="c1">// 非法类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Bool</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Int</span>		<span class="c1">//有符号整形
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Int8</span>   <span class="c1">// 有符号8位整形
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Int16</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Int32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Int64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Uint</span>   <span class="c1">//无符号整形
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Uint8</span>	<span class="c1">// 无符号8位整形
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Uint16</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Uint32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Uint64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Uintptr</span>   <span class="c1">//指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Float32</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Float64</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Complex64</span>  <span class="c1">//64位复数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Complex128</span>  <span class="c1">//128位复数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Array</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Chan</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Func</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Interface</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Map</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Ptr</span>   <span class="c1">//指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Slice</span>
</span></span><span class="line"><span class="cl">	<span class="nx">String</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Struct</span>
</span></span><span class="line"><span class="cl">	<span class="nx">UnsafePointer</span>   <span class="c1">//底层指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="获取类型信息" class="heading-element">
  <a href="#%e8%8e%b7%e5%8f%96%e7%b1%bb%e5%9e%8b%e4%bf%a1%e6%81%af" class="heading-mark"></a>获取类型信息</h3><ul>
<li><strong>reflect.TypeOf()</strong>  获取变量类型信息, 返回一个type接口</li>
</ul>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;reflect&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Number</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">checkType</span><span class="p">(</span><span class="nx">t</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">Type</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">t</span><span class="p">.</span><span class="nf">Kind</span><span class="p">()</span> <span class="o">==</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">Ptr</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;变量的类型名称:%v; 指向的变量为:%s\n&#34;</span><span class="p">,</span> <span class="nx">t</span><span class="p">.</span><span class="nf">Kind</span><span class="p">(),</span> <span class="nx">t</span><span class="p">.</span><span class="nf">Elem</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;变量的类型名称=&gt; %v; ;类型种类=&gt;:%s\n&#34;</span><span class="p">,</span> <span class="nx">t</span><span class="p">.</span><span class="nf">Name</span><span class="p">(),</span> <span class="nx">t</span><span class="p">.</span><span class="nf">Kind</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">number</span> <span class="nx">Number</span> <span class="p">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="nx">typeOfNumber</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">TypeOf</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;type of number:&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">checkType</span><span class="p">(</span><span class="nx">typeOfNumber</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">person</span> <span class="nx">Person</span>
</span></span><span class="line"><span class="cl">	<span class="nx">typeOfPerson</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">TypeOf</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;type of person&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">checkType</span><span class="p">(</span><span class="nx">typeOfPerson</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">typeOfPersonPtr</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">TypeOf</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">person</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;type of &amp;person&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">checkType</span><span class="p">(</span><span class="nx">typeOfPersonPtr</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">type of number:
</span></span></span><span class="line"><span class="cl"><span class="cm">变量的类型名称=&gt; Number; ;类型种类=&gt;:int
</span></span></span><span class="line"><span class="cl"><span class="cm">type of person
</span></span></span><span class="line"><span class="cl"><span class="cm">变量的类型名称=&gt; Person; ;类型种类=&gt;:struct
</span></span></span><span class="line"><span class="cl"><span class="cm">type of &amp;person
</span></span></span><span class="line"><span class="cl"><span class="cm">变量的类型名称:ptr; 指向的变量为:main.Person
</span></span></span><span class="line"><span class="cl"><span class="cm">变量的类型名称=&gt; ; ;类型种类=&gt;:ptr
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="获取类型的值" class="heading-element">
  <a href="#%e8%8e%b7%e5%8f%96%e7%b1%bb%e5%9e%8b%e7%9a%84%e5%80%bc" class="heading-mark"></a>获取类型的值</h3><ul>
<li><strong>t :=reflect.ValueOf()</strong>  获取变量值信息</li>
<li>获取变量的值和反射调用函数都需要使用<strong>reflect.ValueOf()</strong></li>
<li><strong>t.Kind()</strong> == <strong>reflect.TypeOf()</strong></li>
<li><strong>t.Set</strong>Int( intnumber )  改变类型的值,因为是值传递,必须传入指针才能改变值</li>
</ul>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span> 
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;reflect&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">getVlaue</span><span class="p">(</span><span class="nx">arg</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">argReflectValue</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">ValueOf</span><span class="p">(</span><span class="nx">arg</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;arg value : %v\n&#34;</span><span class="p">,</span> <span class="nx">argReflectValue</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;arg type :%v\n&#34;</span><span class="p">,</span> <span class="nx">argReflectValue</span><span class="p">.</span><span class="nf">Kind</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">switch</span> <span class="nx">argReflectValue</span><span class="p">.</span><span class="nf">Kind</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">Int</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;arg type is int&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">Float32</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="c1">// fmt.Println(&#34;arg type is float32&#34;)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">res</span> <span class="o">:=</span> <span class="nx">argReflectValue</span><span class="p">.</span><span class="nf">Elem</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">res</span><span class="p">.</span><span class="nf">SetFloat</span><span class="p">(</span><span class="mf">2.6</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">case</span> <span class="nx">reflect</span><span class="p">.</span><span class="nx">Ptr</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;arg type is pointer&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">res</span> <span class="o">:=</span> <span class="nx">argReflectValue</span><span class="p">.</span><span class="nf">Elem</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">res</span><span class="p">.</span><span class="nf">SetFloat</span><span class="p">(</span><span class="mf">2.6</span><span class="p">)</span>     <span class="c1">// 改变传入参数的值, 必须传入指针类型才可以改变
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;not fond&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">f</span> <span class="kt">float32</span> <span class="p">=</span> <span class="mf">1.3</span>
</span></span><span class="line"><span class="cl">	<span class="nf">getVlaue</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="反射调用函数" class="heading-element">
  <a href="#%e5%8f%8d%e5%b0%84%e8%b0%83%e7%94%a8%e5%87%bd%e6%95%b0" class="heading-mark"></a>反射调用函数</h3><ul>
<li>
<p>反射调用函数: 使用reflect.ValueOf() 方法传入想要反射的函数名, 获取到reflect.Value对象, 再通过该对象啊的call方法调用该函数;</p>
</li>
<li>
<p>Call 方法需要提前声明;</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">v</span> <span class="nx">Value</span><span class="p">)</span> <span class="nf">Call</span> <span class="p">(</span><span class="nx">in</span> <span class="p">[]</span><span class="nx">Value</span><span class="p">)</span> <span class="p">[]</span><span class="nx">Value</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>call 方法输入的参数in调用v持有的函数.</li>
<li>例如, 如果len(in) == 3, v.Call(in) 代表调用v(int[0],int[1],int[2]), 其中value值表示其持有值.  如果v的kind不是func将会panic..  它返回函数所有输出结果的Value封装的切片。和Go代码一样,每一个输入实参的持有值都必须可以直接赋值给函数对应输入参数的类型。如果v持有值是可变参数函数,Call方法会自行创建一个代表可变参数的切片,将对应可变参数的值都拷贝到里面。</li>
</ul>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;reflect&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Equal</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">a</span> <span class="o">==</span> <span class="nx">b</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// reflect.Value 类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">valueOfFunc</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">ValueOf</span><span class="p">(</span><span class="nx">Equal</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 构造函数参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">args</span> <span class="o">:=</span> <span class="p">[]</span><span class="nx">reflect</span><span class="p">.</span><span class="nx">Value</span><span class="p">{</span><span class="nx">reflect</span><span class="p">.</span><span class="nf">ValueOf</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">ValueOf</span><span class="p">(</span><span class="mi">2</span><span class="p">)}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 同各国反射调用函数计算
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">result</span> <span class="o">:=</span> <span class="nx">valueOfFunc</span><span class="p">.</span><span class="nf">Call</span><span class="p">(</span><span class="nx">args</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;函数运行结果: &#34;</span><span class="p">,</span> <span class="nx">result</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">Bool</span><span class="p">())</span>  <span class="c1">// 函数运行结果:  false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="结构体反射" class="heading-element">
  <a href="#%e7%bb%93%e6%9e%84%e4%bd%93%e5%8f%8d%e5%b0%84" class="heading-mark"></a>结构体反射</h2><ul>
<li>反射可以获取结构体成员的类型、结构体成员的值、以及调用结构体的方法</li>
</ul>
<h3 id="1-获取结构体成员类型" class="heading-element">
  <a href="#1-%e8%8e%b7%e5%8f%96%e7%bb%93%e6%9e%84%e4%bd%93%e6%88%90%e5%91%98%e7%b1%bb%e5%9e%8b" class="heading-mark"></a>1. 获取结构体成员类型</h3><ul>
<li>
<p>t := reflect.TypeOf(&ldquo;结构体&rdquo;)   // t是reflect.Type类型</p>
<ul>
<li>
<p>t.NumField()  获取结构体成员的数量</p>
</li>
<li>
<p>t.Field(index) 可以<strong>根据索引</strong>返回结构体字段详细信息; 具体信息如下</p>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">StructField</span> <span class="kd">struct</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span> <span class="kt">string</span>  	<span class="c1">//字段名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">PkgPath</span> <span class="kt">string</span>  <span class="c1">//字段路径
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Type</span> <span class="nx">Type</span>		<span class="c1">//字段反射类型对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Tag</span> <span class="nx">StruntTag</span>	<span class="c1">//字段结构体标签
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Offset</span> <span class="nx">uinptr</span>	<span class="c1">//字段在结构体中的偏移
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Index</span>  <span class="p">[]</span><span class="kt">int</span> 	<span class="c1">//字段的索引值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Anonymous</span> <span class="kt">bool</span> 	<span class="c1">//是否为匿名字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>t.FieldByName(name string)    通过<strong>字段名</strong>来获取字段信息</p>
</li>
<li>
<p>t.FieldByIndex(index []int)   通过<strong>下标</strong>来获取字段信息</p>
</li>
</ul>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// type StructField struct{
</span></span></span><span class="line"><span class="cl"><span class="c1">// 	Name string  	//字段名
</span></span></span><span class="line"><span class="cl"><span class="c1">// 	PkgPath string  //字段路径
</span></span></span><span class="line"><span class="cl"><span class="c1">// 	Type Type		//字段反射类型对象
</span></span></span><span class="line"><span class="cl"><span class="c1">// 	Tag StruntTag	//字段结构体标签
</span></span></span><span class="line"><span class="cl"><span class="c1">// 	Offset uinptr	//字段在结构体中的偏移
</span></span></span><span class="line"><span class="cl"><span class="c1">// 	Index  []int 	//字段的索引值
</span></span></span><span class="line"><span class="cl"><span class="c1">// 	Anonymous bool 	//是否为匿名字段
</span></span></span><span class="line"><span class="cl"><span class="c1">// }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;reflect&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Age</span>  <span class="kt">int</span> <span class="s">`json:&#34;age&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">person</span> <span class="o">:=</span> <span class="nx">Person</span><span class="p">{</span><span class="s">&#34;Evan&#34;</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="s">&#34;备注&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">typeOfPerson</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">TypeOf</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 遍历结构体成员, 获取字段信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">typeOfPerson</span><span class="p">.</span><span class="nf">NumField</span><span class="p">();</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">field</span> <span class="o">:=</span> <span class="nx">typeOfPerson</span><span class="p">.</span><span class="nf">Field</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">name</span> <span class="o">:=</span> <span class="nx">field</span><span class="p">.</span><span class="nx">Name</span>
</span></span><span class="line"><span class="cl">		<span class="nx">tag</span> <span class="o">:=</span> <span class="nx">field</span><span class="p">.</span><span class="nx">Tag</span>
</span></span><span class="line"><span class="cl">		<span class="nx">anonymous</span> <span class="o">:=</span> <span class="nx">field</span><span class="p">.</span><span class="nx">Anonymous</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;字段名:%v 字段标签:%v 是否为匿名字段:%v \n&#34;</span><span class="p">,</span> <span class="nx">name</span><span class="p">,</span> <span class="nx">tag</span><span class="p">,</span> <span class="nx">anonymous</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 通过字段名获取字段信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">field</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">typeOfPerson</span><span class="p">.</span><span class="nf">FieldByName</span><span class="p">(</span><span class="s">&#34;Age&#34;</span><span class="p">);</span> <span class="nx">ok</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;通过字段名&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;字段名:%v  字段标签中json为: %v \n&#34;</span><span class="p">,</span> <span class="nx">field</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">field</span><span class="p">.</span><span class="nx">Tag</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;json&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 通过下标获取字段信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">field</span> <span class="o">:=</span> <span class="nx">typeOfPerson</span><span class="p">.</span><span class="nf">FieldByIndex</span><span class="p">([]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;字段名:%v 字段标签: %v \n&#34;</span><span class="p">,</span> <span class="nx">field</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">field</span><span class="p">.</span><span class="nx">Tag</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">字段名:Name 字段标签: 是否为匿名字段:false
</span></span></span><span class="line"><span class="cl"><span class="cm">字段名:Age 字段标签:json:&#34;age&#34; 是否为匿名字段:false
</span></span></span><span class="line"><span class="cl"><span class="cm">字段名:string 字段标签: 是否为匿名字段:true
</span></span></span><span class="line"><span class="cl"><span class="cm">通过字段名
</span></span></span><span class="line"><span class="cl"><span class="cm">字段名:Age  字段标签中json为: age
</span></span></span><span class="line"><span class="cl"><span class="cm">字段名:Age 字段标签: json:&#34;age&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="2-获取结构体成员字段的值" class="heading-element">
  <a href="#2-%e8%8e%b7%e5%8f%96%e7%bb%93%e6%9e%84%e4%bd%93%e6%88%90%e5%91%98%e5%ad%97%e6%ae%b5%e7%9a%84%e5%80%bc" class="heading-mark"></a>2. 获取结构体成员字段的值</h3><ul>
<li>
<p>t := reflect.Valueof(&ldquo;结构体&rdquo;)</p>
<ul>
<li>t.NumField()  获取结构体成员的数量</li>
<li>t.Feild(index)  根据 索引返回的对应结构体字段的reflect.Value 反射类型</li>
</ul>
<div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// type StructField struct{
</span></span></span><span class="line"><span class="cl"><span class="c1">// 	Name string  	//字段名
</span></span></span><span class="line"><span class="cl"><span class="c1">// 	PkgPath string  //字段路径
</span></span></span><span class="line"><span class="cl"><span class="c1">// 	Type Type		//字段反射类型对象
</span></span></span><span class="line"><span class="cl"><span class="c1">// 	Tag StruntTag	//字段结构体标签
</span></span></span><span class="line"><span class="cl"><span class="c1">// 	Offset uinptr	//字段在结构体中的偏移
</span></span></span><span class="line"><span class="cl"><span class="c1">// 	Index  []int 	//字段的索引值
</span></span></span><span class="line"><span class="cl"><span class="c1">// 	Anonymous bool 	//是否为匿名字段
</span></span></span><span class="line"><span class="cl"><span class="c1">// }
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;reflect&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Age</span>  <span class="kt">int</span> <span class="s">`json:&#34;age&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">person</span> <span class="o">:=</span> <span class="nx">Person</span><span class="p">{</span><span class="s">&#34;Evan&#34;</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="s">&#34;备注&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">valueOfPerson</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">ValueOf</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 结构体字段数量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fieldNum</span> <span class="o">:=</span> <span class="nx">valueOfPerson</span><span class="p">.</span><span class="nf">NumField</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;结构体字段数量: %d \n&#34;</span><span class="p">,</span> <span class="nx">fieldNum</span><span class="p">)</span> <span class="c1">//结构体字段数量: 3
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 通过下标获取字段值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">field1</span> <span class="o">:=</span> <span class="nx">valueOfPerson</span><span class="p">.</span><span class="nf">Field</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;字段值:%v \n&#34;</span><span class="p">,</span> <span class="nx">field1</span><span class="p">.</span><span class="nf">Int</span><span class="p">())</span>    <span class="c1">//字段值:18
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">field2</span> <span class="o">:=</span> <span class="nx">valueOfPerson</span><span class="p">.</span><span class="nf">Field</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;字段值:%v \n&#34;</span><span class="p">,</span> <span class="nx">field2</span><span class="p">.</span><span class="nf">String</span><span class="p">())</span>  <span class="c1">//字段值:Evan
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 通过字段名获取字段信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">field</span>  <span class="o">:=</span> <span class="nx">valueOfPerson</span><span class="p">.</span><span class="nf">FieldByName</span><span class="p">(</span><span class="s">&#34;Age&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;字段值: %v \n&#34;</span><span class="p">,</span> <span class="nx">field</span><span class="p">.</span><span class="nf">Interface</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">// 通过下标索引获取字段信息
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">field</span> <span class="p">=</span> <span class="nx">valueOfPerson</span><span class="p">.</span><span class="nf">FieldByIndex</span><span class="p">([]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;字段值: %v \n&#34;</span><span class="p">,</span> <span class="nx">field</span><span class="p">.</span><span class="nf">Interface</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="3-反射执行结构体方法" class="heading-element">
  <a href="#3-%e5%8f%8d%e5%b0%84%e6%89%a7%e8%a1%8c%e7%bb%93%e6%9e%84%e4%bd%93%e6%96%b9%e6%b3%95" class="heading-mark"></a>3. 反射执行结构体方法</h3><ul>
<li>
<p>结构体方法需要使用reflect.ValueOf() 获取reflect.Value对象, 然后调用该对象的MethodByName(name) 函数, 找到对应要反射调用的方法, 再通过Call函数进行反射调用</p>
<div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;reflect&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Age</span>  <span class="kt">int</span> <span class="s">`json:&#34;age&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">Person</span><span class="p">)</span><span class="nf">GetName</span><span class="p">(</span><span class="nx">a</span> <span class="kt">int</span><span class="p">)</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">Name</span><span class="p">)</span>  <span class="c1">// Evan
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>  <span class="c1">// 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">valueOfPerson</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">ValueOf</span><span class="p">(</span><span class="nx">Person</span><span class="p">{</span><span class="s">&#34;Evan&#34;</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="s">&#34;备注&#34;</span><span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">callObj</span>  <span class="o">:=</span> <span class="nx">valueOfPerson</span><span class="p">.</span><span class="nf">MethodByName</span><span class="p">(</span><span class="s">&#34;GetName&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">callObj</span><span class="p">.</span><span class="nf">Call</span><span class="p">([]</span><span class="nx">reflect</span><span class="p">.</span><span class="nx">Value</span><span class="p">{</span><span class="nx">reflect</span><span class="p">.</span><span class="nf">ValueOf</span><span class="p">(</span><span class="mi">1</span><span class="p">)})</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="4-获取结构体tag的值" class="heading-element">
  <a href="#4-%e8%8e%b7%e5%8f%96%e7%bb%93%e6%9e%84%e4%bd%93tag%e7%9a%84%e5%80%bc" class="heading-mark"></a>4. 获取结构体tag的值</h3><ul>
<li>
<div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;reflect&#34;</span> <span class="c1">// 这里引入reflect模块
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span>   <span class="kt">string</span> <span class="s">`json:&#34;user_name&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Passwd</span> <span class="kt">string</span> <span class="s">`json:&#34;user_password&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">user</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">User</span><span class="p">{</span><span class="s">&#34;chronos&#34;</span><span class="p">,</span> <span class="s">&#34;pass&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">TypeOf</span><span class="p">(</span><span class="nx">user</span><span class="p">).</span><span class="nf">Elem</span><span class="p">()</span> <span class="c1">//通过反射获取type定义
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">s</span><span class="p">.</span><span class="nf">NumField</span><span class="p">();</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nf">Field</span><span class="p">(</span><span class="nx">i</span><span class="p">).</span><span class="nx">Tag</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;json&#34;</span><span class="p">))</span> <span class="c1">//将tag输出出来
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="反射三定律" class="heading-element">
  <a href="#%e5%8f%8d%e5%b0%84%e4%b8%89%e5%ae%9a%e5%be%8b" class="heading-mark"></a>反射三定律</h2><h3 id="1-接口到反射类型的转换" class="heading-element">
  <a href="#1-%e6%8e%a5%e5%8f%a3%e5%88%b0%e5%8f%8d%e5%b0%84%e7%b1%bb%e5%9e%8b%e7%9a%84%e8%bd%ac%e6%8d%a2" class="heading-mark"></a>1. 接口到反射类型的转换</h3><ul>
<li>
<p>反射类型: <code>relect.Type</code> 和 <code>relect.Value</code></p>
</li>
<li>
<p>反射可以将接口类型变量转换为反射类型变量</p>
</li>
<li>
<p><code>reflect.TypeOf()</code> 函数将换入的interface{}类型的变量进行解析后返回<code>refluect.Type</code>类型</p>
</li>
<li>
<p><code>reflect.ValueOf()</code> 函数将换入的interface{}类型的变量进行解析后返回<code>reflect.Value</code>类型</p>
<div class="highlight" id="id-19"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;reflect&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Age</span>  <span class="kt">int</span> <span class="s">`json:&#34;age&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">person</span> <span class="o">:=</span> <span class="nx">Person</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">reflectType</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">TypeOf</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">reflectValue</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">ValueOf</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;person type:%T\n&#34;</span><span class="p">,</span><span class="nx">person</span><span class="p">)</span>	<span class="c1">//person type:main.Person
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;reflectType type:%T\n&#34;</span><span class="p">,</span><span class="nx">reflectType</span><span class="p">)</span>	<span class="c1">//reflectType type:*reflect.rtype
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;reflectValue type:%T\n&#34;</span><span class="p">,</span><span class="nx">reflectValue</span><span class="p">)</span>	<span class="c1">//reflectValue type:reflect.Value
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="2-反射到接口类型的转换" class="heading-element">
  <a href="#2-%e5%8f%8d%e5%b0%84%e5%88%b0%e6%8e%a5%e5%8f%a3%e7%b1%bb%e5%9e%8b%e7%9a%84%e8%bd%ac%e6%8d%a2" class="heading-mark"></a>2. 反射到接口类型的转换</h3><ul>
<li>
<p>反射可以将反射类型转换为接口类型</p>
</li>
<li>
<p><code>reflect.Value</code> 对象的 <code>interface() </code>方法, 可以将反射类型变量转换为接口变量</p>
<div class="highlight" id="id-20"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;reflect&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">num</span> <span class="p">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="nx">valueOfNum</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">ValueOf</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">valueOfNum</span><span class="p">.</span><span class="nf">Interface</span><span class="p">())</span>  <span class="c1">// 1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%T&#34;</span><span class="p">,</span><span class="nx">valueOfNum</span><span class="p">.</span><span class="nf">Interface</span><span class="p">())</span>  <span class="c1">// int
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="3-修改反射类型对象" class="heading-element">
  <a href="#3-%e4%bf%ae%e6%94%b9%e5%8f%8d%e5%b0%84%e7%b1%bb%e5%9e%8b%e5%af%b9%e8%b1%a1" class="heading-mark"></a>3. 修改反射类型对象</h3><ul>
<li>
<p>想要使用反射修改变量的值, 其值必须是可写的( CanSet ).这个值必须满足两个条件:</p>
<ol>
<li>变量可以被寻址(CanAddr)</li>
<li>变量时可以导出的(结构体字段名首字母大写)</li>
</ol>
<div class="highlight" id="id-21"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;reflect&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">age</span>  <span class="kt">int</span> <span class="s">`json:&#34;age&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">person</span> <span class="o">:=</span> <span class="nx">Person</span><span class="p">{</span><span class="s">&#34;Evan&#34;</span><span class="p">,</span><span class="mi">28</span><span class="p">,</span><span class="s">&#34;备注&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;修改前: %v&#34;</span><span class="p">,</span><span class="nx">person</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">valueOfPerson</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">ValueOf</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">person</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">res</span> <span class="o">:=</span> <span class="nx">valueOfPerson</span><span class="p">.</span><span class="nf">Elem</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">res</span><span class="p">.</span><span class="nf">Field</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nf">SetString</span><span class="p">(</span><span class="s">&#34;Jerry&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">res</span><span class="p">.</span><span class="nf">Field</span><span class="p">(</span><span class="mi">1</span><span class="p">).</span><span class="nf">SetInt</span><span class="p">(</span><span class="mi">26</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//res.Field(2).SetString(&#34;啊啊&#34;)  // panic
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;修改后: %v&#34;</span><span class="p">,</span><span class="nx">person</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="反射的性能" class="heading-element">
  <a href="#%e5%8f%8d%e5%b0%84%e7%9a%84%e6%80%a7%e8%83%bd" class="heading-mark"></a>反射的性能</h2><ul>
<li>Golang反射性能极差 , 如果需要考虑性能的地方不推荐使用</li>
</ul>
]]></description>
</item>
<item>
  <title>6-2. channel 原理和坑</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515175124/</link>
  <pubDate>Thu, 15 May 2025 17:51:24 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515175124/</guid>
  <description><![CDATA[<h2 id="1-前言" class="heading-element">
  <a href="#1-%e5%89%8d%e8%a8%80" class="heading-mark"></a>1. 前言</h2><ul>
<li>channel是Golang在语言层面提供的goroutine间的通信方式，比Unix管道更易用也更轻便。channel主要用于进程内各goroutine间通信，如果需要跨进程通信，建议使用分布式系统的方法来解决。</li>
<li>channel存在<code>3种状态</code>：
<ol>
<li><strong>nil，未初始化的状态，只进行了声明，或者手动赋值为<code>nil</code></strong></li>
<li><strong>active，正常的channel，可读或者可写</strong></li>
<li><strong>closed，已关闭，千万不要误认为关闭channel后，channel的值是nil</strong></li>
</ol>
</li>
</ul>
<h2 id="2-chan数据结构" class="heading-element">
  <a href="#2-chan%e6%95%b0%e6%8d%ae%e7%bb%93%e6%9e%84" class="heading-mark"></a>2. chan数据结构</h2><p><code>src/runtime/chan.go:hchan</code>定义了channel的数据结构：</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">hchan</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">qcount</span>   <span class="kt">uint</span>           <span class="c1">// 当前队列中剩余元素个数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">dataqsiz</span> <span class="kt">uint</span>           <span class="c1">// 环形队列长度，即可以存放的元素个数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">buf</span>      <span class="nx">unsafe</span><span class="p">.</span><span class="nx">Pointer</span> <span class="c1">// 环形队列指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">elemsize</span> <span class="kt">uint16</span>         <span class="c1">// 每个元素的大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">closed</span>   <span class="kt">uint32</span>            <span class="c1">// 标识关闭状态
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">elemtype</span> <span class="o">*</span><span class="nx">_type</span>         <span class="c1">// 元素类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">sendx</span>    <span class="kt">uint</span>           <span class="c1">// 队列下标，指示元素写入时存放到队列中的位置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">recvx</span>    <span class="kt">uint</span>           <span class="c1">// 队列下标，指示元素从队列的该位置读出
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">recvq</span>    <span class="nx">waitq</span>          <span class="c1">// 等待读消息的goroutine队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">sendq</span>    <span class="nx">waitq</span>          <span class="c1">// 等待写消息的goroutine队列
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">lock</span> <span class="nx">mutex</span>              <span class="c1">// 互斥锁，chan不允许并发读写
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>从数据结构可以看出channel由队列、类型信息、goroutine等待队列组成，下面分别说明其原理。</p>
</blockquote>
<p>​</p>
<h3 id="21-环形队列" class="heading-element">
  <a href="#21-%e7%8e%af%e5%bd%a2%e9%98%9f%e5%88%97" class="heading-mark"></a>2.1 环形队列</h3><p>chan内部实现了一个环形队列作为其缓冲区，队列的长度是创建chan时指定的。</p>
<p>下图展示了一个可缓存6个元素的channel示意图：</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/m_f48c37e012c38de53aeb532c993b6d2d_r.png" alt="null" srcset="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/m_f48c37e012c38de53aeb532c993b6d2d_r.png?size=small, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/m_f48c37e012c38de53aeb532c993b6d2d_r.png?size=medium 1.5x, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/m_f48c37e012c38de53aeb532c993b6d2d_r.png?size=large 2x" data-title="null" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></p>
<ul>
<li>dataqsiz指示了队列长度为6，即可缓存6个元素；</li>
<li>buf指向队列的内存，队列中还剩余两个元素；</li>
<li>qcount表示队列中还有两个元素；</li>
<li>sendx指示后续写入的数据存储的位置，取值[0, 6)；</li>
<li>recvx指示从该位置读取数据, 取值[0, 6)；</li>
</ul>
<h3 id="22-等待队列" class="heading-element">
  <a href="#22-%e7%ad%89%e5%be%85%e9%98%9f%e5%88%97" class="heading-mark"></a>2.2 等待队列</h3><p><strong>从channel读数据，如果channel缓冲区为空或者没有缓冲区，当前goroutine会被阻塞。</strong>
<strong>向channel写数据，如果channel缓冲区已满或者没有缓冲区，当前goroutine会被阻塞。</strong></p>
<p>被阻塞的goroutine将会挂在channel的等待队列中：</p>
<ul>
<li><strong>因读阻塞的goroutine会被向channel写入数据的goroutine唤醒；</strong></li>
<li><strong>因写阻塞的goroutine会被从channel读数据的goroutine唤醒；</strong></li>
</ul>
<p>下图展示了一个没有缓冲区的channel，有几个goroutine阻塞等待读数据：</p>
<p><img loading="lazy" src="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/m_f48c37e012c38de53aeb532c993b6d2d_r.png" alt="null" srcset="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/m_f48c37e012c38de53aeb532c993b6d2d_r.png?size=small, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/m_f48c37e012c38de53aeb532c993b6d2d_r.png?size=medium 1.5x, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/m_f48c37e012c38de53aeb532c993b6d2d_r.png?size=large 2x" data-title="null" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></p>
<p>注意，一般情况下recvq和sendq至少有一个为空。只有一个例外，那就是同一个goroutine使用select语句向channel一边写数据，一边读数据。</p>
<h3 id="23-类型信息" class="heading-element">
  <a href="#23-%e7%b1%bb%e5%9e%8b%e4%bf%a1%e6%81%af" class="heading-mark"></a>2.3 类型信息</h3><p>一个channel只能传递一种类型的值，类型信息存储在hchan数据结构中。</p>
<ul>
<li>elemtype代表类型，用于数据传递过程中的赋值；</li>
<li>elemsize代表类型大小，用于在buf中定位元素位置。</li>
</ul>
<h3 id="24-锁" class="heading-element">
  <a href="#24-%e9%94%81" class="heading-mark"></a>2.4 锁</h3><p><strong>一个channel同时仅允许被一个goroutine读写。</strong></p>
<h2 id="3-channel读写和关闭" class="heading-element">
  <a href="#3-channel%e8%af%bb%e5%86%99%e5%92%8c%e5%85%b3%e9%97%ad" class="heading-mark"></a>3. channel读写和关闭</h2><ol>
<li><strong>关闭值为nil的channel</strong>   panic</li>
<li><strong>关闭已经被关闭的channel</strong>  panic</li>
<li><strong>向已经关闭的 channel写数据</strong>  panic</li>
<li>读已经关闭的channel ,如果channel有值则读出,如果没有读出的数据是 channel中可插入类型的零值,第二个返回值一直为false.</li>
<li>如果使用select case 去hold一个已经关闭的channel, 永远都会取到一个channel中可插入类型的零值.</li>
<li>for range 如果channel有值则读出, 如果每有值读取已关闭channel 会结束遍历</li>
</ol>
<h2 id="4-select" class="heading-element">
  <a href="#4-select" class="heading-mark"></a>4. select</h2><p>使用select可以监控多channel，比如监控多个channel，当其中某一个channel有数据时，就从其读出数据。</p>
<p>一个简单的示例程序如下：</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">addNumberToChan</span><span class="p">(</span><span class="nx">chanName</span> <span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">chanName</span> <span class="o">&lt;-</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">        <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">chan1</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">chan2</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">go</span> <span class="nf">addNumberToChan</span><span class="p">(</span><span class="nx">chan1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">go</span> <span class="nf">addNumberToChan</span><span class="p">(</span><span class="nx">chan2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="nx">e</span> <span class="o">:=</span> <span class="o">&lt;-</span> <span class="nx">chan1</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Get element from chan1: %d\n&#34;</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">case</span> <span class="nx">e</span> <span class="o">:=</span> <span class="o">&lt;-</span> <span class="nx">chan2</span> <span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Get element from chan2: %d\n&#34;</span><span class="p">,</span> <span class="nx">e</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;No element in chan1 and chan2.\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nx">time</span><span class="p">.</span><span class="nf">Sleep</span><span class="p">(</span><span class="mi">1</span> <span class="o">*</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>程序中创建两个channel： chan1和chan2。函数addNumberToChan()函数会向两个channel中周期性写入数据。通过select可以监控两个channel，任意一个可读时就从其中读出数据。</p>
<p><strong>如果使用select case 去hold一个已经关闭的channel, 永远都会取到一个channel中可插入类型的零值.</strong></p>
]]></description>
</item>
<item>
  <title>6-1. 并发与通道</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515175119/</link>
  <pubDate>Thu, 15 May 2025 17:51:19 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515175119/</guid>
  <description><![CDATA[<h1 id="并发基础" class="heading-element">
  <a href="#%e5%b9%b6%e5%8f%91%e5%9f%ba%e7%a1%80" class="heading-mark"></a>并发基础</h1><h2 id="1并发并行" class="heading-element">
  <a href="#1%e5%b9%b6%e5%8f%91%e5%b9%b6%e8%a1%8c" class="heading-mark"></a>1.并发,并行</h2><p><code>并发和并行都可以处理“多任务”，二者的主要区别在于是否是“同时进行”多个的任务。</code></p>
<ul>
<li>
<p><strong>并发</strong>:交替做不同事情的能力,<strong>不同的代码块交替执行</strong></p>
</li>
<li>
<p><strong>并行</strong>:同时做不同事情的能力,<strong>不同的代码块同时执行</strong></p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">#帮助理解</span>
</span></span><span class="line"><span class="cl"><span class="n">并发</span><span class="err">：</span><span class="n">老师甲先给学生A去讲思路</span><span class="err">，</span><span class="n">A听懂了自己书写过程并且检查</span><span class="err">，</span><span class="n">而甲老师在这期间直接去给B讲思路</span><span class="err">，</span><span class="n">讲完思路再去给C讲思路</span><span class="err">，</span><span class="n">让B自己整理步骤</span><span class="err">。</span><span class="n">这样老师就没有空着</span><span class="err">，</span><span class="n">一直在做事情</span><span class="err">，</span><span class="n">很快就完成了三个任务</span><span class="err">。</span><span class="n">与顺序执行不同的是</span><span class="err">，</span><span class="n">顺序执行</span><span class="err">，</span><span class="n">老师讲完思路之后学生在写步骤</span><span class="err">，</span><span class="n">这在这期间</span><span class="err">，</span><span class="n">老师是完全空着的</span><span class="err">，</span><span class="n">没做事的</span><span class="err">，</span><span class="n">所以效率低下</span><span class="err">。</span>
</span></span><span class="line"><span class="cl"><span class="n">并行</span><span class="err">：</span><span class="n">直接让三个老师甲</span><span class="err">、</span><span class="n">乙</span><span class="err">、</span><span class="n">丙三个老师</span><span class="err">“</span><span class="n">同时</span><span class="err">”</span><span class="n">给三个学生辅导作业</span><span class="err">，</span><span class="n">也完成的很快</span><span class="err">。</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="2同步异步" class="heading-element">
  <a href="#2%e5%90%8c%e6%ad%a5%e5%bc%82%e6%ad%a5" class="heading-mark"></a>2.同步,异步</h2><p><code>同步和异步关注的是--消息通信机制--同步与异步是针对应用程序与内核的交互而言的</code></p>
<ul>
<li>同步:就是在发出一个<strong>调用</strong>时，在没有得到结果之前，该<strong>调用</strong>就不返回。但是一旦调用返回，就得到返回值了。
<ul>
<li>调用者主动等待这个调用的结果。</li>
</ul>
</li>
<li>异步:在异步过程<strong>调用</strong>发出后，调用者不会立刻得到结果。而是在<em>调用</em>发出后，<em>被调用者</em>通过状态、通知来通知调用者.
<ul>
<li>调用者不会等待这个调用的结果。</li>
</ul>
</li>
</ul>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">#针对IO操作而言</span>
</span></span><span class="line"><span class="cl"><span class="n">同步过程中进程触发IO操作</span><span class="p">,</span><span class="n">并等待或者轮询的去查看IO操作是否完成</span><span class="err">。</span>
</span></span><span class="line"><span class="cl"><span class="n">异步过程中进程触发IO操作以后</span><span class="err">，</span><span class="n">直接返回</span><span class="err">，</span><span class="n">做自己的事情</span><span class="err">，</span><span class="n">IO交给内核来处理</span><span class="err">，</span><span class="n">完成后内核通知进程IO完成</span><span class="err">。</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="3阻塞非阻塞" class="heading-element">
  <a href="#3%e9%98%bb%e5%a1%9e%e9%9d%9e%e9%98%bb%e5%a1%9e" class="heading-mark"></a>3.阻塞,非阻塞</h2><p><code>同步异步是个操作方式，阻塞非阻塞是线程的一种状态。涉及到CPU线程调度</code></p>
<ul>
<li>阻塞:调用结果返回前，线程挂起.</li>
<li>非阻塞:调用不会阻塞线程，而且立即返回.</li>
</ul>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1">#涉及到CPU线程调度</span>
</span></span><span class="line"><span class="cl"><span class="o">-</span> <span class="n">阻塞</span><span class="err">，</span><span class="n">就是调用结果返回之前</span><span class="err">，</span><span class="n">该执行线程会被挂起</span><span class="err">，</span><span class="n">不释放CPU执行权</span><span class="err">，</span><span class="n">线程不能做其它事情</span><span class="err">，</span><span class="n">只能等待</span><span class="err">，</span><span class="n">只有等到调用结果返回了</span><span class="err">，</span><span class="n">才能接着往下执行</span><span class="err">；</span>
</span></span><span class="line"><span class="cl"><span class="o">-</span> <span class="n">非阻塞</span><span class="err">，</span><span class="n">就是在没有获取调用结果时</span><span class="err">，</span><span class="n">不是一直等待</span><span class="err">，</span><span class="n">线程可以往下执行</span><span class="err">，</span><span class="n">如果是同步的</span><span class="err">，</span><span class="n">通过轮询的方式检查有没有调用结果返回</span><span class="err">，</span><span class="n">如果是异步的</span><span class="err">，</span><span class="n">会通知回调</span><span class="err">。</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="4进程线程协程" class="heading-element">
  <a href="#4%e8%bf%9b%e7%a8%8b%e7%ba%bf%e7%a8%8b%e5%8d%8f%e7%a8%8b" class="heading-mark"></a>4.<strong>进程、线程、协程</strong></h2><ul>
<li>进程，计算机中资源分配的最小单元。 高计算的时候使用多进程</li>
<li>线程，计算机中被cpu调度的最小单元。</li>
<li>协程，又称为“微线程”，与进程、线程不同，进程线程是计算机中真实存在，协程是程序员级别人为创造出来的，本质上通过一个线程实现并发的操作。 io多的时候使用线程</li>
</ul>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="n">进程</span><span class="err">，</span><span class="n">计算机中资源分配的最小单元</span><span class="err">。</span> <span class="n">高计算的时候使用多进程</span>
</span></span><span class="line"><span class="cl"><span class="n">线程</span><span class="err">，</span><span class="n">计算机中被cpu调度的最小单元</span><span class="err">。</span> 
</span></span><span class="line"><span class="cl"><span class="n">协程</span><span class="err">，</span><span class="n">又称为</span><span class="err">“</span><span class="n">微线程</span><span class="err">”，</span><span class="n">与进程</span><span class="err">、</span><span class="n">线程不同</span><span class="err">，</span><span class="n">进程线程是计算机中真实存在</span><span class="err">，</span><span class="n">协程是程序员级别人为创造出来的</span><span class="err">，</span><span class="n">本质上通过一个线程实现并发的操作</span><span class="err">。</span> <span class="n">io多的时候使用线程</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="n">一个进程中可以有多个线程</span><span class="err">、</span><span class="n">一个线程中有多个协程</span><span class="err">，</span><span class="n">他们都可以帮助我们完成并发操作</span><span class="err">，</span><span class="n">特殊协程只有遇到IO切换才有意义</span><span class="err">，</span><span class="n">否则效率反倒会降低</span><span class="err">。</span> 
</span></span><span class="line"><span class="cl"><span class="o">-----------------</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 进程(process):</span>
</span></span><span class="line"><span class="cl">	<span class="n">进程是计算机中最小的资源分配单位</span><span class="p">,</span><span class="n">创建和销毁都需要一定的开销</span><span class="p">,</span><span class="n">进程有自己的pid</span><span class="p">,</span><span class="n">进程有三个状态</span><span class="p">,</span><span class="n">分别是就绪</span><span class="p">,</span><span class="n">运行和阻塞</span><span class="p">;</span><span class="n">数据隔离</span><span class="p">,</span><span class="n">数据不安全</span><span class="p">,</span><span class="n">由操作系统进行控制</span><span class="p">,</span><span class="n">可以利用多核</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 线程(threading):</span>
</span></span><span class="line"><span class="cl">	<span class="n">线程是cpu最小的调度单位</span><span class="p">,</span><span class="n">创建和销毁也需要一定的开销</span><span class="p">,</span><span class="n">但是相对进程来说较小</span><span class="p">,</span><span class="n">也是由操作系统控制</span><span class="p">,</span><span class="n">数据共享</span><span class="p">,</span><span class="n">数据不安全</span><span class="p">,</span><span class="n">在cpython解析器下不能利用多核</span><span class="p">,</span><span class="n">因为gil锁</span><span class="err">；</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 协程:</span>
</span></span><span class="line"><span class="cl">	<span class="n">创建和销毁的开销极小</span><span class="p">,</span><span class="n">数据共享但是数据安全</span><span class="p">,</span><span class="n">不同利用多核</span><span class="p">,</span><span class="n">协程是通过代码来实现的</span>
</span></span><span class="line"><span class="cl"><span class="n">一个进程中可以有多个线程</span><span class="err">、</span><span class="n">一个线程中有多个协程</span><span class="err">，</span><span class="n">他们都可以帮助我们完成并发操作</span><span class="err">，</span><span class="n">特殊协程只有遇到IO切换才有意义</span><span class="err">，</span><span class="n">否则效率反倒会降低</span><span class="err">。</span> <span class="o">--</span><span class="n">计算密集型用多进程</span><span class="err">、</span><span class="n">IO密集型用多线程</span><span class="err">。</span> 
</span></span><span class="line"><span class="cl">    <span class="o">-------</span>
</span></span><span class="line"><span class="cl"><span class="c1">#应用场景:</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 在哪些地方用到了线程和协程</span>
</span></span><span class="line"><span class="cl"><span class="mf">1.</span><span class="n">自己用线程</span><span class="err">、</span><span class="n">协程完成爬虫任务</span>
</span></span><span class="line"><span class="cl"><span class="mf">2.</span><span class="n">但是后来有了比较丰富的爬虫框架</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 了解到 scrapy /beautyful soup/aiogttp爬虫框架 哪些用到了线程，哪些用到了协程？</span>
</span></span><span class="line"><span class="cl"><span class="mf">3.</span><span class="n">web框架中的并发是如何实现的</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 传统框架 ： django 多线程</span>
</span></span><span class="line"><span class="cl"><span class="c1"># flask 优先选用协程 其次使用线程</span>
</span></span><span class="line"><span class="cl"><span class="c1"># socketserver ：多线程</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 异步框架 ：tornado，sanic底层都是协程</span></span></span></code></pre></td></tr></table>
</div>
</div><h1 id="csp-并发模型" class="heading-element">
  <a href="#csp-%e5%b9%b6%e5%8f%91%e6%a8%a1%e5%9e%8b" class="heading-mark"></a>CSP 并发模型</h1><ul>
<li>CSP(Communication Sequential Process 通讯顺序进程 ) 模型</li>
<li>CSP 并发模型不关注发送消息的实体,而只关注发送消息时使用的通信管道; 换句话说就是:<strong>CSP模型提倡通过通信来实现内存共享, 而不是通过内存共享而实现通信</strong></li>
<li>golang并发基于CSP并发模型, channal 类型的引入就是CSP模型的体现</li>
</ul>
<h1 id="goroutine-并发" class="heading-element">
  <a href="#goroutine-%e5%b9%b6%e5%8f%91" class="heading-mark"></a>goroutine 并发</h1><ul>
<li>
<p>golang并发优势:</p>
<ul>
<li><strong>golang在代码底层实现了并发</strong>, 开发者不用再担心并发的底层逻辑和内存管理, 只需要担心业务逻辑即可</li>
<li>golang通过goroutine 实现协程并发编程, 在底层实现了内存共享, 比线程更加易用高效.</li>
</ul>
</li>
<li>
<p>每一个并发的执行单元都是一个goroutine; 通过使用go关键字实现并发; 一旦使用go关键字, 就不能使用函数的返回值来和主进程进行数据交换, 只能使用<strong>channel</strong>进行数据交换</p>
</li>
<li>
<p>当一个程序启动时, 其主函数就在一个单独的goroutine 中运行,<strong>当main函数后面没有代码逻辑时main函数就会停止, 而所有goroutine在main函数结束时会一并结束!</strong> 终止goroutine的最好方法是在goroutine内部结束goroutine</p>
</li>
</ul>
<h2 id="1-runtime包" class="heading-element">
  <a href="#1-runtime%e5%8c%85" class="heading-mark"></a>1. runtime包</h2><ul>
<li>runtime包是一个小型的任务调度器, 可以高效的将CPU资源分配给每一个任务</li>
</ul>
<h3 id="11-gosched" class="heading-element">
  <a href="#11-gosched" class="heading-mark"></a>1.1 Gosched</h3><ul>
<li>
<p>runtime.GOsched() 方法会将当前任务单元放弃处理器, 让其他Go协程运行; 等到其他goroutine结束后就会重启改任务单元;</p>
</li>
<li>
<p>一版goroutine出现以下几种情况, goroutine就会发生调度</p>
<ul>
<li>
<p>syscall</p>
</li>
<li>
<p>C函数调用(本质和sysycall类似)</p>
</li>
<li>
<p>主动调用runtime.Gosched() 方法</p>
</li>
<li>
<p>某个goroutine调用时间超过100ms, 并且这个goroutine调用了非内联函数</p>
<p><code>内联函数是指当编译器发现某段代码在调用一个内联函数时, 他不是去调用函数而是将该函数的代码整段插入到当前位置, 省去了调用过程, 加快程序运行速度.</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="22-goexit" class="heading-element">
  <a href="#22-goexit" class="heading-mark"></a>2.2 Goexit</h3><ul>
<li>runtime.Goexit() 终止调用他的携程, 但是不会影响其他协程, 并在终止之前会调用defer的函数</li>
<li>main函数调用此方法main函数结束,程序崩溃</li>
</ul>
<h3 id="33-gomaxprocs" class="heading-element">
  <a href="#33-gomaxprocs" class="heading-mark"></a>3.3 GOMAXPROCS</h3><ul>
<li>
<p><strong>runtime.GOMAXPROCS(n int)函数 可以设置程序在运行中所使用的CPU函数</strong></p>
</li>
<li>
<p>go语言程序默认会使用最大CPU数进行计算:</p>
<ul>
<li>runtime.GOMAXPROCS(n int)设置可同时执行的最大CPU个数,并返回先前的设置. 若n&lt;1, 不会改变当前设置, 本地机器的CPU个数可以通过NumCPU查询</li>
</ul>
</li>
</ul>
<h2 id="2-syncwaitgroup" class="heading-element">
  <a href="#2-syncwaitgroup" class="heading-mark"></a>2. Sync.WaitGroup</h2><ul>
<li>
<p>等待goroutine结束</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;sync&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">httpPkg</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">httpPkg</span><span class="p">)</span> <span class="nf">Get</span><span class="p">(</span><span class="nx">url</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">http</span> <span class="nx">httpPkg</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">wg</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">WaitGroup</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">urls</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;http://www.golang.org/&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;http://www.google.com/&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s">&#34;http://www.somestupidname.com/&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">url</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">urls</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// waitgroup计数.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">wg</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// Launch a goroutine to fetch the URL.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">go</span> <span class="kd">func</span><span class="p">(</span><span class="nx">url</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// 函数完事之后告诉wg结束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="k">defer</span> <span class="nx">wg</span><span class="p">.</span><span class="nf">Done</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">            <span class="c1">// Fetch the URL.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>            <span class="nx">http</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="nx">url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}(</span><span class="nx">url</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 等待所有的goroutine结束.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">wg</span><span class="p">.</span><span class="nf">Wait</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="channel-通道" class="heading-element">
  <a href="#channel-%e9%80%9a%e9%81%93" class="heading-mark"></a>channel 通道</h1><blockquote>
<p>特点: 空读写阻塞，写关闭异常，读关闭空零</p>
</blockquote>
<ul>
<li>channel是一种特殊的类型, 与map类似; channel可以使用make创建的底层数据结构的引用</li>
<li>用于多个goroutine的通信, 内部实现了同步, 保证数据安全</li>
</ul>
<h2 id="1-channel类型" class="heading-element">
  <a href="#1-channel%e7%b1%bb%e5%9e%8b" class="heading-mark"></a>1. channel类型</h2><ul>
<li>
<p>创建channal类型</p>
<ul>
<li>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">通道变量</span> <span class="kd">chan</span> <span class="nx">通道类型</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">Type</span><span class="p">)</span> <span class="c1">//等价于  make(chan Type ,0)  无缓冲阻塞通道 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="nx">Type</span><span class="p">,</span> <span class="nx">capacity</span><span class="p">)</span>   <span class="c1">// 有缓冲通道
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>channal的零值是nil</p>
</li>
<li>
<p><strong>当capacity 的值为0时,  channal 是无缓冲阻塞读写, 当capacity 的值大于0时 ,channal是有缓冲物阻塞读写</strong></p>
</li>
<li>
<p>channal使用<code>&lt;-</code>来接收和发送数据</p>
<table>
<thead>
<tr>
<th>k</th>
<th>v</th>
</tr>
</thead>
<tbody>
<tr>
<td>channal  &lt;- value</td>
<td>发送value值到channal</td>
</tr>
<tr>
<td>&lt;-channal</td>
<td>接收并将其丢弃</td>
</tr>
<tr>
<td>x:= &lt;- channal</td>
<td>从channal中接收数据赋值给x</td>
</tr>
<tr>
<td>x, ok:= &lt;- channal</td>
<td>同上,并检查通道是否关闭, 将此状态赋值给ok, 开启是true, 关闭是false</td>
</tr>
</tbody>
</table>
</li>
</ul>
</li>
<li>
<p>默认情况下, channal是阻塞的, 除非接收端和发送端同时准备好才能完成发送和接收操作</p>
</li>
</ul>
<h2 id="2-缓冲机制" class="heading-element">
  <a href="#2-%e7%bc%93%e5%86%b2%e6%9c%ba%e5%88%b6" class="heading-mark"></a>2. 缓冲机制</h2><ul>
<li>
<p>通道可以分为有缓冲通道和无缓冲通道;</p>
</li>
<li>
<p><strong>无缓冲通道</strong>在接收之前没有能力保存任何值的通道</p>
<ul>
<li>
<p>无缓冲阻塞, 要求接收方和发送发同时准备好 , 才能完成接收和发送的动作,否则会导致先接收或者发送的goroutine 阻塞等待</p>
</li>
<li>
<p>接收和发送是同步的, 谁也离不开谁</p>
</li>
<li>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">cha</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">cha</span> <span class="o">&lt;-</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="o">&lt;-</span><span class="nx">cha</span><span class="p">)</span> <span class="c1">// 阻塞
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p><strong>有缓冲通道</strong>在接收之前就能存储一个或多个值得通道</p>
<ul>
<li>有缓冲通道不会强制要求goroutine之间必须同时完成接收和发送;</li>
<li><strong>只有在通道中没有要接收的值得时候接收端才会阻塞; 只有在通道中没有可用缓冲区容纳发送的值时, 发送端就会阻塞</strong></li>
</ul>
</li>
</ul>
<h2 id="3-close和range" class="heading-element">
  <a href="#3-close%e5%92%8crange" class="heading-mark"></a>3. close和range</h2><ul>
<li>
<p>当发送者知道没有更多的数据发送时, 让接收者知道没有更多的数据可以接收,可以让接收者停止不必要的等待; 可以通过close和range实现</p>
</li>
<li>
<p><strong>close</strong>关闭通道时注意:</p>
<ul>
<li>channal不能和文件一样去经常关闭,除非你确定没有数据需要传输; 或者想显示的关闭range()之类的才回去关闭channal;</li>
<li><strong>关闭channal之后, 无法再次向channal发送数据</strong></li>
<li><strong>关闭channal之后,可以继续从channal接收数据</strong></li>
<li>对于nil的channal, 无论接收和发送都会被阻塞</li>
</ul>
</li>
<li>
<p><strong>range</strong></p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">cha</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">cha</span> <span class="o">&lt;-</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nb">close</span><span class="p">(</span><span class="nx">cha</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">data</span><span class="o">:=</span> <span class="k">range</span> <span class="nx">cha</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="4-单向channal" class="heading-element">
  <a href="#4-%e5%8d%95%e5%90%91channal" class="heading-mark"></a>4. 单向channal</h2><ul>
<li>
<p>channal默认是双向的</p>
</li>
<li>
<p>定义单向channal</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">cha1</span> <span class="kd">chan</span> <span class="kt">int</span>  <span class="c1">//双向通道
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">cha1</span> <span class="kd">chan</span><span class="o">&lt;-</span> <span class="kt">int</span>  <span class="c1">// 单向接收通道
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="o">&lt;-</span><span class="kd">chan</span> <span class="kt">int</span>  <span class="c1">// 单向发送通道
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>可以将双向channal隐式转换为单向通道, 但是不能将单向channal转为双向channal</p>
</li>
<li>
<p>单向channal的应用: <strong>定时器</strong></p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ticker</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">NewTicker</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="o">&lt;-</span> <span class="nx">ticker</span><span class="p">.</span><span class="nx">C</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;loop&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="5-select" class="heading-element">
  <a href="#5-select" class="heading-mark"></a>5. select</h2><ul>
<li>
<p>Select 关键字监听channal的数据流动,select 的用法和switch非常相似</p>
</li>
<li>
<p>select有较多的限制;其中最大的限制就是每一个case语句中都要是一个I/O操作</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">select</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="k">case</span> <span class="nx">cha</span><span class="o">&lt;-</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  	<span class="c1">// do
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">case</span> <span class="o">&lt;-</span><span class="nx">cha</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  	<span class="c1">// do
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  	<span class="c1">// do 
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>select 阻塞; 满足条件时会从满足条件中的可执行语句中随机选择一个执行,没有执行default;</p>
</li>
<li>
<p>为了避免长时间阻塞; 使用time.After()执行超时操作</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ch</span>  <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">done</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">for</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">select</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="nx">val</span><span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">ch</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">val</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">case</span> <span class="o">&lt;-</span> <span class="nx">time</span><span class="p">.</span><span class="nf">After</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nx">Second</span><span class="o">*</span><span class="mi">3</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;已超时!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">				<span class="nx">done</span> <span class="o">&lt;-</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">			<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="p">&lt;</span><span class="mi">10</span>	<span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ch</span> <span class="o">&lt;-</span><span class="nx">i</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">done</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;程序终止&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">0
</span></span></span><span class="line"><span class="cl"><span class="cm">1
</span></span></span><span class="line"><span class="cl"><span class="cm">2
</span></span></span><span class="line"><span class="cl"><span class="cm">3
</span></span></span><span class="line"><span class="cl"><span class="cm">4
</span></span></span><span class="line"><span class="cl"><span class="cm">5
</span></span></span><span class="line"><span class="cl"><span class="cm">6
</span></span></span><span class="line"><span class="cl"><span class="cm">7
</span></span></span><span class="line"><span class="cl"><span class="cm">8
</span></span></span><span class="line"><span class="cl"><span class="cm">9
</span></span></span><span class="line"><span class="cl"><span class="cm">已超时!
</span></span></span><span class="line"><span class="cl"><span class="cm">程序终止
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
]]></description>
</item>
<item>
  <title>5-1. go 操作csv</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515175114/</link>
  <pubDate>Thu, 15 May 2025 17:51:14 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515175114/</guid>
  <description><![CDATA[<h2 id="读" class="heading-element">
  <a href="#%e8%af%bb" class="heading-mark"></a>读</h2><div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//csv文件读取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">ReadCsv</span><span class="p">(</span><span class="nx">filepath</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//打开文件(只读模式)，创建io.read接口实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">opencast</span><span class="p">,</span><span class="nx">err</span><span class="o">:=</span><span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="nx">filepath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span><span class="o">!=</span><span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;csv文件打开失败！&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">opencast</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	
</span></span><span class="line"><span class="cl">	<span class="c1">//创建csv读取接口实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ReadCsv</span><span class="o">:=</span><span class="nx">csv</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">opencast</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//获取一行内容，一般为第一行内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">read</span><span class="p">,</span><span class="nx">_</span><span class="o">:=</span><span class="nx">ReadCsv</span><span class="p">.</span><span class="nf">Read</span><span class="p">()</span> <span class="c1">//返回切片类型：[chen  hai wei]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">read</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//读取所有内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">ReadAll</span><span class="p">,</span><span class="nx">err</span><span class="o">:=</span><span class="nx">ReadCsv</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">()</span><span class="c1">//返回切片类型：[[s s ds] [a a a]]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">ReadAll</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">	  说明：
</span></span></span><span class="line"><span class="cl"><span class="cm">	   1、读取csv文件返回的内容为切片类型，可以通过遍历的方式使用或Slicer[0]方式获取具体的值。
</span></span></span><span class="line"><span class="cl"><span class="cm">	   2、同一个函数或线程内，两次调用Read()方法时，第二次调用时得到的值为每二行数据，依此类推。
</span></span></span><span class="line"><span class="cl"><span class="cm">	   3、大文件时使用逐行读取，小文件直接读取所有然后遍历，两者应用场景不一样，需要注意。
</span></span></span><span class="line"><span class="cl"><span class="cm">	*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="写" class="heading-element">
  <a href="#%e5%86%99" class="heading-mark"></a>写</h2><div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//csv文件写入
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">WriterCSV</span><span class="p">(</span><span class="nx">path</span> <span class="kt">string</span><span class="p">)</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//OpenFile读取文件，不存在时则创建，使用追加模式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">File</span><span class="p">,</span><span class="nx">err</span><span class="o">:=</span><span class="nx">os</span><span class="p">.</span><span class="nf">OpenFile</span><span class="p">(</span><span class="nx">path</span><span class="p">,</span><span class="nx">os</span><span class="p">.</span><span class="nx">O_RDWR</span><span class="p">|</span><span class="nx">os</span><span class="p">.</span><span class="nx">O_APPEND</span><span class="p">|</span><span class="nx">os</span><span class="p">.</span><span class="nx">O_CREATE</span><span class="p">,</span><span class="mo">0666</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span><span class="o">!=</span><span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;文件打开失败！&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">File</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//创建写入接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">WriterCsv</span><span class="o">:=</span><span class="nx">csv</span><span class="p">.</span><span class="nf">NewWriter</span><span class="p">(</span><span class="nx">File</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">str</span><span class="o">:=</span><span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;chen1&#34;</span><span class="p">,</span><span class="s">&#34;hai1&#34;</span><span class="p">,</span><span class="s">&#34;wei1&#34;</span><span class="p">}</span> <span class="c1">//需要写入csv的数据，切片类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">	<span class="c1">//写入一条数据，传入数据为切片(追加模式)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">err1</span><span class="o">:=</span><span class="nx">WriterCsv</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err1</span><span class="o">!=</span><span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;WriterCsv写入文件失败&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">WriterCsv</span><span class="p">.</span><span class="nf">Flush</span><span class="p">()</span> <span class="c1">//刷新，不刷新是无法写入的
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;数据写入成功...&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="读数据库写入csv" class="heading-element">
  <a href="#%e8%af%bb%e6%95%b0%e6%8d%ae%e5%ba%93%e5%86%99%e5%85%a5csv" class="heading-mark"></a>读数据库写入csv</h2><div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span><span class="lnt">95
</span><span class="lnt">96
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 从Mysql中导出数据到CSV文件。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;database/sql&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;encoding/csv&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">_</span> <span class="s">&#34;github.com/go-sql-driver/mysql&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">tables</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;goods&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">count</span>  <span class="p">=</span> <span class="nb">len</span><span class="p">(</span><span class="nx">tables</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ch</span>     <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">db</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sql</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;mysql&#34;</span><span class="p">,</span> <span class="s">&#34;root:Abcd@123456@tcp(127.0.0.1:3306)/mxshop_goods_srv?charset=utf8&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">db</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">table</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tables</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nf">querySQL</span><span class="p">(</span><span class="nx">db</span><span class="p">,</span> <span class="nx">table</span><span class="p">,</span> <span class="nx">ch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">count</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="o">&lt;-</span><span class="nx">ch</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Done!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">querySQL</span><span class="p">(</span><span class="nx">db</span> <span class="o">*</span><span class="nx">sql</span><span class="p">.</span><span class="nx">DB</span><span class="p">,</span> <span class="nx">table</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">ch</span> <span class="kd">chan</span> <span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;开始处理：&#34;</span><span class="p">,</span> <span class="nx">table</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">rows</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">db</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;SELECT * from %s&#34;</span><span class="p">,</span> <span class="nx">table</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">columns</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Columns</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//values：一行的所有值，长度==列数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">values</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="nx">sql</span><span class="p">.</span><span class="nx">RawBytes</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">columns</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">scanArgs</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kd">interface</span><span class="p">{},</span> <span class="nb">len</span><span class="p">(</span><span class="nx">values</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">values</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">scanArgs</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">values</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">totalValues</span> <span class="p">[][]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">s</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl">		<span class="nx">err</span> <span class="p">=</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Scan</span><span class="p">(</span><span class="nx">scanArgs</span><span class="o">...</span><span class="p">)</span> <span class="c1">//把每行的内容添加到scanArgs，也添加到了values
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">v</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">values</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">s</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">v</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">totalValues</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">totalValues</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Err</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nf">writeToCSV</span><span class="p">(</span><span class="nx">table</span><span class="o">+</span><span class="s">&#34;.csv&#34;</span><span class="p">,</span> <span class="nx">columns</span><span class="p">,</span> <span class="nx">totalValues</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ch</span> <span class="o">&lt;-</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">writeToCSV</span><span class="p">(</span><span class="nx">file</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">columns</span> <span class="p">[]</span><span class="kt">string</span><span class="p">,</span> <span class="nx">totalValues</span> <span class="p">[][]</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// fmt.Println(columns)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">f</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">&#34;\xEF\xBB\xBF&#34;</span><span class="p">)</span> <span class="c1">//写入UTF-8 格式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">w</span> <span class="o">:=</span> <span class="nx">csv</span><span class="p">.</span><span class="nf">NewWriter</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">i</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">totalValues</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">a</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">columns</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="c1">// fmt.Println(i)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">w</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">w</span><span class="p">.</span><span class="nf">Flush</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;处理完毕：&#34;</span><span class="p">,</span> <span class="nx">file</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
  <title>5-0. 文件操作</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515175110/</link>
  <pubDate>Thu, 15 May 2025 17:51:10 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515175110/</guid>
  <description><![CDATA[<ul>
<li>文件操作设计的I/O操作库
<ul>
<li>io &ndash; 提供基本的接口</li>
<li>io/ioutil &ndash; 封装了一些常用的接口</li>
<li>fmt &ndash; 实现格式化IO. 类似c语言中的printf和scanf</li>
<li>bufio &ndash; 实现缓存I/O</li>
</ul>
</li>
</ul>
<h1 id="ioioutil" class="heading-element">
  <a href="#ioioutil" class="heading-mark"></a>io/ioutil</h1><ul>
<li>
<p>读取文件目录 <code>ReadDir()</code>, 返回一个列表<code>[]os.FileInfo</code>, 列表中包含指定目录的目录信息</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">FileInfo</span> <span class="kd">interface</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nf">Name</span><span class="p">()</span> <span class="kt">string</span> <span class="c1">// 文件名称
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">Size</span><span class="p">()</span> <span class="kt">int64</span>  <span class="c1">// 文件大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">Mode</span><span class="p">()</span> <span class="nx">FileMode</span>  <span class="c1">//打开模式
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">ModTime</span><span class="p">()</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>  <span class="c1">//文件修改时间
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">IsDIr</span><span class="p">()</span> <span class="kt">bool</span>   <span class="c1">// 是否是目录
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="nf">Sys</span><span class="p">()</span>  <span class="kd">interface</span><span class="p">{}</span>  <span class="c1">// 基础数据源
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>demo : 查看文件夹中所有文件, 并输出文件名</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;io/ioutil&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">getFileName</span><span class="p">(</span><span class="nx">filePath</span> <span class="kt">string</span><span class="p">)</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dir</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadDir</span><span class="p">(</span><span class="nx">filePath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span><span class="nx">file</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">dir</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fileName</span> <span class="o">:=</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Name</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">fileName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">filePath</span> <span class="o">:=</span> <span class="s">&#34;../../&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nf">getFileName</span><span class="p">(</span><span class="nx">filePath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
<h1 id="pathfilepath" class="heading-element">
  <a href="#pathfilepath" class="heading-mark"></a>path/filepath</h1><ul>
<li>
<p>Walk() 获取目录下所有文件和文件夹</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;io/fs&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;path/filepath&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//walk() 获取指定目录下的所有文件和文件夹
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">WalkDir</span><span class="p">(</span><span class="nx">dirPath</span> <span class="kt">string</span><span class="p">)</span>   <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">filepath</span><span class="p">.</span><span class="nf">Walk</span><span class="p">(</span><span class="nx">dirPath</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">path</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">info</span> <span class="nx">fs</span><span class="p">.</span><span class="nx">FileInfo</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="kt">error</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">info</span> <span class="o">==</span><span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="nx">err</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">info</span><span class="p">.</span><span class="nf">IsDir</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">			<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl">	<span class="p">})</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;filepath.Walk() returned %v\n&#34;</span><span class="p">,</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">WalkDir</span><span class="p">(</span><span class="s">&#34;./&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="os" class="heading-element">
  <a href="#os" class="heading-mark"></a>OS</h1><ul>
<li>os.Makedir创建文件夹,需要指定权限
<ul>
<li>创建文件夹没有权限会报错</li>
</ul>
</li>
<li>os.MkdirAll创建文件夹 , 需要制定权限
<ul>
<li>创建文件夹, 不存在就创建, 存在返回nil</li>
</ul>
</li>
<li>os.Remove() 删除指定文件夹, 非空不能删除</li>
<li>os.RemoveAll() 删除指定文件夹, 非空也删除</li>
<li>os.OpenFile() <strong>创建/读取文件</strong></li>
<li>os.Open() 读文件</li>
<li>os.ModePerm  返回值:  <code>-rwxrwxrwx</code>,类似0777</li>
</ul>
<blockquote>
<h6 id="osopen-与读的方式" class="heading-element">
  <a href="#osopen-%e4%b8%8e%e8%af%bb%e7%9a%84%e6%96%b9%e5%bc%8f" class="heading-mark"></a>0.0.0.0.1 os.Open 与读的方式</h6><p>f ,e := os.OpenFile(&ldquo;data.csv&rdquo;)</p>
<h6 id="osopenfile-读写方式" class="heading-element">
  <a href="#osopenfile-%e8%af%bb%e5%86%99%e6%96%b9%e5%bc%8f" class="heading-mark"></a>0.0.0.0.2 os.OpenFile 读写方式</h6><p>f ,e := os.OpenFile(&ldquo;data.csv&rdquo;, os.O_CREATE|os.O_RDWR, 0644)</p>
</blockquote>
<h3 id="fileinfo" class="heading-element">
  <a href="#fileinfo" class="heading-mark"></a>0.1 FileInfo</h3><p><strong>FileInfo</strong> 接口中定义了 File 信息相关的方法。</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">FileInfo</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">Name</span><span class="p">()</span> <span class="kt">string</span>       <span class="c1">// base name of the file 文件名.扩展名 aa.txt
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">Size</span><span class="p">()</span> <span class="kt">int64</span>        <span class="c1">// 文件大小，字节数 12540
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">Mode</span><span class="p">()</span> <span class="nx">FileMode</span>     <span class="c1">// 文件权限 -rw-rw-rw-
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">ModTime</span><span class="p">()</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="c1">// 修改时间 2020-09-23 16:30:53 +0800 CST
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">IsDir</span><span class="p">()</span> <span class="kt">bool</span>        <span class="c1">// 是否文件夹
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nf">Sys</span><span class="p">()</span> <span class="kd">interface</span><span class="p">{}</span>   <span class="c1">// 基础数据源接口(can return nil)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="权限" class="heading-element">
  <a href="#%e6%9d%83%e9%99%90" class="heading-mark"></a>0.2 权限</h3><p>至于操作权限 perm，除非创建文件时才需要指定，不需要创建新文件时可以将其设定为０。虽然 Golang 语言给 perm 权限设定了很多的常量，但是习惯上也可以直接使用数字，如 0666 (具体含义和 Unix 系统的一致)。
权限控制：</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">linux</span> <span class="nx">下有2种文件权限表示方式</span><span class="err">，</span><span class="nx">即</span><span class="err">“</span><span class="nx">符号表示</span><span class="err">”</span><span class="nx">和</span><span class="err">“</span><span class="nx">八进制表示</span><span class="err">”。</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">（</span><span class="mi">1</span><span class="err">）</span><span class="nx">符号表示方式</span><span class="p">:</span>
</span></span><span class="line"><span class="cl"><span class="o">-</span>      <span class="o">---</span>         <span class="o">---</span>        <span class="o">---</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span>   <span class="nx">owner</span>       <span class="nx">group</span>      <span class="nx">others</span>
</span></span><span class="line"><span class="cl"><span class="nx">文件的权限是这样子分配的</span> <span class="nx">读</span> <span class="nx">写</span> <span class="nx">可执行</span> <span class="nx">分别对应的是</span> <span class="nx">r</span> <span class="nx">w</span> <span class="nx">x</span> <span class="nx">如果没有那一个权限</span><span class="err">，</span><span class="nx">用</span> <span class="o">-</span> <span class="nx">代替</span>
</span></span><span class="line"><span class="cl"><span class="p">(</span><span class="o">-</span><span class="nx">文件</span> <span class="nx">d目录</span> <span class="p">|</span><span class="nx">连接符号</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">例如</span><span class="err">：</span><span class="o">-</span><span class="nx">rwxr</span><span class="o">-</span><span class="nx">xr</span><span class="o">-</span><span class="nx">x</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="err">（</span><span class="mi">2</span><span class="err">）</span><span class="nx">八进制表示方式</span><span class="err">：</span> 
</span></span><span class="line"><span class="cl"><span class="nx">r</span> <span class="err">——</span><span class="p">&gt;</span> <span class="mo">004</span>
</span></span><span class="line"><span class="cl"><span class="nx">w</span> <span class="err">——</span><span class="p">&gt;</span> <span class="mo">002</span>
</span></span><span class="line"><span class="cl"><span class="nx">x</span> <span class="err">——</span><span class="p">&gt;</span> <span class="mo">001</span>
</span></span><span class="line"><span class="cl"><span class="o">-</span> <span class="err">——</span><span class="p">&gt;</span> <span class="mo">000</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="mo">0755</span>
</span></span><span class="line"><span class="cl"><span class="mo">0777</span>
</span></span><span class="line"><span class="cl"><span class="mo">0555</span>
</span></span><span class="line"><span class="cl"><span class="mo">0444</span>
</span></span><span class="line"><span class="cl"><span class="mo">0666</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="创建文件夹" class="heading-element">
  <a href="#%e5%88%9b%e5%bb%ba%e6%96%87%e4%bb%b6%e5%a4%b9" class="heading-mark"></a>0.3 创建文件夹</h3><ul>
<li>os.MkDir(&ldquo;dirName&rdquo;,os.ModePerm )，创建一层</li>
<li>os.MkDirAll(&ldquo;dirName&rdquo;,os.ModePerm )，可以创建多层</li>
</ul>
<h3 id="创建文件" class="heading-element">
  <a href="#%e5%88%9b%e5%bb%ba%e6%96%87%e4%bb%b6" class="heading-mark"></a>0.4 创建文件</h3><ul>
<li>os.Create()，创建文件
<ul>
<li>采用模式0666（任何人都可读写，不可执行）创建一个名为name的文件，如果文件已存在会替换它（为空文件）</li>
</ul>
</li>
</ul>
<h3 id="打开关闭文件" class="heading-element">
  <a href="#%e6%89%93%e5%bc%80%e5%85%b3%e9%97%ad%e6%96%87%e4%bb%b6" class="heading-mark"></a>0.5 打开/关闭文件</h3><ul>
<li>
<p>os.Open(fileName) 只读</p>
</li>
<li>
<p>os.OpenFile(filename,mode,perm)   &ndash;文件名称|文件的打开方式|文件的权限</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">file4</span><span class="p">,</span><span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">OpenFile</span><span class="p">(</span><span class="nx">fileName1</span><span class="p">,</span><span class="nx">os</span><span class="p">.</span><span class="nx">O_RDONLY</span><span class="p">|</span><span class="nx">os</span><span class="p">.</span><span class="nx">O_WRONLY</span><span class="p">,</span><span class="nx">os</span><span class="p">.</span><span class="nx">ModePerm</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>
<p>第一个参数：文件名称</p>
</li>
<li>
<p>第二个参数：文件的打开方式</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>os.O_WRONLY</td>
<td>只写</td>
</tr>
<tr>
<td>os.O_CREATE</td>
<td>创建文件</td>
</tr>
<tr>
<td>os.O_RDONLY</td>
<td>只读</td>
</tr>
<tr>
<td>os.O_RDWR</td>
<td>读写</td>
</tr>
<tr>
<td>os.O_TRUNC</td>
<td>清空</td>
</tr>
<tr>
<td>os.O_APPEND</td>
<td>追加</td>
</tr>
</tbody>
</table>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>    
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Exactly one of O_RDONLY, O_WRONLY, or O_RDWR must be specified.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">O_RDONLY</span> <span class="kt">int</span> <span class="p">=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">O_RDONLY</span> <span class="c1">// open the file read-only.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">O_WRONLY</span> <span class="kt">int</span> <span class="p">=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">O_WRONLY</span> <span class="c1">// open the file write-only.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">O_RDWR</span>   <span class="kt">int</span> <span class="p">=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">O_RDWR</span>   <span class="c1">// open the file read-write.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="c1">// The remaining values may be or&#39;ed in to control behavior.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">O_APPEND</span> <span class="kt">int</span> <span class="p">=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">O_APPEND</span> <span class="c1">// append data to the file when writing.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">O_CREATE</span> <span class="kt">int</span> <span class="p">=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">O_CREAT</span>  <span class="c1">// create a new file if none exists.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">O_EXCL</span>   <span class="kt">int</span> <span class="p">=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">O_EXCL</span>   <span class="c1">// used with O_CREATE, file must not exist.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">O_SYNC</span>   <span class="kt">int</span> <span class="p">=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">O_SYNC</span>   <span class="c1">// open for synchronous I/O.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">O_TRUNC</span>  <span class="kt">int</span> <span class="p">=</span> <span class="nx">syscall</span><span class="p">.</span><span class="nx">O_TRUNC</span>  <span class="c1">// truncate regular writable file when opened.
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="p">)</span> 
</span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>第三个参数：文件的权限：文件不存在创建文件，需要指定权限</p>
</li>
</ol>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// &#34;fmt&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;word.txt&#34;</span><span class="p">)</span> <span class="c1">// 读取文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;error:&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fileinfo</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Stat</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fileSize</span> <span class="o">:=</span> <span class="nx">fileinfo</span><span class="p">.</span><span class="nf">Size</span><span class="p">()</span>   <span class="c1">// 文件大小
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">buffer</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="nx">fileSize</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bytesread</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">file</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buffer</span><span class="p">)</span>  <span class="c1">//获取文件内容
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;err::&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;bytes read: &#34;</span><span class="p">,</span> <span class="nx">bytesread</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;bytestream to string: &#34;</span><span class="p">,</span> <span class="nb">string</span><span class="p">(</span><span class="nx">buffer</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>file.Close() 关闭文件</p>
</li>
</ul>
<h3 id="创建删除文件目录" class="heading-element">
  <a href="#%e5%88%9b%e5%bb%ba%e5%88%a0%e9%99%a4%e6%96%87%e4%bb%b6%e7%9b%ae%e5%bd%95" class="heading-mark"></a>0.6 创建/删除文件/目录</h3><ul>
<li>os.Create()，创建文件
<ul>
<li>采用模式0666（任何人都可读写，不可执行）创建一个名为name的文件，如果文件已存在会替换它（为空文件）</li>
</ul>
</li>
<li>删除文件 os.Remove()</li>
<li>删除文件夹 os.RemoveAll()</li>
</ul>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//删除文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">err</span> <span class="o">:=</span>  <span class="nx">os</span><span class="p">.</span><span class="nf">Remove</span><span class="p">(</span><span class="s">&#34;/Users/ruby/Documents/pro/a/aa.txt&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;err:&#34;</span><span class="p">,</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;删除文件成功。。&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">//删除目录
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">err</span> <span class="o">:=</span>  <span class="nx">os</span><span class="p">.</span><span class="nf">RemoveAll</span><span class="p">(</span><span class="s">&#34;/Users/ruby/Documents/pro/a/cc&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;err:&#34;</span><span class="p">,</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;删除目录成功。。&#34;</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="判断文件是否存在" class="heading-element">
  <a href="#%e5%88%a4%e6%96%ad%e6%96%87%e4%bb%b6%e6%98%af%e5%90%a6%e5%ad%98%e5%9c%a8" class="heading-mark"></a>0.7 判断文件是否存在</h3><p>Golang 判断文件或文件夹是否存在的方法为使用 os.Stat() 函数返回的错误值进行判断。</p>
<ol>
<li>如果返回的错误为 nil，说明文件或文件夹存在</li>
<li>如果返回的错误类型使用 <strong>os.IsNotExist()</strong> 判断为 true，说明文件或文件夹不存在</li>
</ol>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;log&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fileInfo</span><span class="p">,</span><span class="nx">err</span><span class="o">:=</span><span class="nx">os</span><span class="p">.</span><span class="nf">Stat</span><span class="p">(</span><span class="s">&#34;/Users/ruby/Documents/pro/a/aa.txt&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span><span class="o">!=</span><span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">os</span><span class="p">.</span><span class="nf">IsNotExist</span><span class="p">(</span><span class="nx">err</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">            <span class="nx">log</span><span class="p">.</span><span class="nf">Fatalln</span><span class="p">(</span><span class="s">&#34;file does not exist&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;file does exist. file information:&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">fileInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="读取文件内容" class="heading-element">
  <a href="#%e8%af%bb%e5%8f%96%e6%96%87%e4%bb%b6%e5%86%85%e5%ae%b9" class="heading-mark"></a>0.8 <strong>读取文件内容</strong></h3><ul>
<li>读文件方式一：利用<strong>ioutil.ReadFile</strong>直接从文件读取到[]byte中</li>
</ul>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Read0</span><span class="p">()</span>  <span class="p">(</span><span class="kt">string</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadFile</span><span class="p">(</span><span class="s">&#34;file/test&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;read fail&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>读文件方式二：先从文件读取到file中，在从file读取到buf, buf在追加到最终的[]byte</li>
</ul>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Read1</span><span class="p">()</span>  <span class="p">(</span><span class="kt">string</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//获得一个file
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;file/test&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;read fail&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//把file读取到缓冲区中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">chunk</span> <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">    <span class="nx">buf</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//从file读取到buf中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">n</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;read buf fail&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//说明读取结束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="nx">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//读取到最终的缓冲区中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">chunk</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">chunk</span><span class="p">,</span> <span class="nx">buf</span><span class="p">[:</span><span class="nx">n</span><span class="p">]</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">chunk</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//fmt.Println(string(chunk))
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>读文件方式三：先从文件读取到file, 在从file读取到Reader中，从Reader读取到buf, buf最终追加到[]byte</li>
</ul>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//先从文件读取到file, 在从file读取到Reader中，从Reader读取到buf, buf最终追加到[]byte，这个排第三
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">Read2</span><span class="p">()</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fi</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;file/test&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">defer</span> <span class="nx">fi</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">r</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">fi</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">chunks</span> <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">buf</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">n</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="mi">0</span> <span class="o">==</span> <span class="nx">n</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//fmt.Println(string(buf))
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">chunks</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">chunks</span><span class="p">,</span> <span class="nx">buf</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">chunks</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//fmt.Println(string(chunks))
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>读文件方式四：读取到file中，再利用ioutil将file直接读取到[]byte中</li>
</ul>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//读取到file中，再利用ioutil将file直接读取到[]byte中, 这是最优
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">Read3</span><span class="p">()</span>  <span class="p">(</span><span class="kt">string</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;file/test&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;read file fail&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">fd</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;read to fd fail&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">fd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>四种方式读的速度排名是：前者为优
方式四 &gt; 方式一 &gt; 方式三 &gt; 方式二</p>
<h3 id="写文件内容" class="heading-element">
  <a href="#%e5%86%99%e6%96%87%e4%bb%b6%e5%86%85%e5%ae%b9" class="heading-mark"></a>0.9 <strong>写文件</strong>内容</h3><ul>
<li>写文件方式一：使用 <strong>io.WriteString</strong> 写入文件</li>
</ul>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Write0</span><span class="p">()</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fileName</span> <span class="o">:=</span> <span class="s">&#34;file/test1&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">strTest</span> <span class="o">:=</span> <span class="s">&#34;测试测试&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">f</span> <span class="o">*</span><span class="nx">os</span><span class="p">.</span><span class="nx">File</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nf">CheckFileExist</span><span class="p">(</span><span class="nx">fileName</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">//文件存在
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">OpenFile</span><span class="p">(</span><span class="nx">fileName</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">O_APPEND</span><span class="p">,</span> <span class="mo">0666</span><span class="p">)</span> <span class="c1">//打开文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;file open fail&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span> <span class="p">{</span>  <span class="c1">//文件不存在
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">fileName</span><span class="p">)</span> <span class="c1">//创建文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;file create fail&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//将文件写进去
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">n</span><span class="p">,</span> <span class="nx">err1</span> <span class="o">:=</span> <span class="nx">io</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">strTest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err1</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;write error&#34;</span><span class="p">,</span> <span class="nx">err1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;写入的字节数是：&#34;</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>写文件方式二：使用 ioutil.WriteFile 写入文件</li>
</ul>
<div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Write1</span><span class="p">()</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fileName</span> <span class="o">:=</span> <span class="s">&#34;file/test2&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">strTest</span> <span class="o">:=</span> <span class="s">&#34;测试测试&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">d</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">strTest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">WriteFile</span><span class="p">(</span><span class="nx">fileName</span><span class="p">,</span> <span class="nx">d</span><span class="p">,</span> <span class="mo">0666</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;write fail&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;write success&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>写文件方式三：使用 File(Write,WriteString) 写入文件</li>
</ul>
<div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Write2</span><span class="p">()</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">fileName</span> <span class="o">:=</span> <span class="s">&#34;file/test3&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">strTest</span> <span class="o">:=</span> <span class="s">&#34;测试测试&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">d1</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">strTest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">f</span><span class="p">,</span> <span class="nx">err3</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">fileName</span><span class="p">)</span> <span class="c1">//创建文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="nx">err3</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;create file fail&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">n2</span><span class="p">,</span> <span class="nx">err3</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">d1</span><span class="p">)</span> <span class="c1">//写入文件(字节数组)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;写入 %d 个字节n&#34;</span><span class="p">,</span> <span class="nx">n2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">n3</span><span class="p">,</span> <span class="nx">err3</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">&#34;writesn&#34;</span><span class="p">)</span> <span class="c1">//写入文件(字节数组)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;写入 %d 个字节n&#34;</span><span class="p">,</span> <span class="nx">n3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">f</span><span class="p">.</span><span class="nf">Sync</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 或者
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">WriteFile</span><span class="p">(</span><span class="nx">fPath</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//f, _ := os.OpenFile(fPath,os.O_APPEND,0666)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">OpenFile</span><span class="p">(</span><span class="nx">fPath</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">O_CREATE</span><span class="p">|</span><span class="nx">os</span><span class="p">.</span><span class="nx">O_WRONLY</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">ModeAppend</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">writeString</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">&#34;你好&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">writeString</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">writeString</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>写文件方式四：使用 bufio.NewWriter 写入文件</li>
</ul>
<div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Write3</span><span class="p">()</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fileName</span> <span class="o">:=</span> <span class="s">&#34;file/test3&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">f</span><span class="p">,</span> <span class="nx">err3</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">fileName</span><span class="p">)</span> <span class="c1">//创建文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="nx">err3</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;create file fail&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">w</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewWriter</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span> <span class="c1">//创建新的 Writer 对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">n4</span><span class="p">,</span> <span class="nx">err3</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">&#34;bufferedn&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;写入 %d 个字节n&#34;</span><span class="p">,</span> <span class="nx">n4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">w</span><span class="p">.</span><span class="nf">Flush</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h1 id="json文件操作" class="heading-element">
  <a href="#json%e6%96%87%e4%bb%b6%e6%93%8d%e4%bd%9c" class="heading-mark"></a>JSON文件操作</h1><h3 id="编码json" class="heading-element">
  <a href="#%e7%bc%96%e7%a0%81json" class="heading-mark"></a>0.10 编码JSON</h3><ul>
<li>
<p>编码json: 从其他类型编码成json字符串</p>
</li>
<li>
<p>encoding/json</p>
<ul>
<li><strong>Marshal</strong> 返回interface{}类型 的json编码, 通常interface{}类型会使用map或者结构体</li>
<li><strong>MarshalIndent</strong>  类似于Marshal, 会使用缩进输出格式化json</li>
</ul>
</li>
<li>
<p>使用map创建json</p>
<div class="highlight" id="id-19"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;encoding/json&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">map创建json
</span></span></span><span class="line"><span class="cl"><span class="cm"> */</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">m</span><span class="o">:=</span><span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{},</span><span class="mi">3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">m</span><span class="p">[</span><span class="s">&#34;name&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;evan&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">m</span><span class="p">[</span><span class="s">&#34;age&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="mi">27</span>
</span></span><span class="line"><span class="cl">	<span class="nx">m</span><span class="p">[</span><span class="s">&#34;language&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;python&#34;</span><span class="p">,</span><span class="s">&#34;golang&#34;</span><span class="p">,</span><span class="s">&#34;javascript&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">result</span><span class="p">,</span><span class="nx">_</span><span class="o">:=</span><span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">resultMarshalIndent</span><span class="p">,</span><span class="nx">_</span><span class="o">:=</span><span class="nx">json</span><span class="p">.</span><span class="nf">MarshalIndent</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="s">&#34;&#34;</span><span class="p">,</span><span class="s">&#34;    &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">resultMarshalIndent</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">{&#34;age&#34;:27,&#34;language&#34;:[&#34;python&#34;,&#34;golang&#34;,&#34;javascript&#34;],&#34;name&#34;:&#34;evan&#34;}
</span></span></span><span class="line"><span class="cl"><span class="cm">{
</span></span></span><span class="line"><span class="cl"><span class="cm">    &#34;age&#34;: 27,
</span></span></span><span class="line"><span class="cl"><span class="cm">    &#34;language&#34;: [
</span></span></span><span class="line"><span class="cl"><span class="cm">        &#34;python&#34;,
</span></span></span><span class="line"><span class="cl"><span class="cm">        &#34;golang&#34;,
</span></span></span><span class="line"><span class="cl"><span class="cm">        &#34;javascript&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm">    ],
</span></span></span><span class="line"><span class="cl"><span class="cm">    &#34;name&#34;: &#34;evan&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm">}
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>使用结构体创建json(常用)</p>
<ul>
<li>当在定义struct 的时, 可以在后面添加标签来控制编码和解码的过程; 是否要编码或者解码某个字段, JSON中的名字字段名称是什么, 可以选择的控制字段有三种
<ol>
<li>&ldquo;-&rdquo; :表示不要解析该字段</li>
<li>&ldquo;omitempty&rdquo; : 当字段为空的时候不要解析该字段, 比如: false 0 nil 长度为0的array map slice string</li>
<li>&ldquo;FieldName&rdquo; : 当解析JSON的时候使用这个名字</li>
</ol>
</li>
</ul>
<div class="highlight" id="id-20"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;encoding/json&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span>     <span class="kt">string</span> <span class="s">`json:&#34;name&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Age</span>      <span class="kt">int</span>    <span class="s">`json:&#34;age&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Sex</span>      <span class="kt">bool</span>   <span class="s">`json:&#34;sex&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Birthday</span> <span class="kt">string</span> <span class="s">`json:&#34;birthday&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Company</span>  <span class="kt">string</span> <span class="s">`json:&#34;company,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Language</span> <span class="p">[]</span><span class="kt">string</span> <span class="s">`json:&#34;language&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">person</span> <span class="o">:=</span><span class="nx">Person</span><span class="p">{</span><span class="s">&#34;Evan&#34;</span><span class="p">,</span><span class="mi">28</span><span class="p">,</span><span class="kc">true</span><span class="p">,</span><span class="s">&#34;1994&#34;</span><span class="p">,</span><span class="s">&#34;DCITS&#34;</span><span class="p">,[]</span><span class="kt">string</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;python&#34;</span><span class="p">,</span><span class="s">&#34;golang&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//result,err :=json.Marshal(person)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">result</span><span class="p">,</span><span class="nx">err</span> <span class="o">:=</span><span class="nx">json</span><span class="p">.</span><span class="nf">MarshalIndent</span><span class="p">(</span><span class="nx">person</span><span class="p">,</span><span class="s">&#34;&#34;</span><span class="p">,</span><span class="s">&#34;    &#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span><span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">result</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">{
</span></span></span><span class="line"><span class="cl"><span class="cm">    &#34;name&#34;: &#34;Evan&#34;,
</span></span></span><span class="line"><span class="cl"><span class="cm">    &#34;age&#34;: 28,
</span></span></span><span class="line"><span class="cl"><span class="cm">    &#34;sex&#34;: true,
</span></span></span><span class="line"><span class="cl"><span class="cm">    &#34;birthday&#34;: &#34;1994&#34;,
</span></span></span><span class="line"><span class="cl"><span class="cm">    &#34;company&#34;: &#34;DCITS&#34;,
</span></span></span><span class="line"><span class="cl"><span class="cm">    &#34;language&#34;: [
</span></span></span><span class="line"><span class="cl"><span class="cm">        &#34;python&#34;,
</span></span></span><span class="line"><span class="cl"><span class="cm">        &#34;golang&#34;
</span></span></span><span class="line"><span class="cl"><span class="cm">    ]
</span></span></span><span class="line"><span class="cl"><span class="cm">}
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="解析json" class="heading-element">
  <a href="#%e8%a7%a3%e6%9e%90json" class="heading-mark"></a>0.11 解析JSON</h3><ul>
<li>
<p>Unmarshal() 解析json,是Marshal()的反向操作</p>
</li>
<li>
<p>要将json数据解码写入一个接口类型值, 函数会将解码数据为如下对照关系写入接口</p>
<table>
<thead>
<tr>
<th>interface类型</th>
<th>json类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>Bool</td>
<td>布尔类型</td>
</tr>
<tr>
<td>Float64</td>
<td>数字类型</td>
</tr>
<tr>
<td>string</td>
<td>字符串类型</td>
</tr>
<tr>
<td>[]interface{}</td>
<td>数组</td>
</tr>
<tr>
<td>map</td>
<td>对象</td>
</tr>
<tr>
<td>nil</td>
<td>null</td>
</tr>
</tbody>
</table>
<ul>
<li>如果json的值不满足或者不匹配给出的目标类型, 或者JSON数字写入目标类型时溢出, unmarsha()函数会跳过该字段, 尽可能满足其余的解码操作</li>
</ul>
</li>
<li>
<p>struce 解码json(推荐使用)</p>
<div class="highlight" id="id-21"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;encoding/json&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span>     <span class="kt">string</span>   <span class="s">`json:&#34;name&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Age</span>      <span class="kt">int</span>      <span class="s">`json:&#34;age&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Sex</span>      <span class="kt">bool</span>     <span class="s">`json:&#34;sex&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Birthday</span> <span class="kt">string</span>   <span class="s">`json:&#34;birthday&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Company</span>  <span class="kt">string</span>   <span class="s">`json:&#34;company,omitempty&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Language</span> <span class="p">[]</span><span class="kt">string</span> <span class="s">`json:&#34;language&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">jsonStr</span> <span class="o">:=</span> <span class="s">`
</span></span></span><span class="line"><span class="cl"><span class="s">		{   &#34;name&#34;:&#34;evan&#34;,	
</span></span></span><span class="line"><span class="cl"><span class="s">			&#34;age&#34;:28,
</span></span></span><span class="line"><span class="cl"><span class="s">			&#34;sex&#34;:true,
</span></span></span><span class="line"><span class="cl"><span class="s">			&#34;birthday&#34;:&#34;1994&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s">			&#34;company&#34;:&#34;DCITS&#34;,
</span></span></span><span class="line"><span class="cl"><span class="s">			&#34;language&#34;:[&#34;python&#34;,&#34;golang&#34;,&#34;javascript&#34;]
</span></span></span><span class="line"><span class="cl"><span class="s">		}
</span></span></span><span class="line"><span class="cl"><span class="s">		`</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">person</span> <span class="nx">Person</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">err</span><span class="o">:=</span><span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">jsonStr</span><span class="p">),</span><span class="o">&amp;</span><span class="nx">person</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span><span class="o">!=</span><span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// {evan 28 true 1994 DCITS [python golang javascript]}
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="拓展-fastjson" class="heading-element">
  <a href="#%e6%8b%93%e5%b1%95-fastjson" class="heading-mark"></a>0.12 拓展 fastjson</h3><ul>
<li>速度是原生json操作速度的10倍</li>
<li>地址: <a href="https://github.com/valyala/fastjson"target="_blank" rel="external nofollow noopener noreferrer">https://github.com/valyala/fastjson<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></li>
</ul>
<h1 id="xml文件操作" class="heading-element">
  <a href="#xml%e6%96%87%e4%bb%b6%e6%93%8d%e4%bd%9c" class="heading-mark"></a>XML文件操作</h1><ul>
<li>
<p>XML是一门标记语言</p>
</li>
<li>
<p>XML对大小写敏感</p>
<ul>
<li>
<p>Xml 文件</p>
<div class="highlight" id="id-22"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-xml" data-lang="xml"><span class="line"><span class="cl"><span class="cp">&lt;?xml version=&#34;1.0&#34; encoding=&#34;utf-8&#34; ?&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;Wrapper&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Note&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;To&gt;</span>George<span class="nt">&lt;/To&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;From&gt;</span>John<span class="nt">&lt;/From&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;Body&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;Bodychild&gt;</span>bc1<span class="nt">&lt;/Bodychild&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;Bodychild&gt;</span>bc2<span class="nt">&lt;/Bodychild&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/Body&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/Note&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;Note&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;To&gt;</span>George2<span class="nt">&lt;/To&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;From&gt;</span>John2<span class="nt">&lt;/From&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;Body&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;Bodychild&gt;</span>bc1<span class="nt">&lt;/Bodychild&gt;</span>
</span></span><span class="line"><span class="cl">            <span class="nt">&lt;Bodychild&gt;</span>bc2<span class="nt">&lt;/Bodychild&gt;</span>
</span></span><span class="line"><span class="cl">        <span class="nt">&lt;/Body&gt;</span>
</span></span><span class="line"><span class="cl">    <span class="nt">&lt;/Note&gt;</span>
</span></span><span class="line"><span class="cl"><span class="nt">&lt;/Wrapper&gt;</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>golang code</p>
<div class="highlight" id="id-23"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;encoding/xml&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;io/ioutil&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Wrapper</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Note</span> <span class="p">[]</span><span class="nx">Note</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Note</span> <span class="kd">struct</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">To</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">From</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Body</span> <span class="nx">Body</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Body</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Bodychild</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">res</span> <span class="nx">Wrapper</span>
</span></span><span class="line"><span class="cl">	<span class="nx">content</span><span class="p">,</span><span class="nx">err</span><span class="o">:=</span><span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadFile</span><span class="p">(</span><span class="s">&#34;test.xml&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span><span class="o">!=</span><span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">xml</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">(</span><span class="nx">content</span><span class="p">,</span><span class="o">&amp;</span><span class="nx">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span><span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;解析后的xml文件为:&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
</ul>
<h1 id="按行读文件" class="heading-element">
  <a href="#%e6%8c%89%e8%a1%8c%e8%af%bb%e6%96%87%e4%bb%b6" class="heading-mark"></a>按行读文件</h1><ul>
<li>
<p>方法一</p>
<div class="highlight" id="id-24"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;bufio&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;io&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;os&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="nx">FilePath</span> <span class="p">=</span> <span class="s">&#34;./test.txt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">readLineOfOne</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="nx">FilePath</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span><span class="o">!=</span><span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bufReader</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">i</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">		<span class="c1">//fmt.Println(i)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="nx">line</span><span class="p">,</span><span class="nx">err</span><span class="o">:=</span> <span class="nx">bufReader</span><span class="p">.</span><span class="nf">ReadBytes</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;-&gt;&#34;</span><span class="p">,</span><span class="nb">string</span><span class="p">(</span><span class="nx">line</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">		<span class="k">if</span> <span class="nx">err</span><span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;read file finished.&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="k">break</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span><span class="k">else</span> <span class="k">if</span> <span class="nx">err</span><span class="o">!=</span> <span class="kc">nil</span>	<span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">			<span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">readLineOfOne</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>bufReader.ReadBytes(&rsquo;\n&rsquo;)和 bufReader.ReadString(&rsquo;\n&rsquo;)在读到文件最后一行时，会同时返回内容line和io.EOF</li>
</ul>
</li>
</ul>
<h1 id="bufioreader" class="heading-element">
  <a href="#bufioreader" class="heading-mark"></a>bufio.Reader</h1><ul>
<li>方法一(一行一行读)</li>
</ul>
<div class="highlight" id="id-25"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;./src/day1/file_read/1.txt&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">bufReader</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">i</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">i</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">line</span><span class="p">,</span><span class="nx">err</span> <span class="o">:=</span> <span class="nx">bufReader</span><span class="p">.</span><span class="nf">ReadBytes</span><span class="p">(</span><span class="sc">&#39;\n&#39;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">line</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;read the file finished&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>方法二</li>
</ul>
<div class="highlight" id="id-26"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;./src/day1/file_read/1.txt&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">bufReader</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">buf</span> <span class="p">[</span><span class="mi">256</span><span class="p">]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">i</span> <span class="p">=</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">                <span class="nx">i</span><span class="o">++</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="nx">n</span><span class="p">,</span><span class="nx">err</span> <span class="o">:=</span> <span class="nx">bufReader</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buf</span><span class="p">[:])</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;read the file finished&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="nx">os</span><span class="p">.</span><span class="nf">Exit</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">buf</span><span class="p">[:</span><span class="nx">n</span><span class="p">]))</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>bufReader.ReadBytes(&rsquo;\n&rsquo;)和 bufReader.ReadString(&rsquo;\n&rsquo;)在读到文件最后一行时，会同时返回内容line和io.EOF。而bufReader.Read()读取到末尾时，会先返回内容，然后再下一次迭代时才返回io.EOF</li>
</ul>
<h1 id="读写文件的四种方式" class="heading-element">
  <a href="#%e8%af%bb%e5%86%99%e6%96%87%e4%bb%b6%e7%9a%84%e5%9b%9b%e7%a7%8d%e6%96%b9%e5%bc%8f" class="heading-mark"></a>读写文件的四种方式</h1><h2 id="读文件" class="heading-element">
  <a href="#%e8%af%bb%e6%96%87%e4%bb%b6" class="heading-mark"></a>1 读文件</h2><p>读取的文件放在file/test：也就是file包下的test这个文件，里面写多一点文件</p>
<ul>
<li>
<p>读文件方式一：利用ioutil.ReadFile直接从文件读取到[]byte中</p>
</li>
<li>
<p><strong>ioutil.ReadFile</strong> 将文件全部读到内存</p>
</li>
</ul>
<div class="highlight" id="id-27"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Read0</span><span class="p">()</span>  <span class="p">(</span><span class="kt">string</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadFile</span><span class="p">(</span><span class="s">&#34;file/test&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;read fail&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>读文件方式二：先从文件读取到file中，在从file读取到buf, buf在追加到最终的[]byte</p>
</li>
<li>
<p><strong>os.Open</strong> 文件流的方式读取文件</p>
</li>
</ul>
<div class="highlight" id="id-28"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Read1</span><span class="p">()</span>  <span class="p">(</span><span class="kt">string</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//获得一个file
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;file/test&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;read fail&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//把file读取到缓冲区中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">chunk</span> <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">    <span class="nx">buf</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//从file读取到buf中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">n</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;read buf fail&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//说明读取结束
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="nx">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//读取到最终的缓冲区中
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">chunk</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">chunk</span><span class="p">,</span> <span class="nx">buf</span><span class="p">[:</span><span class="nx">n</span><span class="p">]</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">chunk</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//fmt.Println(string(chunk))
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>读文件方式三：先从文件读取到file, 在从file读取到Reader中，从Reader读取到buf, buf最终追加到[]byte</li>
</ul>
<div class="highlight" id="id-29"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//先从文件读取到file, 在从file读取到Reader中，从Reader读取到buf, buf最终追加到[]byte，这个排第三
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">Read2</span><span class="p">()</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fi</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;file/test&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">defer</span> <span class="nx">fi</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">r</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewReader</span><span class="p">(</span><span class="nx">fi</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">chunks</span> <span class="p">[]</span><span class="kt">byte</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">buf</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">byte</span><span class="p">,</span> <span class="mi">1024</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">n</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">r</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">buf</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="o">&amp;&amp;</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">io</span><span class="p">.</span><span class="nx">EOF</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nb">panic</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="k">if</span> <span class="mi">0</span> <span class="o">==</span> <span class="nx">n</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="k">break</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">        <span class="c1">//fmt.Println(string(buf))
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">chunks</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">chunks</span><span class="p">,</span> <span class="nx">buf</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">chunks</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//fmt.Println(string(chunks))
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>读文件方式四：读取到file中，再利用ioutil将file直接读取到[]byte中</li>
</ul>
<div class="highlight" id="id-30"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//读取到file中，再利用ioutil将file直接读取到[]byte中, 这是最优
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">Read3</span><span class="p">()</span>  <span class="p">(</span><span class="kt">string</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">    <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;file/test&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;read file fail&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">fd</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">ioutil</span><span class="p">.</span><span class="nf">ReadAll</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;read to fd fail&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="s">&#34;&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="nb">string</span><span class="p">(</span><span class="nx">fd</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>读取速度比较</strong></li>
</ul>
<p>经过我的测试，这四种方式读的速度排名是：前者为优
方式四 &gt; 方式一 &gt; 方式三 &gt; 方式二</p>
<h2 id="写文件" class="heading-element">
  <a href="#%e5%86%99%e6%96%87%e4%bb%b6" class="heading-mark"></a>2 写文件</h2><ul>
<li>写文件方式一：使用 io.WriteString 写入文件</li>
</ul>
<div class="highlight" id="id-31"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Write0</span><span class="p">()</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fileName</span> <span class="o">:=</span> <span class="s">&#34;file/test1&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">strTest</span> <span class="o">:=</span> <span class="s">&#34;测试测试&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">f</span> <span class="o">*</span><span class="nx">os</span><span class="p">.</span><span class="nx">File</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nf">CheckFileExist</span><span class="p">(</span><span class="nx">fileName</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">//文件存在
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">OpenFile</span><span class="p">(</span><span class="nx">fileName</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">O_APPEND</span><span class="p">,</span> <span class="mo">0666</span><span class="p">)</span> <span class="c1">//打开文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;file open fail&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span><span class="k">else</span> <span class="p">{</span>  <span class="c1">//文件不存在
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">f</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">fileName</span><span class="p">)</span> <span class="c1">//创建文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;file create fail&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">            <span class="k">return</span>
</span></span><span class="line"><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//将文件写进去
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">n</span><span class="p">,</span> <span class="nx">err1</span> <span class="o">:=</span> <span class="nx">io</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span> <span class="nx">strTest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">err1</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;write error&#34;</span><span class="p">,</span> <span class="nx">err1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;写入的字节数是：&#34;</span><span class="p">,</span> <span class="nx">n</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>写文件方式二：使用 ioutil.WriteFile 写入文件</li>
</ul>
<div class="highlight" id="id-32"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-css" data-lang="css"><span class="line"><span class="cl"><span class="nt">func</span> <span class="nt">Write1</span><span class="o">()</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="n">fileName</span> <span class="p">:</span><span class="o">=</span> <span class="s2">&#34;file/test2&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">strTest</span> <span class="o">:=</span> <span class="s2">&#34;测试测试&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="n">var</span> <span class="n">d</span> <span class="o">=</span> <span class="p">[]</span><span class="nf">byte</span><span class="p">(</span><span class="n">strTest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">err</span> <span class="o">:=</span> <span class="n">ioutil</span><span class="o">.</span><span class="nf">WriteFile</span><span class="p">(</span><span class="n">fileName</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="mi">0666</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="n">if</span> <span class="n">err</span> <span class="o">!=</span> <span class="n">nil</span> <span class="err">{</span>
</span></span><span class="line"><span class="cl">        <span class="n">fmt</span><span class="o">.</span><span class="nf">Println</span><span class="p">(</span><span class="s2">&#34;write fail&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nt">fmt</span><span class="p">.</span><span class="nc">Println</span><span class="o">(</span><span class="s2">&#34;write success&#34;</span><span class="o">)</span>
</span></span><span class="line"><span class="cl"><span class="err">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>写文件方式三：使用 File(Write,WriteString) 写入文件</li>
</ul>
<div class="highlight" id="id-33"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Write2</span><span class="p">()</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">fileName</span> <span class="o">:=</span> <span class="s">&#34;file/test3&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">strTest</span> <span class="o">:=</span> <span class="s">&#34;测试测试&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">d1</span> <span class="p">=</span> <span class="p">[]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">strTest</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">f</span><span class="p">,</span> <span class="nx">err3</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">fileName</span><span class="p">)</span> <span class="c1">//创建文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="nx">err3</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;create file fail&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">defer</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">n2</span><span class="p">,</span> <span class="nx">err3</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nf">Write</span><span class="p">(</span><span class="nx">d1</span><span class="p">)</span> <span class="c1">//写入文件(字节数组)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;写入 %d 个字节n&#34;</span><span class="p">,</span> <span class="nx">n2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">n3</span><span class="p">,</span> <span class="nx">err3</span> <span class="o">:=</span> <span class="nx">f</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">&#34;writesn&#34;</span><span class="p">)</span> <span class="c1">//写入文件(字节数组)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;写入 %d 个字节n&#34;</span><span class="p">,</span> <span class="nx">n3</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">f</span><span class="p">.</span><span class="nf">Sync</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>写文件方式四：使用 bufio.NewWriter 写入文件</li>
</ul>
<div class="highlight" id="id-34"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Write3</span><span class="p">()</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fileName</span> <span class="o">:=</span> <span class="s">&#34;file/test3&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">f</span><span class="p">,</span> <span class="nx">err3</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">fileName</span><span class="p">)</span> <span class="c1">//创建文件
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="k">if</span> <span class="nx">err3</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;create file fail&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">w</span> <span class="o">:=</span> <span class="nx">bufio</span><span class="p">.</span><span class="nf">NewWriter</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span> <span class="c1">//创建新的 Writer 对象
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">n4</span><span class="p">,</span> <span class="nx">err3</span> <span class="o">:=</span> <span class="nx">w</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="s">&#34;bufferedn&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;写入 %d 个字节n&#34;</span><span class="p">,</span> <span class="nx">n4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">w</span><span class="p">.</span><span class="nf">Flush</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">f</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>检查文件是否存在：</li>
</ul>
<div class="highlight" id="id-35"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">CheckFileExist</span><span class="p">(</span><span class="nx">fileName</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Stat</span><span class="p">(</span><span class="nx">fileName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">if</span> <span class="nx">os</span><span class="p">.</span><span class="nf">IsNotExist</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="k">return</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
  <title>4-3. 空结构体</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515175106/</link>
  <pubDate>Thu, 15 May 2025 17:51:06 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515175106/</guid>
  <description><![CDATA[<h2 id="空结构体" class="heading-element">
  <a href="#%e7%a9%ba%e7%bb%93%e6%9e%84%e4%bd%93" class="heading-mark"></a>1 空结构体</h2><ul>
<li>
<p>空结构体不包含任何字段<code>struct{}{}</code></p>
</li>
<li>
<p>空结构体不占内存空间</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;unsafe&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Sizeof</span><span class="p">(</span><span class="kd">struct</span><span class="p">{}{}))</span>  <span class="c1">// 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="空结构的作用" class="heading-element">
  <a href="#%e7%a9%ba%e7%bb%93%e6%9e%84%e7%9a%84%e4%bd%9c%e7%94%a8" class="heading-mark"></a>2 空结构的作用</h2><h3 id="1-与map结合实现set" class="heading-element">
  <a href="#1-%e4%b8%8emap%e7%bb%93%e5%90%88%e5%ae%9e%e7%8e%b0set" class="heading-mark"></a>2.1 1. 与map结合实现set</h3><ul>
<li>Go 语言标准库没有提供 Set 的实现，通常使用 map 来代替。事实上，对于集合来说，只需要 map 的键，而不需要值。即使是将值设置为 bool 类型，也会多占据 1 个字节，那假设 map 中有一百万条数据，就会浪费 1MB 的空间</li>
<li>将 map 作为集合(Set)使用时，可以将值类型定义为空结构体，仅作为占位符使用即可。</li>
</ul>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Set</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">Set</span><span class="p">)</span> <span class="nf">Has</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="kt">bool</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">s</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">ok</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">Set</span><span class="p">)</span> <span class="nf">Add</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span><span class="p">[</span><span class="nx">key</span><span class="p">]</span> <span class="p">=</span> <span class="kd">struct</span><span class="p">{}{}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="nx">Set</span><span class="p">)</span> <span class="nf">Delete</span><span class="p">(</span><span class="nx">key</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nb">delete</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="nx">key</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="nx">Set</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">&#34;Tom&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">&#34;Sam&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nf">Has</span><span class="p">(</span><span class="s">&#34;Tom&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nf">Has</span><span class="p">(</span><span class="s">&#34;Jack&#34;</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="2-制造伪迭代器" class="heading-element">
  <a href="#2-%e5%88%b6%e9%80%a0%e4%bc%aa%e8%bf%ad%e4%bb%a3%e5%99%a8" class="heading-mark"></a>2.2 2. 制造伪迭代器</h3><div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">for</span> <span class="k">range</span> <span class="nb">make</span><span class="p">([]</span><span class="kd">struct</span><span class="p">{},</span> <span class="mi">100</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;迭代器&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="3-不发送数据的channel" class="heading-element">
  <a href="#3-%e4%b8%8d%e5%8f%91%e9%80%81%e6%95%b0%e6%8d%ae%e7%9a%84channel" class="heading-mark"></a>2.3 3. 不发送数据的channel</h3><div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">ch</span> <span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">&lt;-</span><span class="nx">ch</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;do something&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nb">close</span><span class="p">(</span><span class="nx">ch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ch</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">struct</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="k">go</span> <span class="nf">worker</span><span class="p">(</span><span class="nx">ch</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ch</span> <span class="o">&lt;-</span> <span class="kd">struct</span><span class="p">{}{}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="4-仅包含方法的结构体" class="heading-element">
  <a href="#4-%e4%bb%85%e5%8c%85%e5%90%ab%e6%96%b9%e6%b3%95%e7%9a%84%e7%bb%93%e6%9e%84%e4%bd%93" class="heading-mark"></a>2.4 4. 仅包含方法的结构体</h3><div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Door</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="nx">Door</span><span class="p">)</span> <span class="nf">Open</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Open the door&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="nx">Door</span><span class="p">)</span> <span class="nf">Close</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Close the door&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
  <title>4-2. 接口</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515175100/</link>
  <pubDate>Thu, 15 May 2025 17:51:00 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515175100/</guid>
  <description><![CDATA[<h1 id="接口" class="heading-element">
  <a href="#%e6%8e%a5%e5%8f%a3" class="heading-mark"></a>接口</h1><ul>
<li>
<p>接口（interface）定义了一个对象的行为规范，只定义规范不实现，由具体的对象来实现规范的细节。</p>
</li>
<li>
<p>牢记<strong>接口（interface）是一种类型</strong>。</p>
</li>
<li>
<p>接口类型是一种抽象的类型, 不会暴露出他所代表的内部属性的结构, 只会展示出他自己的方法,因此接口不能被实例化;</p>
</li>
<li>
<p>**Golang中的接口没有数据字段, 只有定义的方法;**接口是方法的集合</p>
</li>
<li>
<p>接口命名规范:</p>
<ul>
<li>单个函数的接口名以&quot;er&quot;作为后缀, 接口的实现则去掉&quot;er&quot;</li>
<li>两个函数的接口名综合两个函数名, 以&quot;er&quot;作为后缀, 接口的实现则去掉&quot;er&quot;</li>
<li>三个以上函数以上的接口名, 抽象这个接口的功能, 类似于结构体命名;</li>
</ul>
</li>
</ul>
<h2 id="1-鸭子类型" class="heading-element">
  <a href="#1-%e9%b8%ad%e5%ad%90%e7%b1%bb%e5%9e%8b" class="heading-mark"></a>1 1. 鸭子类型</h2><ul>
<li>
<p>鸭子模型: 当看到一只鸟走起来像鸭子,游泳像鸭子, 叫起来像鸭子, 那这只鸟就可以被称为鸭子;</p>
</li>
<li>
<p>在程序设计中, 鸭子模型 是动态类型语言的一种风格;<strong>一个对象有效的语义, 不是由继承自特定的类或实现特定的接口来决定, 而是由当前方法和属性的集合决定;</strong></p>
</li>
<li>
<p>go语言通过接口实现了鸭子模型, 对于Go来说, 我们不关心对象是什么类型,或者到底是不是鸭子, 我们只关心行为, 关心他是如何使用的.</p>
</li>
<li>
<p>一般来说, 静态类型语言在编译时便已经确定了变量的类型, 但是go是在编译时推断变量的类型</p>
</li>
</ul>
<h2 id="2-接口的定义" class="heading-element">
  <a href="#2-%e6%8e%a5%e5%8f%a3%e7%9a%84%e5%ae%9a%e4%b9%89" class="heading-mark"></a>2 2. 接口的定义</h2><p>Go语言提倡面向接口编程。</p>
<p>每个接口由数个方法组成，接口的定义格式如下：</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">接口类型名</span> <span class="kd">interface</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">方法名1</span><span class="p">(</span> <span class="nx">参数列表1</span> <span class="p">)</span> <span class="nx">返回值列表1</span>
</span></span><span class="line"><span class="cl">    <span class="nx">方法名2</span><span class="p">(</span> <span class="nx">参数列表2</span> <span class="p">)</span> <span class="nx">返回值列表2</span>
</span></span><span class="line"><span class="cl">    <span class="err">…</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>其中：</p>
<ul>
<li>接口名：使用<code>type</code>将接口定义为自定义的类型名。Go语言的接口在命名时，一般会在单词后面添加<code>er</code>，如有写操作的接口叫<code>Writer</code>，有字符串功能的接口叫<code>Stringer</code>等。接口名最好要能突出该接口的类型含义。</li>
<li>方法名：当方法名首字母是大写且这个接口类型名首字母也是大写时，这个方法可以被接口所在的包（package）之外的代码访问。</li>
<li>参数列表、返回值列表：参数列表和返回值列表中的参数变量名可以省略。</li>
</ul>
<p>举个例子：</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">writer</span> <span class="kd">interface</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">Write</span><span class="p">([]</span><span class="kt">byte</span><span class="p">)</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>当你看到这个接口类型的值时，你不知道它是什么，唯一知道的就是可以通过它的Write方法来做一些事情。</p>
<h2 id="3-接口的实现" class="heading-element">
  <a href="#3-%e6%8e%a5%e5%8f%a3%e7%9a%84%e5%ae%9e%e7%8e%b0" class="heading-mark"></a>3 3. 接口的实现</h2><ul>
<li>
<p>一个对象只要全部实现了接口中的方法，那么就实现了这个接口。换句话说，接口就是一个<strong>需要实现的方法列表</strong>。</p>
</li>
<li>
<p>一个类型可以实现多个接口, 多个类型也可以实现同一个接口, <strong>任何一个类型都实现了空接口</strong>;</p>
</li>
</ul>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Animal</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Talk</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Eat</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Name</span><span class="p">()</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Dog</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="nx">Dog</span><span class="p">)</span> <span class="nf">Talk</span><span class="p">()</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;汪汪汪&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="nx">Dog</span><span class="p">)</span> <span class="nf">Eat</span><span class="p">()</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;我在吃骨头&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="nx">Dog</span><span class="p">)</span> <span class="nf">Name</span><span class="p">()</span> <span class="kt">string</span>   <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;我的名字叫旺财&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="s">&#34;旺财&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">d</span> <span class="nx">Dog</span>  <span class="c1">// Dog 中需要全部实现AnimaI的方法集合
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">a</span> <span class="nx">Animal</span>
</span></span><span class="line"><span class="cl">  <span class="nx">a</span> <span class="p">=</span> <span class="nx">d</span>  <span class="c1">// 接口赋值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">a</span><span class="p">.</span><span class="nf">Name</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">a</span><span class="p">.</span><span class="nf">Eat</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">a</span><span class="p">.</span><span class="nf">Talk</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="4-接口类型变量" class="heading-element">
  <a href="#4-%e6%8e%a5%e5%8f%a3%e7%b1%bb%e5%9e%8b%e5%8f%98%e9%87%8f" class="heading-mark"></a>4 4. 接口类型变量</h2><p>那实现了接口有什么用呢？</p>
<p>接口类型变量能够存储所有实现了该接口的实例。 例如上面的示例中，<code>Sayer</code>类型的变量能够存储<code>dog</code>和<code>cat</code>类型的变量。</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">x</span> <span class="nx">Sayer</span> <span class="c1">// 声明一个Sayer类型的变量x
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">a</span> <span class="o">:=</span> <span class="nx">cat</span><span class="p">{}</span>  <span class="c1">// 实例化一个cat
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">b</span> <span class="o">:=</span> <span class="nx">dog</span><span class="p">{}</span>  <span class="c1">// 实例化一个dog
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">x</span> <span class="p">=</span> <span class="nx">a</span>       <span class="c1">// 可以把cat实例直接赋值给x
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">x</span><span class="p">.</span><span class="nf">say</span><span class="p">()</span>     <span class="c1">// 喵喵喵
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">x</span> <span class="p">=</span> <span class="nx">b</span>       <span class="c1">// 可以把dog实例直接赋值给x
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">x</span><span class="p">.</span><span class="nf">say</span><span class="p">()</span>     <span class="c1">// 汪汪汪
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>Tips：</strong> 观察下面的代码，体味此处<code>_</code>的妙用</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 摘自gin框架routergroup.go
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">IRouter</span> <span class="kd">interface</span><span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">RouterGroup</span> <span class="kd">struct</span> <span class="p">{</span> <span class="o">...</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">_</span> <span class="nx">IRouter</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">RouterGroup</span><span class="p">{}</span>  <span class="c1">// 确保RouterGroup实现了接口IRouter
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="5-接口赋值" class="heading-element">
  <a href="#5-%e6%8e%a5%e5%8f%a3%e8%b5%8b%e5%80%bc" class="heading-mark"></a>5 5. 接口赋值</h2><ul>
<li>
<p>用户自定义的类型实现了某个接口类型的所有方法, 那么这个用户自定义的类型的值就可以赋值给这个接口. 这个赋值会把用户定义类型的值存入到接口类型变量中;</p>
</li>
<li>
<p><strong>接口变量</strong>: 接口变量存储了两部分信息, 一部分是分配给接口变量的具体值(接口实现者的值), 二是值得类型的描述器(接口实现者的类型)</p>
</li>
<li>
<p>接口赋值存在两种情况</p>
<ol>
<li>将对象实例赋值给接口</li>
<li>将一个接口赋值给另一个接口
<ul>
<li>只要两个接口拥有相同的方法集就可以, 就可以相互赋值</li>
<li>如果两个接口方法集不同, 接口A的方法集是接口B的方法集的子集, 那么接口A可以赋值给接口B, 反之不成立</li>
</ul>
</li>
</ol>
</li>
<li>
<p>将对象实例赋值给接口</p>
</li>
</ul>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">IDatabaser</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Connect</span><span class="p">()</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="nf">DisConnect</span><span class="p">()</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Redis</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">DBName</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">redis</span> <span class="nx">Redis</span><span class="p">)</span> <span class="nf">Connect</span><span class="p">()</span> <span class="kt">error</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;redis connect DB=&gt; &#34;</span> <span class="o">+</span> <span class="nx">redis</span><span class="p">.</span><span class="nx">DBName</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;redis connect success!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">redis</span> <span class="nx">Redis</span><span class="p">)</span> <span class="nf">DisConnect</span><span class="p">()</span> <span class="kt">error</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;redis disconnect success!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">redisObj</span> <span class="p">=</span> <span class="nx">Redis</span><span class="p">{</span><span class="nx">DBName</span><span class="p">:</span> <span class="s">&#34;Evan&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">idb</span> <span class="nx">IDatabaser</span>  <span class="c1">// 接口变量
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">idb</span> <span class="p">=</span> <span class="nx">redisObj</span>    <span class="c1">//接口赋值: redisObj这个类型实例实现了接口中的所有方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">_</span> <span class="p">=</span> <span class="nx">idb</span><span class="p">.</span><span class="nf">Connect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">_</span> <span class="p">=</span> <span class="nx">idb</span><span class="p">.</span><span class="nf">DisConnect</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">redis connect DB=&gt; Evan
</span></span></span><span class="line"><span class="cl"><span class="cm">redis connect success!
</span></span></span><span class="line"><span class="cl"><span class="cm">redis disconnect success!
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="6-接口嵌套继承" class="heading-element">
  <a href="#6-%e6%8e%a5%e5%8f%a3%e5%b5%8c%e5%a5%97%e7%bb%a7%e6%89%bf" class="heading-mark"></a>6 6. 接口嵌套(继承)</h2><ul>
<li>接口的嵌入也叫接口组合, 在python中叫继承如果接口A作为接口B的一个嵌入字段, 那么接口B中就包含了接口A中的所有方法
<ul>
<li>一个接口只接受其它接口的嵌入, 嵌入结构体和其他类型会报错</li>
<li>一个接口不能嵌入接口本身, 包括直接嵌入和间接嵌入</li>
</ul>
</li>
</ul>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Peopler1</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">GetName</span><span class="p">()</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Peopler2</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Peopler1</span>
</span></span><span class="line"><span class="cl">	<span class="nf">GetAge</span><span class="p">()</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Peopler3</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Peopler2</span>
</span></span><span class="line"><span class="cl">	<span class="nf">GetHeight</span><span class="p">()</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">People</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">age</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">height</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">People</span><span class="p">)</span> <span class="nf">GetHeight</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">height</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">People</span><span class="p">)</span> <span class="nf">GetName</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">name</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">People</span><span class="p">)</span> <span class="nf">GetAge</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">p</span><span class="p">.</span><span class="nx">age</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">p</span> <span class="p">=</span> <span class="nx">People</span><span class="p">{</span><span class="s">&#34;evan&#34;</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">180</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nf">GetName</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nf">GetAge</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nf">GetHeight</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">p3</span> <span class="nx">Peopler3</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p3</span> <span class="p">=</span> <span class="nx">p</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">p3</span><span class="p">.</span><span class="nf">GetName</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">p3</span><span class="p">.</span><span class="nf">GetAge</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">p3</span><span class="p">.</span><span class="nf">GetHeight</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="7-空接口" class="heading-element">
  <a href="#7-%e7%a9%ba%e6%8e%a5%e5%8f%a3" class="heading-mark"></a>7 7. 空接口</h2><ul>
<li>空接口 <code>interface{}</code>是golang中最特殊的接口, <strong>在python3中,任何一个类都会继承Object基类, 而go中的空接口interface{}类似于python3中的基类Object</strong></li>
<li>空接口中不包含热河方法, 所以类型其实都实现了空接口;空接口可以接收任何值;</li>
<li>不能将空接口赋值到其他类型, 如果需要这么做必须使用类型断言.</li>
</ul>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">a</span> <span class="p">=</span> <span class="s">&#34;1&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">nullInterface</span> <span class="kd">interface</span><span class="p">{}</span> <span class="p">=</span> <span class="nx">a</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">b</span> <span class="kt">string</span> <span class="p">=</span> <span class="nx">nullInterface</span><span class="p">.(</span><span class="kt">string</span><span class="p">)</span>  <span class="c1">// 类型断言,接口类型向普通类型转换
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="71-空接口的应用" class="heading-element">
  <a href="#71-%e7%a9%ba%e6%8e%a5%e5%8f%a3%e7%9a%84%e5%ba%94%e7%94%a8" class="heading-mark"></a>7.1 7.1 空接口的应用</h3><ol>
<li><strong>空接口作为函数的参数</strong></li>
</ol>
<p>使用空接口实现可以接收任意类型的函数参数。</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 空接口作为函数参数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">show</span><span class="p">(</span><span class="nx">a</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;type:%T value:%v\n&#34;</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ol start="2">
<li><strong>空接口作为map的值</strong></li>
</ol>
<p>使用空接口实现可以保存任意值的字典。</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 空接口作为map值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">studentInfo</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">	<span class="nx">studentInfo</span><span class="p">[</span><span class="s">&#34;name&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;沙河娜扎&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">studentInfo</span><span class="p">[</span><span class="s">&#34;age&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="mi">18</span>
</span></span><span class="line"><span class="cl">	<span class="nx">studentInfo</span><span class="p">[</span><span class="s">&#34;married&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="kc">false</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">studentInfo</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="8-断言" class="heading-element">
  <a href="#8-%e6%96%ad%e8%a8%80" class="heading-mark"></a>8 8. 断言</h2><ul>
<li>
<p>断言是使用在接口变量上的操作, 简单来说,接口类型向普通类型转换就是类型断言</p>
</li>
<li>
<p>断言语法</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">t</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">X</span><span class="p">.(</span><span class="nx">T</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 判断接口变量X的类型是不是T, 如果断言成功,则ok为true,t的值为X动态值; 否则ok为false,t的值为类型T的初始值, t的类型始终是T
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>断言有两种方式</p>
<ol>
<li>
<p>Ok-pattern 适用于接口类型较少</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">if</span> <span class="nx">value</span> <span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">X</span><span class="p">.(</span><span class="nx">T</span><span class="p">);</span> <span class="nx">ok</span> <span class="o">==</span><span class="kc">true</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>switch-type  要断言的接口类型较多</p>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">switch</span> <span class="nx">value</span> <span class="o">:=</span> <span class="nx">接口变量</span><span class="p">.(</span><span class="kd">type</span><span class="p">){</span>
</span></span><span class="line"><span class="cl">  <span class="k">case</span> <span class="nx">type1</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  	<span class="c1">// dosomething
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">case</span> <span class="nx">type2</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  	<span class="c1">// dosomething
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="k">default</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">  	<span class="c1">// 当接口类型没有被捕获到的时候do
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
</li>
</ul>
<ol start="3">
<li>
<p>示例</p>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">e</span> <span class="kd">interface</span> <span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">Map</span><span class="p">(</span><span class="nx">f</span> <span class="kd">func</span><span class="p">(</span><span class="nx">a</span> <span class="nx">e</span><span class="p">)</span><span class="nx">e</span> <span class="p">,</span><span class="nx">arr</span> <span class="p">[]</span><span class="nx">e</span><span class="p">)</span> <span class="p">[]</span><span class="nx">e</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">res</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="nx">e</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">_</span> <span class="p">,</span><span class="nx">item</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">arr</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">_res</span> <span class="o">:=</span> <span class="nf">f</span><span class="p">(</span><span class="nx">item</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="nx">res</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">res</span><span class="p">,</span><span class="nx">_res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="nx">res</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">a</span><span class="o">:=</span> <span class="p">[]</span><span class="nx">e</span><span class="p">{</span><span class="s">&#34;1&#34;</span><span class="p">,</span><span class="s">&#34;2&#34;</span><span class="p">,</span><span class="s">&#34;3&#34;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">b</span><span class="o">:=</span> <span class="p">[]</span><span class="nx">e</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">fu</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">arg</span> <span class="nx">e</span><span class="p">)</span><span class="nx">e</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="kd">var</span> <span class="nx">res</span> <span class="nx">e</span>
</span></span><span class="line"><span class="cl">		<span class="k">switch</span> <span class="nx">arg</span><span class="p">.(</span><span class="kd">type</span><span class="p">)</span> <span class="p">{</span>  <span class="c1">// 断言
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="k">case</span> <span class="kt">string</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="nx">res</span> <span class="p">=</span>  <span class="nx">arg</span><span class="p">.(</span><span class="kt">string</span><span class="p">)</span><span class="o">+</span><span class="s">&#34;--&#34;</span>
</span></span><span class="line"><span class="cl">		<span class="k">case</span> <span class="kt">int</span><span class="p">:</span>
</span></span><span class="line"><span class="cl">			<span class="nx">res</span> <span class="p">=</span>  <span class="nx">arg</span><span class="p">.(</span><span class="kt">int</span><span class="p">)</span><span class="o">*</span> <span class="mi">2</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">res</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">res</span><span class="o">:=</span> <span class="nf">Map</span><span class="p">(</span><span class="nx">fu</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">res</span> <span class="p">=</span> <span class="nf">Map</span><span class="p">(</span><span class="nx">fu</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">res</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">*[1-- 2-- 3-- 2 4 6]
</span></span></span><span class="line"><span class="cl"><span class="cm">*[2 4 6 8 10]
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="9-侵入式接口和非侵入式接口" class="heading-element">
  <a href="#9-%e4%be%b5%e5%85%a5%e5%bc%8f%e6%8e%a5%e5%8f%a3%e5%92%8c%e9%9d%9e%e4%be%b5%e5%85%a5%e5%bc%8f%e6%8e%a5%e5%8f%a3" class="heading-mark"></a>9 9. 侵入式接口和非侵入式接口</h2><ul>
<li>
<p>侵入式接口和非侵入式接口的区别</p>
<ul>
<li>侵入式接口: 需要显式的创建一个类去实现某一个接口</li>
<li>非侵入式接口: 不需要显式的创建一个类去实现接口; 非侵入式更加简洁灵活, 更注重实用性.</li>
</ul>
</li>
<li>
<p>在golang中, 接口是非侵入式的, 非侵入式的优点:</p>
<ol>
<li>去掉了繁琐的继承体系, golang中类的继承并无意义, 你只需要知道这个类实现了哪些方法, 每个方法是何含义就可以了;</li>
<li>实现类的接口时, 只需要关心自己应该提供哪些方法, 不用纠结接口需要拆分的多细才合适, 接口由使用方按需定义, 而不用事前规划;</li>
<li>不用为了实现一个接口而导入一个包, 多引用一个外部的包, 就意味着更多的耦合, 接口由使用方按需定义, 使用方不用关心是否有其他模块定义过类似的接口</li>
</ol>
</li>
<li>
<p>代码</p>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">IPhoner</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Call</span><span class="p">()</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Video</span><span class="p">()</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl">	<span class="nf">Game</span><span class="p">()</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Phone</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Phone</span><span class="p">)</span> <span class="nf">Call</span><span class="p">()</span> <span class="kt">error</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">Name</span> <span class="p">,</span> <span class="s">&#34;start call&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Phone</span><span class="p">)</span> <span class="nf">Video</span><span class="p">()</span> <span class="kt">error</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">Name</span> <span class="p">,</span> <span class="s">&#34;start video&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Phone</span><span class="p">)</span> <span class="nf">Game</span><span class="p">()</span> <span class="kt">error</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="s">&#34;start game&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">iphone</span> <span class="nx">IPhoner</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">Phone</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="s">&#34;iphone&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">huawei</span> <span class="nx">IPhoner</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">Phone</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="s">&#34;huawei&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">iphone</span><span class="p">.</span><span class="nf">Call</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">huawei</span><span class="p">.</span><span class="nf">Game</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="10-值接收者和指针接收者实现接口的区别" class="heading-element">
  <a href="#10-%e5%80%bc%e6%8e%a5%e6%94%b6%e8%80%85%e5%92%8c%e6%8c%87%e9%92%88%e6%8e%a5%e6%94%b6%e8%80%85%e5%ae%9e%e7%8e%b0%e6%8e%a5%e5%8f%a3%e7%9a%84%e5%8c%ba%e5%88%ab" class="heading-mark"></a>10 10. 值接收者和指针接收者实现接口的区别</h2><p>使用值接收者实现接口和使用指针接收者实现接口有什么区别呢？接下来我们通过一个例子看一下其中的区别。</p>
<p>我们有一个<code>Mover</code>接口和一个<code>dog</code>结构体。</p>
<div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Mover</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">move</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">dog</span> <span class="kd">struct</span> <span class="p">{}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="101-值接收者实现接口" class="heading-element">
  <a href="#101-%e5%80%bc%e6%8e%a5%e6%94%b6%e8%80%85%e5%ae%9e%e7%8e%b0%e6%8e%a5%e5%8f%a3" class="heading-mark"></a>10.1 10.1 值接收者实现接口</h3><div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="nx">dog</span><span class="p">)</span> <span class="nf">move</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;狗会动&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>此时实现接口的是<code>dog</code>类型：</p>
<div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">x</span> <span class="nx">Mover</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">wangcai</span> <span class="p">=</span> <span class="nx">dog</span><span class="p">{}</span> <span class="c1">// 旺财是dog类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">x</span> <span class="p">=</span> <span class="nx">wangcai</span>         <span class="c1">// x可以接收dog类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">fugui</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">dog</span><span class="p">{}</span>  <span class="c1">// 富贵是*dog类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">x</span> <span class="p">=</span> <span class="nx">fugui</span>           <span class="c1">// x可以接收*dog类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">x</span><span class="p">.</span><span class="nf">move</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>从上面的代码中我们可以发现，使用值接收者实现接口之后，不管是dog结构体还是结构体指针*dog类型的变量都可以赋值给该接口变量。因为Go语言中有对指针类型变量求值的语法糖，dog指针<code>fugui</code>内部会自动求值<code>*fugui</code>。</p>
<h3 id="102-指针接收者实现接口" class="heading-element">
  <a href="#102-%e6%8c%87%e9%92%88%e6%8e%a5%e6%94%b6%e8%80%85%e5%ae%9e%e7%8e%b0%e6%8e%a5%e5%8f%a3" class="heading-mark"></a>10.2 10.2 指针接收者实现接口</h3><p>同样的代码我们再来测试一下使用指针接收者有什么区别：</p>
<div class="highlight" id="id-19"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">dog</span><span class="p">)</span> <span class="nf">move</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;狗会动&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">x</span> <span class="nx">Mover</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">wangcai</span> <span class="p">=</span> <span class="nx">dog</span><span class="p">{}</span> <span class="c1">// 旺财是dog类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">x</span> <span class="p">=</span> <span class="nx">wangcai</span>         <span class="c1">// x不可以接收dog类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span> <span class="nx">fugui</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">dog</span><span class="p">{}</span>  <span class="c1">// 富贵是*dog类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">x</span> <span class="p">=</span> <span class="nx">fugui</span>           <span class="c1">// x可以接收*dog类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>此时实现<code>Mover</code>接口的是<code>*dog</code>类型，所以不能给<code>x</code>传入<code>dog</code>类型的wangcai，此时x只能存储<code>*dog</code>类型的值。</p>
<h2 id="11-类型与接口的关系" class="heading-element">
  <a href="#11-%e7%b1%bb%e5%9e%8b%e4%b8%8e%e6%8e%a5%e5%8f%a3%e7%9a%84%e5%85%b3%e7%b3%bb" class="heading-mark"></a>11 11. 类型与接口的关系</h2><h3 id="111-一个类型实现多个接口" class="heading-element">
  <a href="#111-%e4%b8%80%e4%b8%aa%e7%b1%bb%e5%9e%8b%e5%ae%9e%e7%8e%b0%e5%a4%9a%e4%b8%aa%e6%8e%a5%e5%8f%a3" class="heading-mark"></a>11.1 11.1 一个类型实现多个接口</h3><p>一个类型可以同时实现多个接口，而接口间彼此独立，不知道对方的实现。 例如，狗可以叫，也可以动。我们就分别定义Sayer接口和Mover接口，如下： <code>Mover</code>接口。</p>
<div class="highlight" id="id-20"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Sayer 接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Sayer</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">say</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// Mover 接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Mover</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">move</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>dog既可以实现Sayer接口，也可以实现Mover接口。</p>
<div class="highlight" id="id-21"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">dog</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 实现Sayer接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="nx">dog</span><span class="p">)</span> <span class="nf">say</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s会叫汪汪汪\n&#34;</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 实现Mover接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="nx">dog</span><span class="p">)</span> <span class="nf">move</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s会动\n&#34;</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">x</span> <span class="nx">Sayer</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">y</span> <span class="nx">Mover</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">a</span> <span class="p">=</span> <span class="nx">dog</span><span class="p">{</span><span class="nx">name</span><span class="p">:</span> <span class="s">&#34;旺财&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">x</span> <span class="p">=</span> <span class="nx">a</span>
</span></span><span class="line"><span class="cl">	<span class="nx">y</span> <span class="p">=</span> <span class="nx">a</span>
</span></span><span class="line"><span class="cl">	<span class="nx">x</span><span class="p">.</span><span class="nf">say</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">y</span><span class="p">.</span><span class="nf">move</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="112-多个类型实现同一接口多态" class="heading-element">
  <a href="#112-%e5%a4%9a%e4%b8%aa%e7%b1%bb%e5%9e%8b%e5%ae%9e%e7%8e%b0%e5%90%8c%e4%b8%80%e6%8e%a5%e5%8f%a3%e5%a4%9a%e6%80%81" class="heading-mark"></a>11.2 11.2 多个类型实现同一接口(多态)</h3><p>Go语言中不同的类型还可以实现同一接口 首先我们定义一个<code>Mover</code>接口，它要求必须由一个<code>move</code>方法。</p>
<div class="highlight" id="id-22"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// Mover 接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Mover</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">move</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>例如狗可以动，汽车也可以动，可以使用如下代码实现这个关系：</p>
<div class="highlight" id="id-23"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">dog</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">car</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">brand</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// dog类型实现Mover接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="nx">dog</span><span class="p">)</span> <span class="nf">move</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s会跑\n&#34;</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// car类型实现Mover接口
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="nx">car</span><span class="p">)</span> <span class="nf">move</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s速度70迈\n&#34;</span><span class="p">,</span> <span class="nx">c</span><span class="p">.</span><span class="nx">brand</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>这个时候我们在代码中就可以把狗和汽车当成一个会动的物体来处理了，不再需要关注它们具体是什么，只需要调用它们的<code>move</code>方法就可以了。</p>
<div class="highlight" id="id-24"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">x</span> <span class="nx">Mover</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">a</span> <span class="p">=</span> <span class="nx">dog</span><span class="p">{</span><span class="nx">name</span><span class="p">:</span> <span class="s">&#34;旺财&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">b</span> <span class="p">=</span> <span class="nx">car</span><span class="p">{</span><span class="nx">brand</span><span class="p">:</span> <span class="s">&#34;保时捷&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">x</span> <span class="p">=</span> <span class="nx">a</span>
</span></span><span class="line"><span class="cl">	<span class="nx">x</span><span class="p">.</span><span class="nf">move</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">x</span> <span class="p">=</span> <span class="nx">b</span>
</span></span><span class="line"><span class="cl">	<span class="nx">x</span><span class="p">.</span><span class="nf">move</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>上面的代码执行结果如下：</p>
<div class="highlight" id="id-25"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">旺财会跑</span>
</span></span><span class="line"><span class="cl"><span class="nx">保时捷速度70迈</span></span></span></code></pre></td></tr></table>
</div>
</div><p>并且一个接口的方法，不一定需要由一个类型完全实现，接口的方法可以通过在类型中嵌入其他类型或者结构体来实现。</p>
<div class="highlight" id="id-26"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// WashingMachine 洗衣机
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">WashingMachine</span> <span class="kd">interface</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nf">wash</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nf">dry</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 甩干器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">dryer</span> <span class="kd">struct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 实现WashingMachine接口的dry()方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="nx">dryer</span><span class="p">)</span> <span class="nf">dry</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;甩一甩&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 海尔洗衣机
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">haier</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dryer</span> <span class="c1">//嵌入甩干器
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 实现WashingMachine接口的wash()方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">h</span> <span class="nx">haier</span><span class="p">)</span> <span class="nf">wash</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;洗刷刷&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div>]]></description>
</item>
<item>
  <title>4-1. 结构体</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515175056/</link>
  <pubDate>Thu, 15 May 2025 17:50:56 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515175056/</guid>
  <description><![CDATA[<h1 id="结构体" class="heading-element">
  <a href="#%e7%bb%93%e6%9e%84%e4%bd%93" class="heading-mark"></a>结构体</h1><ul>
<li>Go语言中没有“类”的概念，也不支持“类”的继承等面向对象的概念。Go语言中通过结构体的内嵌再配合接口比面向对象具有更高的扩展性和灵活性。</li>
<li>Go语言中的基础数据类型可以表示一些事物的基本属性，但是当我们想表达一个事物的全部或部分属性时，这时候再用单一的基本数据类型明显就无法满足需求了，Go语言提供了一种自定义数据类型，可以封装多个基本数据类型，这种数据类型叫结构体，英文名称<code>struct</code>。 也就是我们可以通过<code>struct</code>来定义自己的类型了。</li>
<li><strong>Go语言中通过<code>struct</code>来实现面向对象。</strong></li>
</ul>
<h2 id="0-struct转换成map" class="heading-element">
  <a href="#0-struct%e8%bd%ac%e6%8d%a2%e6%88%90map" class="heading-mark"></a>1 0. Struct转换成map</h2><h3 id="01-struct转json再转map" class="heading-element">
  <a href="#01-struct%e8%bd%acjson%e5%86%8d%e8%bd%acmap" class="heading-mark"></a>1.1 0.1 Struct转json再转map</h3><div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nf">mport</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;encoding/json&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;reflect&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;time&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Persion</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Id</span>       <span class="kt">int</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Name</span>     <span class="kt">string</span>
</span></span><span class="line"><span class="cl">    <span class="nx">Address</span>  <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">StructToMapViaJson</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//StructToMapViaReflect()
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">StructToMapViaJson</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">m</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">    <span class="nx">t</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">person</span> <span class="o">:=</span> <span class="nx">Persion</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Id</span><span class="p">:</span>       <span class="mi">98439</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Name</span><span class="p">:</span>     <span class="s">&#34;zhaondifnei&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Address</span><span class="p">:</span>  <span class="s">&#34;大沙地&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">j</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">m</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">Sub</span><span class="p">(</span><span class="nx">t</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="02-反射struct-转map" class="heading-element">
  <a href="#02-%e5%8f%8d%e5%b0%84struct-%e8%bd%acmap" class="heading-mark"></a>1.2 0.2 反射Struct 转map</h3><blockquote>
<p>是方法一速度的两倍</p>
</blockquote>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">StructToMapViaReflect</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">m</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{})</span>
</span></span><span class="line"><span class="cl">    <span class="nx">t</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">person</span> <span class="o">:=</span> <span class="nx">Persion</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Id</span><span class="p">:</span>       <span class="mi">98439</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Name</span><span class="p">:</span>     <span class="s">&#34;zhaondifnei&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="nx">Address</span><span class="p">:</span>  <span class="s">&#34;大沙地&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">elem</span> <span class="o">:=</span> <span class="nx">reflect</span><span class="p">.</span><span class="nf">ValueOf</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">person</span><span class="p">).</span><span class="nf">Elem</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nx">relType</span> <span class="o">:=</span> <span class="nx">elem</span><span class="p">.</span><span class="nf">Type</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">relType</span><span class="p">.</span><span class="nf">NumField</span><span class="p">();</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="nx">m</span><span class="p">[</span><span class="nx">relType</span><span class="p">.</span><span class="nf">Field</span><span class="p">(</span><span class="nx">i</span><span class="p">).</span><span class="nx">Name</span><span class="p">]</span> <span class="p">=</span> <span class="nx">elem</span><span class="p">.</span><span class="nf">Field</span><span class="p">(</span><span class="nx">i</span><span class="p">).</span><span class="nf">Interface</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;duration:%d&#34;</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">Sub</span><span class="p">(</span><span class="nx">t</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="1-结构体的定义" class="heading-element">
  <a href="#1-%e7%bb%93%e6%9e%84%e4%bd%93%e7%9a%84%e5%ae%9a%e4%b9%89" class="heading-mark"></a>2 1. 结构体的定义</h2><ul>
<li>
<p>使用<code>type</code>和<code>struct</code>关键字来定义结构体，具体代码格式如下：</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">类型名</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">字段名</span> <span class="nx">字段类型</span>
</span></span><span class="line"><span class="cl">    <span class="nx">字段名</span> <span class="nx">字段类型</span>
</span></span><span class="line"><span class="cl">    <span class="err">…</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>类型名：标识自定义结构体的名称，在同一个包内不能重复。</li>
<li>字段名：表示结构体字段名。结构体中的字段名必须唯一。</li>
<li>字段类型：表示结构体字段的具体类型。</li>
</ul>
</li>
<li>
<p>举个例子，我们定义一个<code>Person</code>（人）结构体，代码如下：</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">person</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">city</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">age</span>  <span class="kt">int8</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>同样类型的字段也可以写在一行，</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">person1</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span><span class="p">,</span> <span class="nx">city</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">age</span>        <span class="kt">int8</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<blockquote>
<p>结构体中字段大写开头表示可公开访问，小写表示私有（仅在定义当前结构体的包中可访问）。</p>
</blockquote>
<h2 id="2-结构体实例化" class="heading-element">
  <a href="#2-%e7%bb%93%e6%9e%84%e4%bd%93%e5%ae%9e%e4%be%8b%e5%8c%96" class="heading-mark"></a>3 2. 结构体实例化</h2><ul>
<li>
<p>只有当结构体实例化时，才会真正地分配内存。也就是必须实例化后才能使用结构体的字段。</p>
</li>
<li>
<p>结构体本身也是一种类型，我们可以像声明内置类型一样使用<code>var</code>关键字声明结构体类型。</p>
</li>
</ul>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">结构体实例</span> <span class="nx">结构体类型</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="21-基本实例化" class="heading-element">
  <a href="#21-%e5%9f%ba%e6%9c%ac%e5%ae%9e%e4%be%8b%e5%8c%96" class="heading-mark"></a>3.1 2.1 基本实例化</h3><div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">person</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">city</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">age</span>  <span class="kt">int8</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">p1</span> <span class="nx">person</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p1</span><span class="p">.</span><span class="nx">name</span> <span class="p">=</span> <span class="s">&#34;沙河娜扎&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p1</span><span class="p">.</span><span class="nx">city</span> <span class="p">=</span> <span class="s">&#34;北京&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p1</span><span class="p">.</span><span class="nx">age</span> <span class="p">=</span> <span class="mi">18</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;p1=%v\n&#34;</span><span class="p">,</span> <span class="nx">p1</span><span class="p">)</span>  <span class="c1">//p1={沙河娜扎 北京 18}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;p1=%#v\n&#34;</span><span class="p">,</span> <span class="nx">p1</span><span class="p">)</span> <span class="c1">//p1=main.person{name:&#34;沙河娜扎&#34;, city:&#34;北京&#34;, age:18}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>我们通过<code>.</code>来访问结构体的字段（成员变量）,例如<code>p1.name</code>和<code>p1.age</code>等。</li>
</ul>
<h3 id="22-匿名结构体" class="heading-element">
  <a href="#22-%e5%8c%bf%e5%90%8d%e7%bb%93%e6%9e%84%e4%bd%93" class="heading-mark"></a>3.2 2.2 匿名结构体</h3><ul>
<li>在定义一些临时数据结构等场景下还可以使用匿名结构体。</li>
</ul>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">     
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">     
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">user</span> <span class="kd">struct</span><span class="p">{</span><span class="nx">Name</span> <span class="kt">string</span><span class="p">;</span> <span class="nx">Age</span> <span class="kt">int</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="nx">user</span><span class="p">.</span><span class="nx">Name</span> <span class="p">=</span> <span class="s">&#34;小王子&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">user</span><span class="p">.</span><span class="nx">Age</span> <span class="p">=</span> <span class="mi">18</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%#v\n&#34;</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="23-创建指针类型结构体" class="heading-element">
  <a href="#23-%e5%88%9b%e5%bb%ba%e6%8c%87%e9%92%88%e7%b1%bb%e5%9e%8b%e7%bb%93%e6%9e%84%e4%bd%93" class="heading-mark"></a>3.3 2.3 创建指针类型结构体</h3><ul>
<li>我们还可以通过使用<code>new</code>关键字对结构体进行实例化，得到的是结构体的地址。 格式如下：</li>
</ul>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">p2</span> <span class="p">=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%T\n&#34;</span><span class="p">,</span> <span class="nx">p2</span><span class="p">)</span>     <span class="c1">//*main.person
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;p2=%#v\n&#34;</span><span class="p">,</span> <span class="nx">p2</span><span class="p">)</span> <span class="c1">//p2=&amp;main.person{name:&#34;&#34;, city:&#34;&#34;, age:0}
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>需要注意的是在Go语言中支持对结构体指针直接使用<code>.</code>来访问结构体的成员。</li>
</ul>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">p2</span> <span class="p">=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">person</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">p2</span><span class="p">.</span><span class="nx">name</span> <span class="p">=</span> <span class="s">&#34;小王子&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">p2</span><span class="p">.</span><span class="nx">age</span> <span class="p">=</span> <span class="mi">28</span>
</span></span><span class="line"><span class="cl"><span class="nx">p2</span><span class="p">.</span><span class="nx">city</span> <span class="p">=</span> <span class="s">&#34;上海&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;p2=%#v\n&#34;</span><span class="p">,</span> <span class="nx">p2</span><span class="p">)</span> <span class="c1">//p2=&amp;main.person{name:&#34;小王子&#34;, city:&#34;上海&#34;, age:28}
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="24-取结构体的地址实例化" class="heading-element">
  <a href="#24-%e5%8f%96%e7%bb%93%e6%9e%84%e4%bd%93%e7%9a%84%e5%9c%b0%e5%9d%80%e5%ae%9e%e4%be%8b%e5%8c%96" class="heading-mark"></a>3.4 2.4 取结构体的地址实例化</h3><p>使用<code>&amp;</code>对结构体进行取地址操作相当于对该结构体类型进行了一次<code>new</code>实例化操作。</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">p3</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">person</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%T\n&#34;</span><span class="p">,</span> <span class="nx">p3</span><span class="p">)</span>     <span class="c1">//*main.person
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;p3=%#v\n&#34;</span><span class="p">,</span> <span class="nx">p3</span><span class="p">)</span> <span class="c1">//p3=&amp;main.person{name:&#34;&#34;, city:&#34;&#34;, age:0}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">p3</span><span class="p">.</span><span class="nx">name</span> <span class="p">=</span> <span class="s">&#34;七米&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">p3</span><span class="p">.</span><span class="nx">age</span> <span class="p">=</span> <span class="mi">30</span>
</span></span><span class="line"><span class="cl"><span class="nx">p3</span><span class="p">.</span><span class="nx">city</span> <span class="p">=</span> <span class="s">&#34;成都&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;p3=%#v\n&#34;</span><span class="p">,</span> <span class="nx">p3</span><span class="p">)</span> <span class="c1">//p3=&amp;main.person{name:&#34;七米&#34;, city:&#34;成都&#34;, age:30}
</span></span></span></code></pre></td></tr></table>
</div>
</div><p><code>p3.name = &quot;七米&quot;</code>其实在底层是<code>(*p3).name = &quot;七米&quot;</code>，这是Go语言帮我们实现的语法糖。</p>
<h2 id="3-结构体初始化" class="heading-element">
  <a href="#3-%e7%bb%93%e6%9e%84%e4%bd%93%e5%88%9d%e5%a7%8b%e5%8c%96" class="heading-mark"></a>4 3. 结构体初始化</h2><p>没有初始化的结构体，其成员变量都是对应其类型的零值。</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">person</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">city</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">age</span>  <span class="kt">int8</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">p4</span> <span class="nx">person</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;p4=%#v\n&#34;</span><span class="p">,</span> <span class="nx">p4</span><span class="p">)</span> <span class="c1">//p4=main.person{name:&#34;&#34;, city:&#34;&#34;, age:0}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="31-使用键值对初始化" class="heading-element">
  <a href="#31-%e4%bd%bf%e7%94%a8%e9%94%ae%e5%80%bc%e5%af%b9%e5%88%9d%e5%a7%8b%e5%8c%96" class="heading-mark"></a>4.1 3.1 使用键值对初始化</h3><ul>
<li>使用键值对对结构体进行初始化时，键对应结构体的字段，值对应该字段的初始值。</li>
</ul>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">p5</span> <span class="o">:=</span> <span class="nx">person</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span><span class="p">:</span> <span class="s">&#34;小王子&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">city</span><span class="p">:</span> <span class="s">&#34;北京&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">age</span><span class="p">:</span>  <span class="mi">18</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;p5=%#v\n&#34;</span><span class="p">,</span> <span class="nx">p5</span><span class="p">)</span> <span class="c1">//p5=main.person{name:&#34;小王子&#34;, city:&#34;北京&#34;, age:18}
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>也可以对结构体指针进行键值对初始化，例如：</li>
</ul>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">p6</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">person</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span><span class="p">:</span> <span class="s">&#34;小王子&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">city</span><span class="p">:</span> <span class="s">&#34;北京&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="nx">age</span><span class="p">:</span>  <span class="mi">18</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;p6=%#v\n&#34;</span><span class="p">,</span> <span class="nx">p6</span><span class="p">)</span> <span class="c1">//p6=&amp;main.person{name:&#34;小王子&#34;, city:&#34;北京&#34;, age:18}
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>当某些字段没有初始值的时候，该字段可以不写。此时，没有指定初始值的字段的值就是该字段类型的零值。</p>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">p7</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">person</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">city</span><span class="p">:</span> <span class="s">&#34;北京&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;p7=%#v\n&#34;</span><span class="p">,</span> <span class="nx">p7</span><span class="p">)</span> <span class="c1">//p7=&amp;main.person{name:&#34;&#34;, city:&#34;北京&#34;, age:0}
</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="32-使用值的列表初始化" class="heading-element">
  <a href="#32-%e4%bd%bf%e7%94%a8%e5%80%bc%e7%9a%84%e5%88%97%e8%a1%a8%e5%88%9d%e5%a7%8b%e5%8c%96" class="heading-mark"></a>4.2 3.2 使用值的列表初始化</h3><p>初始化结构体的时候可以简写，也就是初始化的时候不写键，直接写值：</p>
<div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">p8</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">person</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;沙河娜扎&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;北京&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="mi">28</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;p8=%#v\n&#34;</span><span class="p">,</span> <span class="nx">p8</span><span class="p">)</span> <span class="c1">//p8=&amp;main.person{name:&#34;沙河娜扎&#34;, city:&#34;北京&#34;, age:28}
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>使用这种格式初始化时，需要注意：</li>
</ul>
<ol>
<li>必须初始化结构体的所有字段。</li>
<li>初始值的填充顺序必须与字段在结构体中的声明顺序一致。</li>
<li>该方式不能和键值初始化方式混用。</li>
</ol>
<h2 id="4-结构体内存布局" class="heading-element">
  <a href="#4-%e7%bb%93%e6%9e%84%e4%bd%93%e5%86%85%e5%ad%98%e5%b8%83%e5%b1%80" class="heading-mark"></a>5 4. 结构体内存布局</h2><p>结构体占用一块连续的内存。</p>
<div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">test</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">a</span> <span class="kt">int8</span>
</span></span><span class="line"><span class="cl">	<span class="nx">b</span> <span class="kt">int8</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span> <span class="kt">int8</span>
</span></span><span class="line"><span class="cl">	<span class="nx">d</span> <span class="kt">int8</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">n</span> <span class="o">:=</span> <span class="nx">test</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;n.a %p\n&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;n.b %p\n&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;n.c %p\n&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;n.d %p\n&#34;</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">d</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>输出：</p>
<div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl">n.a 0xc0000a0060
</span></span><span class="line"><span class="cl">n.b 0xc0000a0061
</span></span><span class="line"><span class="cl">n.c 0xc0000a0062
</span></span><span class="line"><span class="cl">n.d 0xc0000a0063</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="5构造函数" class="heading-element">
  <a href="#5%e6%9e%84%e9%80%a0%e5%87%bd%e6%95%b0" class="heading-mark"></a>6 5.构造函数</h2><p>Go语言的结构体没有构造函数，我们可以自己实现。 例如，下方的代码就实现了一个<code>person</code>的构造函数。 因为<code>struct</code>是值类型，如果结构体比较复杂的话，值拷贝性能开销会比较大，所以该构造函数返回的是结构体指针类型。</p>
<div class="highlight" id="id-19"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">newPerson</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">city</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">age</span> <span class="kt">int8</span><span class="p">)</span> <span class="o">*</span><span class="nx">person</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">person</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">name</span><span class="p">:</span> <span class="nx">name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">city</span><span class="p">:</span> <span class="nx">city</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">age</span><span class="p">:</span>  <span class="nx">age</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>调用构造函数</p>
<div class="highlight" id="id-20"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">p9</span> <span class="o">:=</span> <span class="nf">newPerson</span><span class="p">(</span><span class="s">&#34;张三&#34;</span><span class="p">,</span> <span class="s">&#34;沙河&#34;</span><span class="p">,</span> <span class="mi">90</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%#v\n&#34;</span><span class="p">,</span> <span class="nx">p9</span><span class="p">)</span> <span class="c1">//&amp;main.person{name:&#34;张三&#34;, city:&#34;沙河&#34;, age:90}
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="6方法和接收者" class="heading-element">
  <a href="#6%e6%96%b9%e6%b3%95%e5%92%8c%e6%8e%a5%e6%94%b6%e8%80%85" class="heading-mark"></a>7 6.方法和接收者</h2><p>**Go语言中的<code>方法（Method）</code>是一种作用于特定类型变量的函数。**这种特定类型变量叫做<code>接收者（Receiver）</code>。接收者的概念就类似于其他语言中的<code>this</code>或者 <code>self</code>。</p>
<p>方法的定义格式如下：</p>
<div class="highlight" id="id-21"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">接收者变量</span> <span class="nx">接收者类型</span><span class="p">)</span> <span class="nx">方法名</span><span class="p">(</span><span class="nx">参数列表</span><span class="p">)</span> <span class="p">(</span><span class="nx">返回参数</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">函数体</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>其中，</p>
<ul>
<li>接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名称首字母的小写，而不是<code>self</code>、<code>this</code>之类的命名。例如，<code>Person</code>类型的接收者变量应该命名为 <code>p</code>，<code>Connector</code>类型的接收者变量应该命名为<code>c</code>等。</li>
<li>接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型。</li>
<li>方法名、参数列表、返回参数：具体格式与函数定义相同。</li>
</ul>
<p>举个例子：</p>
<div class="highlight" id="id-22"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//Person 结构体
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">age</span>  <span class="kt">int8</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//NewPerson 构造函数
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">NewPerson</span><span class="p">(</span><span class="nx">name</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">age</span> <span class="kt">int8</span><span class="p">)</span> <span class="o">*</span><span class="nx">Person</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">Person</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">name</span><span class="p">:</span> <span class="nx">name</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">age</span><span class="p">:</span>  <span class="nx">age</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//Dream Person做梦的方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">Person</span><span class="p">)</span> <span class="nf">Dream</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s的梦想是学好Go语言！\n&#34;</span><span class="p">,</span> <span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p1</span> <span class="o">:=</span> <span class="nf">NewPerson</span><span class="p">(</span><span class="s">&#34;Evan&#34;</span><span class="p">,</span> <span class="mi">27</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p1</span><span class="p">.</span><span class="nf">Dream</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>方法与函数的区别是，函数不属于任何类型，方法属于特定的类型。</p>
<h3 id="61-指针类型的接收者" class="heading-element">
  <a href="#61-%e6%8c%87%e9%92%88%e7%b1%bb%e5%9e%8b%e7%9a%84%e6%8e%a5%e6%94%b6%e8%80%85" class="heading-mark"></a>7.1 6.1 指针类型的接收者</h3><p>指针类型的接收者由一个结构体的指针组成，由于指针的特性，调用方法时修改接收者指针的任意成员变量，在方法结束后，修改都是有效的。这种方式就十分接近于其他语言中面向对象中的<code>this</code>或者<code>self</code>。 例如我们为<code>Person</code>添加一个<code>SetAge</code>方法，来修改实例变量的年龄。</p>
<div class="highlight" id="id-23"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// SetAge 设置p的年龄
</span></span></span><span class="line"><span class="cl"><span class="c1">// 使用指针接收者
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Person</span><span class="p">)</span> <span class="nf">SetAge</span><span class="p">(</span><span class="nx">newAge</span> <span class="kt">int8</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p</span><span class="p">.</span><span class="nx">age</span> <span class="p">=</span> <span class="nx">newAge</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>调用该方法：</p>
<div class="highlight" id="id-24"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p1</span> <span class="o">:=</span> <span class="nf">NewPerson</span><span class="p">(</span><span class="s">&#34;小王子&#34;</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">p1</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span> <span class="c1">// 25
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">p1</span><span class="p">.</span><span class="nf">SetAge</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">p1</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span> <span class="c1">// 30
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="62-值类型的接收者" class="heading-element">
  <a href="#62-%e5%80%bc%e7%b1%bb%e5%9e%8b%e7%9a%84%e6%8e%a5%e6%94%b6%e8%80%85" class="heading-mark"></a>7.2 6.2 值类型的接收者</h3><p>当方法作用于值类型接收者时，Go语言会在代码运行时将接收者的值复制一份。<strong>在值类型接收者的方法中可以获取接收者的成员值，但修改操作只是针对副本，无法修改接收者变量本身。</strong></p>
<div class="highlight" id="id-25"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// SetAge2 设置p的年龄
</span></span></span><span class="line"><span class="cl"><span class="c1">// 使用值接收者
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="nx">Person</span><span class="p">)</span> <span class="nf">SetAge2</span><span class="p">(</span><span class="nx">newAge</span> <span class="kt">int8</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p</span><span class="p">.</span><span class="nx">age</span> <span class="p">=</span> <span class="nx">newAge</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p1</span> <span class="o">:=</span> <span class="nf">NewPerson</span><span class="p">(</span><span class="s">&#34;小王子&#34;</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p1</span><span class="p">.</span><span class="nf">Dream</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">p1</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span> <span class="c1">// 25
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">p1</span><span class="p">.</span><span class="nf">SetAge2</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="c1">// (*p1).SetAge2(30)
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">p1</span><span class="p">.</span><span class="nx">age</span><span class="p">)</span> <span class="c1">// 25
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="63-什么时候应该使用指针类型接收者" class="heading-element">
  <a href="#63-%e4%bb%80%e4%b9%88%e6%97%b6%e5%80%99%e5%ba%94%e8%af%a5%e4%bd%bf%e7%94%a8%e6%8c%87%e9%92%88%e7%b1%bb%e5%9e%8b%e6%8e%a5%e6%94%b6%e8%80%85" class="heading-mark"></a>7.3 6.3 什么时候应该使用指针类型接收者</h3><ol>
<li>需要修改接收者中的值</li>
<li>接收者是拷贝代价比较大的大对象</li>
<li>保证一致性，如果有某个方法使用了指针接收者，那么其他的方法也应该使用指针接收者。</li>
</ol>
<h3 id="64-任意类型添加方法" class="heading-element">
  <a href="#64-%e4%bb%bb%e6%84%8f%e7%b1%bb%e5%9e%8b%e6%b7%bb%e5%8a%a0%e6%96%b9%e6%b3%95" class="heading-mark"></a>7.4 6.4 任意类型添加方法</h3><p>在Go语言中，接收者的类型可以是任何类型，不仅仅是结构体，任何类型都可以拥有方法。 举个例子，我们基于内置的<code>int</code>类型使用type关键字可以定义新的自定义类型，然后为我们的自定义类型添加方法。</p>
<div class="highlight" id="id-26"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//MyInt 将int定义为自定义MyInt类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">MyInt</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//SayHello 为MyInt添加一个SayHello的方法
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">m</span> <span class="nx">MyInt</span><span class="p">)</span> <span class="nf">SayHello</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Hello, 我是一个int。&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">m1</span> <span class="nx">MyInt</span>
</span></span><span class="line"><span class="cl">	<span class="nx">m1</span><span class="p">.</span><span class="nf">SayHello</span><span class="p">()</span> <span class="c1">//Hello, 我是一个int。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">m1</span> <span class="p">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%#v  %T\n&#34;</span><span class="p">,</span> <span class="nx">m1</span><span class="p">,</span> <span class="nx">m1</span><span class="p">)</span> <span class="c1">//100  main.MyInt
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>注意事项：</strong> 非本地类型不能定义方法，也就是说我们不能给别的包的类型定义方法。</p>
<h2 id="7-结构体的匿名字段" class="heading-element">
  <a href="#7-%e7%bb%93%e6%9e%84%e4%bd%93%e7%9a%84%e5%8c%bf%e5%90%8d%e5%ad%97%e6%ae%b5" class="heading-mark"></a>8 7. 结构体的匿名字段</h2><p>结构体允许其成员字段在声明时没有字段名而只有类型，这种没有名字的字段就称为匿名字段。</p>
<div class="highlight" id="id-27"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//Person 结构体Person类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p1</span> <span class="o">:=</span> <span class="nx">Person</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;小王子&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="mi">18</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%#v\n&#34;</span><span class="p">,</span> <span class="nx">p1</span><span class="p">)</span>        <span class="c1">//main.Person{string:&#34;北京&#34;, int:18}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">p1</span><span class="p">.</span><span class="kt">string</span><span class="p">,</span> <span class="nx">p1</span><span class="p">.</span><span class="kt">int</span><span class="p">)</span> <span class="c1">//北京 18
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>**注意：**这里匿名字段的说法并不代表没有字段名，而是默认会采用类型名作为字段名，结构体要求字段名称必须唯一，因此一个结构体中同种类型的匿名字段只能有一个。</p>
<h2 id="8-嵌套结构体" class="heading-element">
  <a href="#8-%e5%b5%8c%e5%a5%97%e7%bb%93%e6%9e%84%e4%bd%93" class="heading-mark"></a>9 8. 嵌套结构体</h2><blockquote>
<p>结构体嵌入接口值，结构体初始化后可以返回嵌入的接口值类型</p>
</blockquote>
<p>一个结构体中可以嵌套包含另一个结构体或结构体指针，就像下面的示例代码那样。</p>
<div class="highlight" id="id-28"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//Address 地址结构体
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Address</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Province</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">City</span>     <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//User 用户结构体
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span>    <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Gender</span>  <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Address</span> <span class="nx">Address</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">user1</span> <span class="o">:=</span> <span class="nx">User</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Name</span><span class="p">:</span>   <span class="s">&#34;小王子&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Gender</span><span class="p">:</span> <span class="s">&#34;男&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Address</span><span class="p">:</span> <span class="nx">Address</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Province</span><span class="p">:</span> <span class="s">&#34;山东&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">City</span><span class="p">:</span>     <span class="s">&#34;威海&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;user1=%#v\n&#34;</span><span class="p">,</span> <span class="nx">user1</span><span class="p">)</span><span class="c1">//user1=main.User{Name:&#34;小王子&#34;, Gender:&#34;男&#34;, Address:main.Address{Province:&#34;山东&#34;, City:&#34;威海&#34;}}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="81-嵌套匿名字段" class="heading-element">
  <a href="#81-%e5%b5%8c%e5%a5%97%e5%8c%bf%e5%90%8d%e5%ad%97%e6%ae%b5" class="heading-mark"></a>9.1 8.1 嵌套匿名字段</h3><p>上面user结构体中嵌套的<code>Address</code>结构体也可以采用匿名字段的方式，例如：</p>
<div class="highlight" id="id-29"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//Address 地址结构体
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Address</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Province</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">City</span>     <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//User 用户结构体
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span>    <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Gender</span>  <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Address</span> <span class="c1">//匿名字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">user2</span> <span class="nx">User</span>
</span></span><span class="line"><span class="cl">	<span class="nx">user2</span><span class="p">.</span><span class="nx">Name</span> <span class="p">=</span> <span class="s">&#34;小王子&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">user2</span><span class="p">.</span><span class="nx">Gender</span> <span class="p">=</span> <span class="s">&#34;男&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">user2</span><span class="p">.</span><span class="nx">Address</span><span class="p">.</span><span class="nx">Province</span> <span class="p">=</span> <span class="s">&#34;山东&#34;</span>    <span class="c1">// 匿名字段默认使用类型名作为字段名
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">user2</span><span class="p">.</span><span class="nx">City</span> <span class="p">=</span> <span class="s">&#34;威海&#34;</span>                <span class="c1">// 匿名字段可以省略
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;user2=%#v\n&#34;</span><span class="p">,</span> <span class="nx">user2</span><span class="p">)</span> <span class="c1">//user2=main.User{Name:&#34;小王子&#34;, Gender:&#34;男&#34;, Address:main.Address{Province:&#34;山东&#34;, City:&#34;威海&#34;}}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>当访问结构体成员时会先在结构体中查找该字段，找不到再去嵌套的匿名字段中查找。</strong></p>
<h3 id="82-嵌套结构体的字段名冲突" class="heading-element">
  <a href="#82-%e5%b5%8c%e5%a5%97%e7%bb%93%e6%9e%84%e4%bd%93%e7%9a%84%e5%ad%97%e6%ae%b5%e5%90%8d%e5%86%b2%e7%aa%81" class="heading-mark"></a>9.2 8.2 嵌套结构体的字段名冲突</h3><p>嵌套结构体内部可能存在相同的字段名。在这种情况下为了避免歧义需要通过指定具体的内嵌结构体字段名。</p>
<div class="highlight" id="id-30"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//Address 地址结构体
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Address</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Province</span>   <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">City</span>       <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">CreateTime</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//Email 邮箱结构体
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Email</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Account</span>    <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">CreateTime</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//User 用户结构体
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span>   <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Gender</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Address</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Email</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">user3</span> <span class="nx">User</span>
</span></span><span class="line"><span class="cl">	<span class="nx">user3</span><span class="p">.</span><span class="nx">Name</span> <span class="p">=</span> <span class="s">&#34;沙河娜扎&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">user3</span><span class="p">.</span><span class="nx">Gender</span> <span class="p">=</span> <span class="s">&#34;男&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// user3.CreateTime = &#34;2019&#34; //ambiguous selector user3.CreateTime
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">user3</span><span class="p">.</span><span class="nx">Address</span><span class="p">.</span><span class="nx">CreateTime</span> <span class="p">=</span> <span class="s">&#34;2000&#34;</span> <span class="c1">//指定Address结构体中的CreateTime
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">user3</span><span class="p">.</span><span class="nx">Email</span><span class="p">.</span><span class="nx">CreateTime</span> <span class="p">=</span> <span class="s">&#34;2000&#34;</span>   <span class="c1">//指定Email结构体中的CreateTime
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="9-结构体的继承" class="heading-element">
  <a href="#9-%e7%bb%93%e6%9e%84%e4%bd%93%e7%9a%84%e7%bb%a7%e6%89%bf" class="heading-mark"></a>10 9. 结构体的“继承”</h2><p>Go语言中使用结构体也可以实现其他编程语言中面向对象的继承。</p>
<div class="highlight" id="id-31"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//Animal 动物
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Animal</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">a</span> <span class="o">*</span><span class="nx">Animal</span><span class="p">)</span> <span class="nf">move</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s会动！\n&#34;</span><span class="p">,</span> <span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//Dog 狗
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Dog</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Feet</span>    <span class="kt">int8</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="nx">Animal</span> <span class="c1">//通过嵌套匿名结构体实现继承
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">d</span> <span class="o">*</span><span class="nx">Dog</span><span class="p">)</span> <span class="nf">wang</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%s会汪汪汪~\n&#34;</span><span class="p">,</span> <span class="nx">d</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">d1</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Dog</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Feet</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Animal</span><span class="p">:</span> <span class="o">&amp;</span><span class="nx">Animal</span><span class="p">{</span> <span class="c1">//注意嵌套的是结构体指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>			<span class="nx">name</span><span class="p">:</span> <span class="s">&#34;乐乐&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">d1</span><span class="p">.</span><span class="nf">wang</span><span class="p">()</span> <span class="c1">//乐乐会汪汪汪~
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">d1</span><span class="p">.</span><span class="nf">move</span><span class="p">()</span> <span class="c1">//乐乐会动！
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="10-结构体与json序列化" class="heading-element">
  <a href="#10-%e7%bb%93%e6%9e%84%e4%bd%93%e4%b8%8ejson%e5%ba%8f%e5%88%97%e5%8c%96" class="heading-mark"></a>11 10. 结构体与JSON序列化</h2><p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。易于人阅读和编写。同时也易于机器解析和生成。JSON键值对是用来保存JS对象的一种方式，键/值对组合中的键名写在前面并用双引号<code>&quot;&quot;</code>包裹，使用冒号<code>:</code>分隔，然后紧接着值；多个键值之间使用英文<code>,</code>分隔。</p>
<div class="highlight" id="id-32"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//Student 学生
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Student</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ID</span>     <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Gender</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span>   <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//Class 班级
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Class</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Title</span>    <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Students</span> <span class="p">[]</span><span class="o">*</span><span class="nx">Student</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Class</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Title</span><span class="p">:</span>    <span class="s">&#34;101&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Students</span><span class="p">:</span> <span class="nb">make</span><span class="p">([]</span><span class="o">*</span><span class="nx">Student</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">200</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">stu</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Student</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Name</span><span class="p">:</span>   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;stu%02d&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">),</span>
</span></span><span class="line"><span class="cl">			<span class="nx">Gender</span><span class="p">:</span> <span class="s">&#34;男&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">ID</span><span class="p">:</span>     <span class="nx">i</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">}</span>
</span></span><span class="line"><span class="cl">		<span class="nx">c</span><span class="p">.</span><span class="nx">Students</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Students</span><span class="p">,</span> <span class="nx">stu</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//JSON序列化：结构体--&gt;JSON格式的字符串
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;json marshal failed&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;json:%s\n&#34;</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="c1">//JSON反序列化：JSON格式的字符串--&gt;结构体
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">str</span> <span class="o">:=</span> <span class="s">`{&#34;Title&#34;:&#34;101&#34;,&#34;Students&#34;:[{&#34;ID&#34;:0,&#34;Gender&#34;:&#34;男&#34;,&#34;Name&#34;:&#34;stu00&#34;},{&#34;ID&#34;:1,&#34;Gender&#34;:&#34;男&#34;,&#34;Name&#34;:&#34;stu01&#34;},{&#34;ID&#34;:2,&#34;Gender&#34;:&#34;男&#34;,&#34;Name&#34;:&#34;stu02&#34;},{&#34;ID&#34;:3,&#34;Gender&#34;:&#34;男&#34;,&#34;Name&#34;:&#34;stu03&#34;},{&#34;ID&#34;:4,&#34;Gender&#34;:&#34;男&#34;,&#34;Name&#34;:&#34;stu04&#34;},{&#34;ID&#34;:5,&#34;Gender&#34;:&#34;男&#34;,&#34;Name&#34;:&#34;stu05&#34;},{&#34;ID&#34;:6,&#34;Gender&#34;:&#34;男&#34;,&#34;Name&#34;:&#34;stu06&#34;},{&#34;ID&#34;:7,&#34;Gender&#34;:&#34;男&#34;,&#34;Name&#34;:&#34;stu07&#34;},{&#34;ID&#34;:8,&#34;Gender&#34;:&#34;男&#34;,&#34;Name&#34;:&#34;stu08&#34;},{&#34;ID&#34;:9,&#34;Gender&#34;:&#34;男&#34;,&#34;Name&#34;:&#34;stu09&#34;}]}`</span>
</span></span><span class="line"><span class="cl">	<span class="nx">c1</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Class</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">err</span> <span class="p">=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">str</span><span class="p">),</span> <span class="nx">c1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;json unmarshal failed!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%#v\n&#34;</span><span class="p">,</span> <span class="nx">c1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="11-结构体标签tag" class="heading-element">
  <a href="#11-%e7%bb%93%e6%9e%84%e4%bd%93%e6%a0%87%e7%ad%betag" class="heading-mark"></a>12 11. 结构体标签（Tag）</h2><p><code>Tag</code>是结构体的元信息，可以在运行的时候通过反射的机制读取出来。 <code>Tag</code>在结构体字段的后方定义，由一对<strong>反引号</strong>包裹起来，具体的格式如下：</p>
<div class="highlight" id="id-33"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="sb">`</span>key1:<span class="s2">&#34;value1&#34;</span> key2:<span class="s2">&#34;value2&#34;</span><span class="sb">`</span></span></span></code></pre></td></tr></table>
</div>
</div><p>结构体tag由一个或多个键值对组成。键与值使用冒号分隔，值用双引号括起来。同一个结构体字段可以设置多个键值对tag，不同的键值对之间使用空格分隔。</p>
<p><strong>注意事项：</strong> 为结构体编写<code>Tag</code>时，必须严格遵守键值对的规则。结构体标签的解析代码的容错能力很差，一旦格式写错，编译和运行时都不会提示任何错误，通过反射也无法正确取值。例如不要在key和value之间添加空格。</p>
<p>例如我们为<code>Student</code>结构体的每个字段定义json序列化时使用的Tag：</p>
<div class="highlight" id="id-34"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//Student 学生
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">Student</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">ID</span>     <span class="kt">int</span>    <span class="s">`json:&#34;id&#34;`</span> <span class="c1">//通过指定tag实现json序列化该字段时的key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">Gender</span> <span class="kt">string</span> <span class="c1">//json序列化是默认使用字段名作为key
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">name</span>   <span class="kt">string</span> <span class="c1">//私有不能被json包访问
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">s1</span> <span class="o">:=</span> <span class="nx">Student</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">ID</span><span class="p">:</span>     <span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Gender</span><span class="p">:</span> <span class="s">&#34;男&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="nx">name</span><span class="p">:</span>   <span class="s">&#34;沙河娜扎&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">data</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">s1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;json marshal failed!&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;json str:%s\n&#34;</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="c1">//json str:{&#34;id&#34;:1,&#34;Gender&#34;:&#34;男&#34;}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="12-结构体和方法补充知识点" class="heading-element">
  <a href="#12-%e7%bb%93%e6%9e%84%e4%bd%93%e5%92%8c%e6%96%b9%e6%b3%95%e8%a1%a5%e5%85%85%e7%9f%a5%e8%af%86%e7%82%b9" class="heading-mark"></a>13 12. 结构体和方法补充知识点</h2><p>因为slice和map这两种数据类型都包含了指向底层数据的指针，因此我们在需要复制它们时要特别注意。我们来看下面的例子：</p>
<div class="highlight" id="id-35"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span>   <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">age</span>    <span class="kt">int8</span>
</span></span><span class="line"><span class="cl">	<span class="nx">dreams</span> <span class="p">[]</span><span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Person</span><span class="p">)</span> <span class="nf">SetDreams</span><span class="p">(</span><span class="nx">dreams</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p</span><span class="p">.</span><span class="nx">dreams</span> <span class="p">=</span> <span class="nx">dreams</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p1</span> <span class="o">:=</span> <span class="nx">Person</span><span class="p">{</span><span class="nx">name</span><span class="p">:</span> <span class="s">&#34;小王子&#34;</span><span class="p">,</span> <span class="nx">age</span><span class="p">:</span> <span class="mi">18</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">data</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;吃饭&#34;</span><span class="p">,</span> <span class="s">&#34;睡觉&#34;</span><span class="p">,</span> <span class="s">&#34;打豆豆&#34;</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p1</span><span class="p">.</span><span class="nf">SetDreams</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">// 你真的想要修改 p1.dreams 吗？
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;不睡觉&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">p1</span><span class="p">.</span><span class="nx">dreams</span><span class="p">)</span>  <span class="c1">// ?
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>正确的做法是在方法中使用传入的slice的拷贝进行结构体赋值。</p>
<div class="highlight" id="id-36"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Person</span><span class="p">)</span> <span class="nf">SetDreams</span><span class="p">(</span><span class="nx">dreams</span> <span class="p">[]</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">p</span><span class="p">.</span><span class="nx">dreams</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="nx">dreams</span><span class="p">))</span>
</span></span><span class="line"><span class="cl">	<span class="nb">copy</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">dreams</span><span class="p">,</span> <span class="nx">dreams</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>同样的问题也存在于返回值slice和map的情况，在实际编码过程中一定要注意这个问题。</p>
]]></description>
</item>
<item>
  <title>3-3. 数组和切片</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515175051/</link>
  <pubDate>Thu, 15 May 2025 17:50:51 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515175051/</guid>
  <description><![CDATA[<h1 id="数组" class="heading-element">
  <a href="#%e6%95%b0%e7%bb%84" class="heading-mark"></a>数组</h1><ul>
<li>
<p>数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型例如整型、字符串或者自定义类型。</p>
</li>
<li>
<p><strong>声明数组的时候必须声明长度或者用[&hellip;], 不然就是切片.</strong></p>
</li>
<li>
<p>初始化数组:</p>
</li>
</ul>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">balance</span> <span class="p">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="kt">float32</span><span class="p">{</span><span class="mf">1000.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">,</span> <span class="mf">50.0</span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果数组长度不确定，可以使用 <strong>&hellip;</strong> 代替数组的长度，编译器会根据元素个数自行推断数组的长度：</li>
</ul>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">balance</span> <span class="o">:=</span> <span class="p">[</span><span class="o">...</span><span class="p">]</span><span class="kt">float32</span><span class="p">{</span><span class="mf">1000.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">,</span> <span class="mf">50.0</span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果设置了数组的长度，我们还可以通过指定下标来初始化元素：</li>
</ul>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//  将索引为 1 和 3 的元素初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">balance</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="kt">float32</span><span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="mf">2.0</span><span class="p">,</span><span class="mi">3</span><span class="p">:</span><span class="mf">7.0</span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h1 id="切片slice" class="heading-element">
  <a href="#%e5%88%87%e7%89%87slice" class="heading-mark"></a>切片(slice)</h1><ul>
<li>
<p>Go 语言切片是对数组的抽象。也可以被看做为&quot;动态数组&quot;,数组的长度不可改变,切片长度可变</p>
</li>
<li>
<p>在做函数调用时，slice 按引用传递，array 按值传递：</p>
</li>
<li>
<p><strong>切片是对数组的引用,切片本身并不包含任何元素</strong></p>
</li>
<li>
<p>切片的结构包括三个部分:</p>
<ul>
<li><strong>地址</strong>: 切片的地址一般指切片中的第一个元素所指向的内存地址, 用十六进制表示;</li>
<li><strong>长度</strong>: 切片实际存在元素的个数;</li>
<li><strong>容量</strong>: <strong>从切片的起始元素开始到其底层数组中最后一个元素的个数</strong>;</li>
</ul>
</li>
<li>
<p><strong>切片的长度和容量都不是固定的,追加元素会使切片的长度和容量都增大</strong></p>
</li>
<li>
<p>切片如果是从其他数组或者切片中来的话, 切片容量增加但是所引用数组容量不变</p>
<ul>
<li>切片如果是从其他数组或者切片中来的话, 当切片长度大于多引用的数组容量时; 切片容量会以 <strong>切片新容量=2*切片当前容量</strong> 的速度扩容</li>
</ul>
</li>
<li>
<p>切片如果是从其他数组或者切片中来的话, 当前片长量大于所引用数组的容量时, 切片中的第一个元素所指向的内存地址会发生改变;</p>
</li>
</ul>
<p><strong>定义切片</strong></p>
<ul>
<li>声明一个未指定大小的数组来定义切片(<strong>切片不需要说明长度</strong>)：</li>
</ul>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">identifier</span> <span class="p">[]</span><span class="kd">type</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>使用 <strong>make()</strong> 函数来创建切片:</li>
</ul>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">slice1</span> <span class="p">[]</span><span class="kd">type</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kd">type</span><span class="p">,</span> <span class="nx">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">也可以简写为</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">slice1</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kd">type</span><span class="p">,</span> <span class="nx">len</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>也可以指定容量，其中 <strong>capacity</strong> 为可选参数。</li>
</ul>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nb">make</span><span class="p">([]</span><span class="nx">T</span><span class="p">,</span> <span class="nx">length</span><span class="p">,</span> <span class="nx">capacity</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">//这里 len 是数组的长度并且也是切片的初始长度。
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>特殊</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>  <span class="c1">// 声明切片索引为2的写入1
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="切片函数" class="heading-element">
  <a href="#%e5%88%87%e7%89%87%e5%87%bd%e6%95%b0" class="heading-mark"></a>0.1 切片函数</h3><ul>
<li>
<p>len()  获取长度</p>
</li>
<li>
<p>cap()  获取切片容量,即最大长度</p>
</li>
<li>
<p>append()  往切片尾部添加一个元素</p>
</li>
<li>
<p>copy()   <em>拷贝 numbers 的内容到 numbers1</em></p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="cm">/* 拷贝 numbers 的内容到 numbers1 */</span>
</span></span><span class="line"><span class="cl"><span class="nb">copy</span><span class="p">(</span><span class="nx">numbers1</span><span class="p">,</span><span class="nx">numbers</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>合并多个数组：</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">arr1</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">arr2</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">arr3</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">s1</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nb">append</span><span class="p">(</span><span class="nx">arr1</span><span class="p">,</span> <span class="nx">arr2</span><span class="o">...</span><span class="p">),</span> <span class="nx">arr3</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;s1: %v\n&#34;</span><span class="p">,</span> <span class="nx">s1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// s1: [1 2 3 4 5 6 7 8 9]
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>从切片中删除元素</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sli1</span><span class="o">:=</span><span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">c</span><span class="o">:=</span><span class="nb">append</span><span class="p">(</span><span class="nx">sli1</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">],</span><span class="nx">sli1</span><span class="p">[</span><span class="mi">2</span><span class="p">:]</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// [1 3]
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>插入切片头部</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">:=</span><span class="nb">append</span><span class="p">([]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">},</span><span class="nx">a</span><span class="o">...</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>插入切片任意位置</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">:=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="c1">//先把原来的切片长度+1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">index</span> <span class="o">:=</span> <span class="mi">2</span> <span class="c1">//要把新元素插入到第二个位置
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nb">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">index</span><span class="o">+</span><span class="mi">1</span><span class="p">:],</span> <span class="nx">a</span><span class="p">[</span><span class="nx">index</span><span class="p">:])</span>
</span></span><span class="line"><span class="cl"><span class="nx">a</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span> <span class="p">=</span> <span class="mi">0</span> <span class="c1">//新元素的值是0
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/bigox.top-20220225175824520.svg?size=large" data-thumbnail="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/bigox.top-20220225175824520.svg?size=small" data-sub-html="<h2>https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/bigox.top-20220225175824520.svg</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/bigox.top-20220225175824520.svg" alt="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/bigox.top-20220225175824520.svg" srcset="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/bigox.top-20220225175824520.svg?size=small, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/bigox.top-20220225175824520.svg?size=medium 1.5x, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/bigox.top-20220225175824520.svg?size=large 2x" data-title="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/bigox.top-20220225175824520.svg" class="suffix-invalid suffix-invalid__small suffix-invalid__large" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
]]></description>
</item>
<item>
  <title>3-2. 函数</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515174546/</link>
  <pubDate>Thu, 15 May 2025 17:45:46 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515174546/</guid>
  <description><![CDATA[<h1 id="3go中的指针" class="heading-element">
  <a href="#3go%e4%b8%ad%e7%9a%84%e6%8c%87%e9%92%88" class="heading-mark"></a>3.Go中的指针</h1><p>要搞明白Go语言中的指针需要先知道三个概念</p>
<ul>
<li>指针地址</li>
<li>指针类型</li>
<li>指针取值</li>
</ul>
<p>Go语言中的指针操作非常简单，我们只需要记住两个符号：&amp;：取地址，*：根据地址取值</p>
<h3 id="关于指针" class="heading-element">
  <a href="#%e5%85%b3%e4%ba%8e%e6%8c%87%e9%92%88" class="heading-mark"></a>0.1 关于指针</h3><ul>
<li>
<p>我们知道变量是用来存储数据的，变量的本质是给存储数据的内存地址起了一个好记的别名。比如我们定义了一个变量a:=10，这个时候可以直接通过a这个变量来读取内存中保存的10这个值。在计算机底层a这个变量其实对应了一个内存地址。</p>
</li>
<li>
<p>指针也是一个变量，但它是一种特殊的变量，它存储的数据不是一个普通的值，而<strong>是另一个变量的内存地址。</strong></p>
</li>
</ul>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210328102046113.png?size=large" data-thumbnail="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210328102046113.png?size=small" data-sub-html="<h2>image-20210328102046113</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210328102046113.png" alt="image-20210328102046113" srcset="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210328102046113.png?size=small, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210328102046113.png?size=medium 1.5x, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210328102046113.png?size=large 2x" data-title="image-20210328102046113" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<h3 id="指针地址和指针类型" class="heading-element">
  <a href="#%e6%8c%87%e9%92%88%e5%9c%b0%e5%9d%80%e5%92%8c%e6%8c%87%e9%92%88%e7%b1%bb%e5%9e%8b" class="heading-mark"></a>0.2 指针地址和指针类型</h3><ul>
<li>
<p>每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。</p>
</li>
<li>
<p>Go 语言中使用&amp;字符放在变量前面对变量进行取地址操作。Go语言中的值类型（int、float、bool、string、array、struct）都有对应的指针类型，如：</p>
</li>
</ul>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">*int、，*int64、*string等</span></span></code></pre></td></tr></table>
</div>
</div><p>取变量指针的语法如下：</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">ptr</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">v</span></span></span></code></pre></td></tr></table>
</div>
</div><p>其中：</p>
<ul>
<li>v：代表被取地址的变量，类型为T</li>
<li>ptr：用于接收地址的变量，ptr的类型就为*T，被称做T的指针类型。* 代表指针</li>
</ul>
<p>举个例子：</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20200721084549011.png?size=large" data-thumbnail="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20200721084549011.png?size=small" data-sub-html="<h2>image-20200721084549011</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20200721084549011.png" alt="image-20200721084549011" srcset="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20200721084549011.png?size=small, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20200721084549011.png?size=medium 1.5x, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20200721084549011.png?size=large 2x" data-title="image-20200721084549011" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">a</span> <span class="p">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">b</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">a</span>
</span></span><span class="line"><span class="cl">	<span class="nb">println</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">a</span><span class="p">)</span> 	<span class="c1">//0xc00003df60
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nb">println</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">b</span><span class="p">)</span>		<span class="c1">//0xc00003df68
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nb">println</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>		<span class="c1">//0xc00003df60
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nb">println</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">b</span><span class="p">))</span>	<span class="c1">//0xc00003df60
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="指针取值" class="heading-element">
  <a href="#%e6%8c%87%e9%92%88%e5%8f%96%e5%80%bc" class="heading-mark"></a>0.3 指针取值</h3><p>在对普通变量进行&amp;操作符取地址后，会获得这个变量指针，然后可以对指针使用*操作，也就是指针取值</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 指针取值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">c</span> <span class="p">=</span> <span class="mi">20</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 得到c的地址，赋值给d
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">d</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">c</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 打印d的值，也就是c的地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 取出d指针所对应的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="o">*</span><span class="nx">d</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// c对应地址的值，改成30
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">*</span><span class="nx">d</span> <span class="p">=</span> <span class="mi">30</span>
</span></span><span class="line"><span class="cl"><span class="c1">// c已经变成30了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>改变内存中的值，会直接改变原来的变量值</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 这个类似于值传递
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">fn4</span><span class="p">(</span><span class="nx">x</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">x</span> <span class="p">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 这个类似于引用数据类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">fn5</span><span class="p">(</span><span class="nx">x</span> <span class="o">*</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="nx">x</span> <span class="p">=</span> <span class="mi">20</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">x</span> <span class="o">:=</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl">	<span class="nf">fn4</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">fn5</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们创建了两个方法，一个是传入局部变量，一个是传入指针类型，最后运行得到的结果</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="m">5</span>
</span></span><span class="line"><span class="cl"><span class="m">20</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="new和make函数" class="heading-element">
  <a href="#new%e5%92%8cmake%e5%87%bd%e6%95%b0" class="heading-mark"></a>0.4 new和make函数</h3><p>需要注意的是，指针必须在创建内存后才可以使用，这个和 slice 和 map是一样的</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 引用数据类型map、slice等，必须使用make分配空间，才能够使用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">userInfo</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">userInfo</span><span class="p">[</span><span class="s">&#34;userName&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;zhangsan&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">userInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">array</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>对于指针变量来说</p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 指针变量初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">a</span> <span class="o">*</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="o">*</span><span class="nx">a</span> <span class="p">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>执行上面的代码会引发panic，为什么呢？在Go语言中对于引用类型的变量，我们在使用的时候不仅要声明它，还要为它分配内存空间，否则我们的值就没办法存储。而对于值类型的声明不需要分配内存空间，是因为它们在声明的时候已经默认分配好了内存空间。要分配内存，就引出来今天的new和make。Go 语言中new和make是内建的两个函数，主要用来分配内存。</p>
<p>这个时候，我们就需要使用new关键字来分配内存，new是一个内置的函数，它的函数签名如下：</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nb">new</span><span class="p">(</span><span class="nx">Type</span><span class="p">)</span> <span class="o">*</span><span class="nx">Type</span></span></span></code></pre></td></tr></table>
</div>
</div><p>其中</p>
<ul>
<li>Type表示类型，new函数只接受一个参数，这个参数是一个类型</li>
<li>*Type表示类型指针，new函数返回一个指向该类型内存地址的指针</li>
</ul>
<p>实际开发中new函数不太常用，使用new函数得到的是一个类型的指针，并且该指针对应的值为该类型的零值。举个例子：</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 使用new关键字创建指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">aPoint</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">bPoint</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%T \n&#34;</span><span class="p">,</span> <span class="nx">aPoint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%T \n&#34;</span><span class="p">,</span> <span class="nx">bPoint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="o">*</span><span class="nx">aPoint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="o">*</span><span class="nx">bPoint</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>本节开始的示例代码中  var a *int 只是声明了一个指针变量a但是没有初始化，指针作为引用类型需要初始化后才会拥有内存空间，才可以给它赋值。应该按照如下方式使用内置的</p>
<h3 id="make和new的区别" class="heading-element">
  <a href="#make%e5%92%8cnew%e7%9a%84%e5%8c%ba%e5%88%ab" class="heading-mark"></a>0.5 make和new的区别</h3><ul>
<li>两者都是用来做内存分配的</li>
<li>make只能用于slice、map以及channel的初始化，返回的还是这三个引用类型的本身</li>
<li>而new用于类型的内存分配，并且内存赌赢的值为类型的零值，返回的是指向类型的指针</li>
</ul>
<h1 id="函数" class="heading-element">
  <a href="#%e5%87%bd%e6%95%b0" class="heading-mark"></a>函数</h1><ul>
<li>
<p>函数是基本的代码块，Go 语言最少有个 main() 函数。</p>
</li>
<li>
<p>函数如果使用参数，该变量可称为函数的形参。</p>
<ul>
<li>形参就像定义在函数体内的局部变量。</li>
</ul>
</li>
<li>
<p>调用函数，可以通过两种方式来传递参数：</p>
<table>
<thead>
<tr>
<th style="text-align:left">传递类型</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/go/go-function-call-by-value.html"target="_blank" rel="external nofollow noopener noreferrer">值传递<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></td>
<td style="text-align:left">值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/go/go-function-call-by-reference.html"target="_blank" rel="external nofollow noopener noreferrer">引用传递<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></td>
<td style="text-align:left">引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。</td>
</tr>
</tbody>
</table>
<p>默认情况下，Go 语言使用的是值传递，即在调用过程中不会影响到实际参数。</p>
</li>
<li>
<h3 id="匿名函数" class="heading-element">
  <a href="#%e5%8c%bf%e5%90%8d%e5%87%bd%e6%95%b0" class="heading-mark"></a>0.6 匿名函数</h3></li>
<li>
<p>函数也是一种类型, 可以定义一个函数类型的变量</p>
</li>
<li>
<p>匿名函数就是一个没有名字的函数</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">	<span class="nx">f1</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nf">f1</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="值传递" class="heading-element">
  <a href="#%e5%80%bc%e4%bc%a0%e9%80%92" class="heading-mark"></a>0.7 值传递</h3><ul>
<li>
<p>传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</p>
</li>
<li>
<p><strong>Go 语言使用的是值传递，即在调用过程中不会影响到实际参数。</strong></p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="cm">/* 定义局部变量 */</span>
</span></span><span class="line"><span class="cl">   <span class="kd">var</span> <span class="nx">a</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">   <span class="kd">var</span> <span class="nx">b</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">200</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;交换前 a 的值为 : %d\n&#34;</span><span class="p">,</span> <span class="nx">a</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;交换前 b 的值为 : %d\n&#34;</span><span class="p">,</span> <span class="nx">b</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="cm">/* 通过调用函数来交换值 */</span>
</span></span><span class="line"><span class="cl">   <span class="nf">swap</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;交换后 a 的值 : %d\n&#34;</span><span class="p">,</span> <span class="nx">a</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;交换后 b 的值 : %d\n&#34;</span><span class="p">,</span> <span class="nx">b</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* 定义相互交换值的函数 */</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">swap</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kd">var</span> <span class="nx">temp</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">temp</span> <span class="p">=</span> <span class="nx">x</span> <span class="cm">/* 保存 x 的值 */</span>
</span></span><span class="line"><span class="cl">   <span class="nx">x</span> <span class="p">=</span> <span class="nx">y</span>    <span class="cm">/* 将 y 值赋给 x */</span>
</span></span><span class="line"><span class="cl">   <span class="nx">y</span> <span class="p">=</span> <span class="nx">temp</span> <span class="cm">/* 将 temp 值赋给 y*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="nx">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/** 输出
</span></span></span><span class="line"><span class="cl"><span class="cm">交换前 a 的值为 : 100
</span></span></span><span class="line"><span class="cl"><span class="cm">交换前 b 的值为 : 200
</span></span></span><span class="line"><span class="cl"><span class="cm">交换后 a 的值 : 100
</span></span></span><span class="line"><span class="cl"><span class="cm">交换后 b 的值 : 200
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="引用传递" class="heading-element">
  <a href="#%e5%bc%95%e7%94%a8%e4%bc%a0%e9%80%92" class="heading-mark"></a>0.8 引用传递</h3><ul>
<li>
<p>引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。</p>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="cm">/* 定义局部变量 */</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">a</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">b</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">200</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;交换前，a 的值 : %d,%p\n&#34;</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;交换前，b 的值 : %d,%p\n&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/* 调用 swap() 函数
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * &amp;a 指向 a 指针，a 变量的地址
</span></span></span><span class="line"><span class="cl"><span class="cm">	 * &amp;b 指向 b 指针，b 变量的地址
</span></span></span><span class="line"><span class="cl"><span class="cm">	 */</span>
</span></span><span class="line"><span class="cl">	<span class="nf">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;交换后，a 的值 : %d\n&#34;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;交换后，b 的值 : %d\n&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">swap</span><span class="p">(</span><span class="nx">x</span> <span class="o">*</span><span class="kt">int</span><span class="p">,</span> <span class="nx">y</span> <span class="o">*</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;交换中，x 的值 : %p,%p\n&#34;</span><span class="p">,</span> <span class="nx">x</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;交换中，y 的值 : %p,%p\n&#34;</span><span class="p">,</span> <span class="nx">y</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">y</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">temp</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">temp</span> <span class="p">=</span> <span class="o">*</span><span class="nx">x</span> <span class="cm">/* 保存 x 地址上的值 */</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="nx">x</span> <span class="p">=</span> <span class="o">*</span><span class="nx">y</span>   <span class="cm">/* 将 y 值赋给 x */</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="nx">y</span> <span class="p">=</span> <span class="nx">temp</span> <span class="cm">/* 将 temp 值赋给 y */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">交换前，a 的值 : 100,0x14000122008
</span></span></span><span class="line"><span class="cl"><span class="cm">交换前，b 的值 : 200,0x14000122010
</span></span></span><span class="line"><span class="cl"><span class="cm">交换中，x 的值 : 0x14000122008,0x1400011c020
</span></span></span><span class="line"><span class="cl"><span class="cm">交换中，y 的值 : 0x14000122010,0x1400011c028
</span></span></span><span class="line"><span class="cl"><span class="cm">交换后，a 的值 : 200
</span></span></span><span class="line"><span class="cl"><span class="cm">交换后，b 的值 : 100
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="传值-vs-传指针" class="heading-element">
  <a href="#%e4%bc%a0%e5%80%bc-vs-%e4%bc%a0%e6%8c%87%e9%92%88" class="heading-mark"></a>0.9 传值 VS 传指针</h3><ul>
<li>
<p><strong>传值会拷贝整个对象，而传指针只会拷贝指针地址，指向的对象是同一个。</strong></p>
</li>
<li>
<p><strong>传指针可以减少值的拷贝，但是会导致内存分配逃逸到堆中，增加垃圾回收(GC)的负担。在对象频繁创建和删除的场景下，传递指针导致的 GC 开销可能会严重影响性能。</strong></p>
</li>
<li>
<p><strong>一般情况下，对于需要修改原对象值，或占用内存比较大的结构体，选择传指针。对于只读的占用内存较小的结构体，直接传值能够获得更好的性能。</strong></p>
</li>
</ul>
<h3 id="变量作用域" class="heading-element">
  <a href="#%e5%8f%98%e9%87%8f%e4%bd%9c%e7%94%a8%e5%9f%9f" class="heading-mark"></a>0.10 变量作用域</h3><ul>
<li>
<p>局部变量:在函数体内声明的变量称之为局部变量，它们的作用域只在函数体内，参数和返回值变量也是局部变量。</p>
</li>
<li>
<p>全局变量:在函数体外声明的变量称之为全局变量，全局变量可以在整个包甚至外部包（被导出后）使用。</p>
</li>
<li>
<p>可通过花括号来控制变量的作用域，花括号中的变量是单独的作用域，同名变量会覆盖外层。</p>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">:=</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">a</span> <span class="o">:=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;in a = &#34;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;out a = &#34;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">in a = 3
</span></span></span><span class="line"><span class="cl"><span class="cm">out a = 5
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="defer关键字" class="heading-element">
  <a href="#defer%e5%85%b3%e9%94%ae%e5%ad%97" class="heading-mark"></a>0.11 defer关键字</h3><ul>
<li>defer 定义的语句不会立即执行, 会在函数return之前执行</li>
<li>一般用作资源释放</li>
<li>多个defer 语句会以栈的规则执行</li>
</ul>
<h3 id="内置函数" class="heading-element">
  <a href="#%e5%86%85%e7%bd%ae%e5%87%bd%e6%95%b0" class="heading-mark"></a>0.12 内置函数</h3><ul>
<li>close:主要用来关闭 channel</li>
<li>len:用来求长度,比如 string、 array、 slice、map、 channe</li>
<li>cap: 获取容器的容量大小</li>
<li>new:用来分配内存,主要用来分配值类型,比如iηt、 struct。返回的是指针</li>
<li>make:用来分配内存,主要用来分配引用类型,比如chan、map、 slice</li>
<li>append:用来追加元素到数组、slice中</li>
<li>copy: 将一个slice拷贝到另一个slice中</li>
<li>delete: 删除map中的键值对</li>
<li>panic和 recover:用来做错误处理</li>
</ul>
<h3 id="闭包函数" class="heading-element">
  <a href="#%e9%97%ad%e5%8c%85%e5%87%bd%e6%95%b0" class="heading-mark"></a>0.13 闭包函数</h3><ul>
<li>
<p>闭包函数的两个必要条件: 1.嵌套函数 2. 外部引用</p>
</li>
<li>
<p>闭包函数的机制类似于面向对象的实例; 每一个实例对象内部的变量在实例生命周期内一直存在,只有重新创建实例时,内部变量才会被重置</p>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">getSequence</span><span class="p">()</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">i</span><span class="o">:=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">i</span><span class="o">+=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">	<span class="cm">/* nextNumber 为一个函数，函数 i 为 0 */</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nextNumber</span> <span class="o">:=</span> <span class="nf">getSequence</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/* 调用 nextNumber 函数，i 变量自增 1 并返回 */</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">nextNumber</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">nextNumber</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">nextNumber</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/* 创建新的函数 nextNumber1，并查看结果 */</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nextNumber1</span> <span class="o">:=</span> <span class="nf">getSequence</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">nextNumber1</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">nextNumber1</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">1
</span></span></span><span class="line"><span class="cl"><span class="cm">2
</span></span></span><span class="line"><span class="cl"><span class="cm">3
</span></span></span><span class="line"><span class="cl"><span class="cm">1
</span></span></span><span class="line"><span class="cl"><span class="cm">2
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="defer-和闭包函数" class="heading-element">
  <a href="#defer-%e5%92%8c%e9%97%ad%e5%8c%85%e5%87%bd%e6%95%b0" class="heading-mark"></a>0.14 defer 和闭包函数</h3><ul>
<li>
<p>defer 直接返回函数调用</p>
<div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">OutputNum</span><span class="p">(</span><span class="nx">num</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">num</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="nf">OutputNum</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="c1">// 4 3 2 1 0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>defer OutputNum(i) 时, 系统会将OutputNum(i) 函数压入栈, 在main函数结束之前从栈中取出并调用,但是OutputNum(i) 函数是值传递, 将i的拷贝直接入栈, 所以传递给OutputNum 的是var i int的i值.</p>
</blockquote>
</li>
<li>
<p>defer 返回匿名函数</p>
<div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">defer</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span> 
</span></span><span class="line"><span class="cl">			<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>   <span class="c1">// 5 5 5 5 5
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>		<span class="p">}()</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><blockquote>
<p>defer 匿名函数: 匿名函数中引用了外部变量i, 系统在把i 压入栈的时候记录的是i的内存地址, 所以多个匿名函数使用的是同一个i的内存地址</p>
</blockquote>
</li>
<li>
<p>Python 闭包</p>
<blockquote>
<p>道理和golang一样</p>
</blockquote>
<div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="c1"># 题1 </span>
</span></span><span class="line"><span class="cl"><span class="n">info</span> <span class="o">=</span> <span class="p">[]</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">func</span><span class="p">(</span><span class="n">i</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="k">def</span> <span class="nf">inner</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">        <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">inner</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
</span></span><span class="line"><span class="cl">    <span class="n">info</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">func</span><span class="p">(</span><span class="n">item</span><span class="p">))</span>
</span></span><span class="line"><span class="cl"><span class="n">info</span><span class="p">[</span><span class="mi">0</span><span class="p">]()</span> <span class="c1"># 0</span>
</span></span><span class="line"><span class="cl"><span class="n">info</span><span class="p">[</span><span class="mi">1</span><span class="p">]()</span> <span class="c1"># 1</span>
</span></span><span class="line"><span class="cl"><span class="n">info</span><span class="p">[</span><span class="mi">4</span><span class="p">]()</span> <span class="c1"># 4</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 题2</span>
</span></span><span class="line"><span class="cl"><span class="k">def</span> <span class="nf">fun</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="n">temp</span><span class="o">=</span><span class="p">[</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="o">*</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">)]</span>
</span></span><span class="line"><span class="cl">    <span class="k">return</span> <span class="n">temp</span>
</span></span><span class="line"><span class="cl"><span class="k">for</span> <span class="n">every</span> <span class="ow">in</span> <span class="n">fun</span><span class="p">():</span>
</span></span><span class="line"><span class="cl">    <span class="nb">print</span><span class="p">(</span><span class="n">every</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>  <span class="c1"># 6666</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="数组" class="heading-element">
  <a href="#%e6%95%b0%e7%bb%84" class="heading-mark"></a>数组</h1><ul>
<li>
<p>数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型例如整型、字符串或者自定义类型。</p>
</li>
<li>
<p><strong>声明数组的时候必须声明长度或者用[&hellip;], 不然就是切片.</strong></p>
</li>
<li>
<p>初始化数组:</p>
</li>
</ul>
<div class="highlight" id="id-19"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">balance</span> <span class="p">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="kt">float32</span><span class="p">{</span><span class="mf">1000.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">,</span> <span class="mf">50.0</span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果数组长度不确定，可以使用 <strong>&hellip;</strong> 代替数组的长度，编译器会根据元素个数自行推断数组的长度：</li>
</ul>
<div class="highlight" id="id-20"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">balance</span> <span class="o">:=</span> <span class="p">[</span><span class="o">...</span><span class="p">]</span><span class="kt">float32</span><span class="p">{</span><span class="mf">1000.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">,</span> <span class="mf">50.0</span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果设置了数组的长度，我们还可以通过指定下标来初始化元素：</li>
</ul>
<div class="highlight" id="id-21"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//  将索引为 1 和 3 的元素初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">balance</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="kt">float32</span><span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="mf">2.0</span><span class="p">,</span><span class="mi">3</span><span class="p">:</span><span class="mf">7.0</span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h1 id="切片slice" class="heading-element">
  <a href="#%e5%88%87%e7%89%87slice" class="heading-mark"></a>切片(slice)</h1><ul>
<li>
<p>Go 语言切片是对数组的抽象。也可以被看做为&quot;动态数组&quot;,数组的长度不可改变,切片长度可变</p>
</li>
<li>
<p>在做函数调用时，slice 按引用传递，array 按值传递：</p>
</li>
<li>
<p><strong>切片是对数组的引用,切片本身并不包含任何元素</strong></p>
</li>
<li>
<p>切片的结构包括三个部分:</p>
<ul>
<li><strong>地址</strong>: 切片的地址一般指切片中的第一个元素所指向的内存地址, 用十六进制表示;</li>
<li><strong>长度</strong>: 切片实际存在元素的个数;</li>
<li><strong>容量</strong>: <strong>从切片的起始元素开始到其底层数组中最后一个元素的个数</strong>;</li>
</ul>
</li>
<li>
<p><strong>切片的长度和容量都不是固定的,追加元素会使切片的长度和容量都增大</strong></p>
</li>
<li>
<p>切片如果是从其他数组或者切片中来的话, 切片容量增加但是所引用数组容量不变</p>
<ul>
<li>切片如果是从其他数组或者切片中来的话, 当切片长度大于多引用的数组容量时; 切片容量会以 <strong>切片新容量=2*切片当前容量</strong> 的速度扩容</li>
</ul>
</li>
<li>
<p>切片如果是从其他数组或者切片中来的话, 当前片长量大于所引用数组的容量时, 切片中的第一个元素所指向的内存地址会发生改变;</p>
</li>
</ul>
<p><strong>定义切片</strong></p>
<ul>
<li>声明一个未指定大小的数组来定义切片(<strong>切片不需要说明长度</strong>)：</li>
</ul>
<div class="highlight" id="id-22"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">identifier</span> <span class="p">[]</span><span class="kd">type</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>使用 <strong>make()</strong> 函数来创建切片:</li>
</ul>
<div class="highlight" id="id-23"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">slice1</span> <span class="p">[]</span><span class="kd">type</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kd">type</span><span class="p">,</span> <span class="nx">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">也可以简写为</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">slice1</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kd">type</span><span class="p">,</span> <span class="nx">len</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>也可以指定容量，其中 <strong>capacity</strong> 为可选参数。</li>
</ul>
<div class="highlight" id="id-24"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nb">make</span><span class="p">([]</span><span class="nx">T</span><span class="p">,</span> <span class="nx">length</span><span class="p">,</span> <span class="nx">capacity</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">//这里 len 是数组的长度并且也是切片的初始长度。
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>特殊</p>
<div class="highlight" id="id-25"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>  <span class="c1">// 声明切片索引为2的写入1
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="切片函数" class="heading-element">
  <a href="#%e5%88%87%e7%89%87%e5%87%bd%e6%95%b0" class="heading-mark"></a>0.15 切片函数</h3><ul>
<li>
<p>len()  获取长度</p>
</li>
<li>
<p>cap()  获取切片容量,即最大长度</p>
</li>
<li>
<p>append()  往切片尾部添加一个元素</p>
</li>
<li>
<p>copy()   <em>拷贝 numbers 的内容到 numbers1</em></p>
<div class="highlight" id="id-26"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="cm">/* 拷贝 numbers 的内容到 numbers1 */</span>
</span></span><span class="line"><span class="cl"><span class="nb">copy</span><span class="p">(</span><span class="nx">numbers1</span><span class="p">,</span><span class="nx">numbers</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>合并多个数组：</p>
<div class="highlight" id="id-27"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">arr1</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">arr2</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">arr3</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">s1</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nb">append</span><span class="p">(</span><span class="nx">arr1</span><span class="p">,</span> <span class="nx">arr2</span><span class="o">...</span><span class="p">),</span> <span class="nx">arr3</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;s1: %v\n&#34;</span><span class="p">,</span> <span class="nx">s1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// s1: [1 2 3 4 5 6 7 8 9]
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>从切片中删除元素</p>
<div class="highlight" id="id-28"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sli1</span><span class="o">:=</span><span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">c</span><span class="o">:=</span><span class="nb">append</span><span class="p">(</span><span class="nx">sli1</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">],</span><span class="nx">sli1</span><span class="p">[</span><span class="mi">2</span><span class="p">:]</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// [1 3]
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="映射map" class="heading-element">
  <a href="#%e6%98%a0%e5%b0%84map" class="heading-mark"></a>映射(map)</h1><ul>
<li>
<p>Map 是一种无序的键值对的集合。Map 最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值。</p>
</li>
<li>
<p>Map 是无序的，这是因为 Map 是使用 hash 表来实现的。</p>
</li>
<li>
<p>类似python中的字典dict,</p>
</li>
<li>
<p>可以使用内建函数 make 也可以使用 map 关键字来定义 Map:</p>
</li>
</ul>
<div class="highlight" id="id-29"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="cm">/* 声明变量，默认 map 是 nil */</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">map_variable</span> <span class="kd">map</span><span class="p">[</span><span class="nx">key_data_type</span><span class="p">]</span><span class="nx">value_data_type</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* 使用 make 函数 */</span>
</span></span><span class="line"><span class="cl"><span class="nx">map_variable</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">key_data_type</span><span class="p">]</span><span class="nx">value_data_type</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果不初始化 map，那么就会创建一个 nil map。nil map 不能用来存放键值对</li>
</ul>
<h3 id="删除键值对" class="heading-element">
  <a href="#%e5%88%a0%e9%99%a4%e9%94%ae%e5%80%bc%e5%af%b9" class="heading-mark"></a>0.16 删除键值对</h3><ul>
<li>delete(map,key) 删除键值对</li>
</ul>
<h3 id="syncmap" class="heading-element">
  <a href="#syncmap" class="heading-mark"></a>0.17 sync.Map</h3><p><code>map不是携程安全的,在同一时刻只能由一个携程操作map; 并发操作map时要加锁; 因为加锁会消耗性能, 所以推荐使用go1.9中的sync.Map</code></p>
<ul>
<li>
<p>sync.Map的特点</p>
<ul>
<li>内部通过冗余的数据结构降低加锁对性能的影响;</li>
<li>使用前无需初始化, 直接声明即可</li>
<li>sync.Map不使用map中的方式进行读取和赋值等操作</li>
</ul>
<div class="highlight" id="id-30"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;sync&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">GoMap</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Map</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="s">&#34;\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nf">writeMap</span><span class="p">(</span><span class="nx">GoMap</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nf">readMap</span><span class="p">(</span><span class="nx">GoMap</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">readMap</span><span class="p">(</span><span class="nx">goMap</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Map</span><span class="p">,</span> <span class="nx">key</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">res</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">goMap</span><span class="p">.</span><span class="nf">Load</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="c1">//线程安全提取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">ok</span> <span class="o">==</span> <span class="kc">true</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">res</span><span class="p">.(</span><span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">writeMap</span><span class="p">(</span><span class="nx">goMap</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Map</span><span class="p">,</span> <span class="nx">key</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">value</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">goMap</span><span class="p">.</span><span class="nf">Store</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Sync.Map 不能使用make()方法创建</p>
</li>
<li>
<p>Load() 方法的第一个返回值是一个接口类型,需要将其转换为map值得类型</p>
</li>
<li>
<p>syny.mao为了保证安全还是会有性能损耗,单线程推荐使用map</p>
</li>
</ul>
<h1 id="range" class="heading-element">
  <a href="#range" class="heading-mark"></a>range</h1><ul>
<li>range 关键字用于 for 循环中迭代数组(array)、切片(slice)、通道(channel)或集合(map)的元素。在数组和切片中它返回元素的索引和索引对应的值，在集合中返回 key-value 对。</li>
</ul>
<table>
<thead>
<tr>
<th>range表达式</th>
<th>第一分返回值</th>
<th>第二返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td>数组</td>
<td>index</td>
<td>value</td>
</tr>
<tr>
<td>切片</td>
<td>index</td>
<td>value</td>
</tr>
<tr>
<td>映射</td>
<td>key</td>
<td>value</td>
</tr>
<tr>
<td>通道</td>
<td>value</td>
<td>-</td>
</tr>
</tbody>
</table>
<h1 id="结构体" class="heading-element">
  <a href="#%e7%bb%93%e6%9e%84%e4%bd%93" class="heading-mark"></a>结构体</h1><ul>
<li>
<p>Go 语言中数组可以存储同一类型的数据，但在结构体中我们可以为不同项定义不同的数据类型;</p>
</li>
<li>
<p>lgo语言没有class类，只是个结构体struct;</p>
</li>
<li>
<p>结构体传参以值方式传递;</p>
</li>
<li>
<p><strong>结构体注意要点:</strong></p>
<ul>
<li><strong>同一个包内结构体名称不能重复</strong></li>
<li><strong>同一个结构体内成员名不能重复</strong></li>
<li><strong>同类型的成员可以写在同一行</strong></li>
<li><strong>结构体|方法名|变量名的首字母大写时可以在当前包外使用</strong></li>
</ul>
</li>
<li>
<p>结构体定义需要使用 type 和 struct 语句。struct 语句定义一个新的数据类型，结构体中有一个或多个成员。type 语句设定了结构体的名称。结构体的格式如下：</p>
</li>
</ul>
<div class="highlight" id="id-31"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">struct_variable_type</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="nx">member</span> <span class="nx">definition</span>
</span></span><span class="line"><span class="cl">   <span class="nx">member</span> <span class="nx">definition</span>
</span></span><span class="line"><span class="cl">   <span class="o">...</span>
</span></span><span class="line"><span class="cl">   <span class="nx">member</span> <span class="nx">definition</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>一旦定义了结构体类型，它就能用于变量的声明，语法格式如下：</li>
</ul>
<div class="highlight" id="id-32"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">variable_name</span> <span class="p">:</span><span class="o">=</span> <span class="n">structure_variable_type</span> <span class="p">{</span><span class="n">value1</span><span class="p">,</span> <span class="n">value2</span><span class="o">...</span><span class="n">valuen</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="err">或</span>
</span></span><span class="line"><span class="cl"><span class="n">variable_name</span> <span class="p">:</span><span class="o">=</span> <span class="n">structure_variable_type</span> <span class="p">{</span> <span class="n">key1</span><span class="p">:</span> <span class="n">value1</span><span class="p">,</span> <span class="n">key2</span><span class="p">:</span> <span class="n">value2</span><span class="o">...</span><span class="p">,</span> <span class="n">keyn</span><span class="p">:</span> <span class="n">valuen</span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<h3 id="结构体指针" class="heading-element">
  <a href="#%e7%bb%93%e6%9e%84%e4%bd%93%e6%8c%87%e9%92%88" class="heading-mark"></a>0.18 结构体指针</h3></li>
</ul>
<p>你可以定义指向结构体的指针类似于其他指针变量，格式如下：</p>
<div class="highlight" id="id-33"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="k">var</span> <span class="n">struct_pointer</span> <span class="o">*</span><span class="n">Books</span></span></span></code></pre></td></tr></table>
</div>
</div><p>以上定义的指针变量可以存储结构体变量的地址。查看结构体变量地址，可以将 &amp; 符号放置于结构体变量前：</p>
<div class="highlight" id="id-34"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">struct_pointer = &amp;Book1</span></span></code></pre></td></tr></table>
</div>
</div><p>使用结构体指针访问结构体成员，使用 &ldquo;.&rdquo; 操作符：</p>
<div class="highlight" id="id-35"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">struct_pointer.title</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<h3 id="实例化结构体" class="heading-element">
  <a href="#%e5%ae%9e%e4%be%8b%e5%8c%96%e7%bb%93%e6%9e%84%e4%bd%93" class="heading-mark"></a>0.19 实例化结构体</h3></li>
<li>
<p>实例化的方式:</p>
<ul>
<li>
<p>标准实例化</p>
</li>
<li>
<p>new()函数实例化</p>
</li>
<li>
<p>取地址实例化</p>
<div class="highlight" id="id-36"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Boy</span> <span class="kd">struct</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">age</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 标准实例化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span>  <span class="nx">boy</span> <span class="nx">Boy</span>
</span></span><span class="line"><span class="cl">	<span class="nx">boy</span><span class="p">.</span><span class="nx">name</span><span class="p">=</span><span class="s">&#34;Evan&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">boy</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>  <span class="c1">//Evan
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//new() 函数实例化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">newBoy</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">Boy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">newBoy</span><span class="p">.</span><span class="nx">age</span> <span class="p">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">newBoy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//取地址实例化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">addrBoy</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Boy</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">addrBoy</span><span class="p">.</span><span class="nx">name</span> <span class="p">=</span> <span class="s">&#34;Evan&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">addrBoy</span><span class="p">)</span>  <span class="c1">//&amp;{Evan 0}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">addrBoy</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="c1">//Evan
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>取值方式:</p>
</li>
<li>
<p>无论哪种取值方式都可以通过.的方式取值</p>
</li>
<li>
<h3 id="初始化结构体" class="heading-element">
  <a href="#%e5%88%9d%e5%a7%8b%e5%8c%96%e7%bb%93%e6%9e%84%e4%bd%93" class="heading-mark"></a>0.20 初始化结构体</h3></li>
<li>
<p>初始化方式<code>初始化成员最后一定要有逗号</code></p>
<ul>
<li>键值对初始化
<ul>
<li>类似map</li>
</ul>
</li>
<li>列表初始化
<ul>
<li>必须按顺序初始化结构体中的全部成员</li>
<li>与键值对初始化方法不能混用</li>
</ul>
</li>
</ul>
<div class="highlight" id="id-37"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Boy</span> <span class="kd">struct</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">age</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">boy</span> <span class="o">:=</span><span class="nx">Boy</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">name</span><span class="p">:</span> <span class="s">&#34;evan&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">boy2</span> <span class="o">:=</span><span class="nx">Boy</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;bigox&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="mi">18</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">boy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">boy2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">{evan 0}
</span></span></span><span class="line"><span class="cl"><span class="cm">{bigox 18}
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="结构体方法" class="heading-element">
  <a href="#%e7%bb%93%e6%9e%84%e4%bd%93%e6%96%b9%e6%b3%95" class="heading-mark"></a>0.21 结构体方法</h3><ul>
<li>
<p>方法: 包含了接收者的函数</p>
</li>
<li>
<p>结构体方法: 接收者可以使结构体类型的值后者指针</p>
<div class="highlight" id="id-38"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Boy</span> <span class="kd">struct</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">age</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 指针类型接收
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">boy</span> <span class="o">*</span><span class="nx">Boy</span><span class="p">)</span> <span class="nf">changeName</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">	<span class="nx">boy</span><span class="p">.</span><span class="nx">name</span> <span class="p">=</span> <span class="s">&#34;bigox&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 值类型接收
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">boy</span> <span class="nx">Boy</span><span class="p">)</span> <span class="nf">changeAge</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">	<span class="nx">boy</span><span class="p">.</span><span class="nx">age</span> <span class="p">=</span> <span class="mi">18</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">boy</span> <span class="o">:=</span><span class="nx">Boy</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;evan&#34;</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">boy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">boy</span><span class="p">.</span><span class="nf">changeName</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">boy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">boy</span><span class="p">.</span><span class="nf">changeAge</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">boy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">{evan 17}
</span></span></span><span class="line"><span class="cl"><span class="cm">{bigox 17}
</span></span></span><span class="line"><span class="cl"><span class="cm">{bigox 17}
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="结构体内嵌" class="heading-element">
  <a href="#%e7%bb%93%e6%9e%84%e4%bd%93%e5%86%85%e5%b5%8c" class="heading-mark"></a>0.22 结构体内嵌</h3><ul>
<li>
<p>结构体内嵌可以构建面向对象编程思想中的继承关系, 结构体实例化之后可以直接访问内嵌结构体中的所有成员变量和方法</p>
<div class="highlight" id="id-39"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Book</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">title</span>  <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">author</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">num</span>    <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">id</span>     <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">BookBorrow</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Book</span>
</span></span><span class="line"><span class="cl">	<span class="nx">borrowTime</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">BookNotBorrow</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Book</span>
</span></span><span class="line"><span class="cl">	<span class="nx">readTime</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bookBorrow</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">BookBorrow</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bookNotBorrow</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">BookNotBorrow</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">bookBorrow</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">bookNotBorrow</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">&amp;{{   0 0} }
</span></span></span><span class="line"><span class="cl"><span class="cm">&amp;{{   0 0} }
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>内嵌结构体实例化</p>
<div class="highlight" id="id-40"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Book</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">title</span>  <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">author</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">num</span>    <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">id</span>     <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">BookBorrow</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Book</span>
</span></span><span class="line"><span class="cl">	<span class="nx">borrowTime</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">BookNotBorrow</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Book</span>
</span></span><span class="line"><span class="cl">	<span class="nx">readTime</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bookBorrow</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">BookBorrow</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Book</span><span class="p">:</span><span class="nx">Book</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">title</span> <span class="p">:</span><span class="s">&#34;go&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">author</span> <span class="p">:</span><span class="s">&#34;Tom&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">num</span>    <span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">id</span>     <span class="p">:</span><span class="mi">110</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">bookBorrow</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bookBorrow</span><span class="p">.</span><span class="nx">author</span> <span class="p">=</span> <span class="s">&#34;Jerry&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">bookBorrow</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">&amp;{{go Tom 1 110} }
</span></span></span><span class="line"><span class="cl"><span class="cm">&amp;{{go Jerry 1 110} }
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="匿名结构体" class="heading-element">
  <a href="#%e5%8c%bf%e5%90%8d%e7%bb%93%e6%9e%84%e4%bd%93" class="heading-mark"></a>0.23 匿名结构体</h3><ul>
<li>
<p>没有名字的结构体</p>
</li>
<li>
<p>无需使用type关键字, 但是创建匿名结构体的时候也要创建对象</p>
<div class="highlight" id="id-41"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">	<span class="nx">book</span> <span class="o">:=</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">title</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="p">}{</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;go&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="mi">110</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">book</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>匿名函数一般可用于组织全局变量| 构建数据模板|和解析JSON使用;</p>
</li>
<li>
<p>经常使用匿名结构体来临时存储经过解析后的JSON数据;</p>
</li>
</ul>
<h3 id="结构体匿名字段" class="heading-element">
  <a href="#%e7%bb%93%e6%9e%84%e4%bd%93%e5%8c%bf%e5%90%8d%e5%ad%97%e6%ae%b5" class="heading-mark"></a>0.24 结构体匿名字段</h3><ul>
<li>
<p>创建结构体时, 字敦可以只有类型, 而没有字段名, 这样的字段成为匿名字段;</p>
<div class="highlight" id="id-42"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Age</span>  <span class="kt">int</span> <span class="s">`json:&#34;age&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="kt">string</span>    <span class="c1">// 匿名字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
]]></description>
</item>
<item>
  <title>3-1. go指针</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515174541/</link>
  <pubDate>Thu, 15 May 2025 17:45:41 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515174541/</guid>
  <description><![CDATA[<h2 id="go中的指针" class="heading-element">
  <a href="#go%e4%b8%ad%e7%9a%84%e6%8c%87%e9%92%88" class="heading-mark"></a>1 Go中的指针</h2><p>要搞明白Go语言中的指针需要先知道三个概念</p>
<ul>
<li>指针地址</li>
<li>指针类型</li>
<li>指针取值</li>
</ul>
<p>Go语言中的指针操作非常简单，我们只需要记住两个符号：&amp;：取地址，*：根据地址取值</p>
<h3 id="关于指针" class="heading-element">
  <a href="#%e5%85%b3%e4%ba%8e%e6%8c%87%e9%92%88" class="heading-mark"></a>1.1 关于指针</h3><ul>
<li>
<p>我们知道变量是用来存储数据的，变量的本质是给存储数据的内存地址起了一个好记的别名。比如我们定义了一个变量a:=10，这个时候可以直接通过a这个变量来读取内存中保存的10这个值。在计算机底层a这个变量其实对应了一个内存地址。</p>
</li>
<li>
<p>指针也是一个变量，但它是一种特殊的变量，它存储的数据不是一个普通的值，而<strong>是另一个变量的内存地址。</strong></p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20220614164230583.png?size=large" data-thumbnail="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20220614164230583.png?size=small" data-sub-html="<h2>image-20220614164230583</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20220614164230583.png" alt="image-20220614164230583" srcset="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20220614164230583.png?size=small, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20220614164230583.png?size=medium 1.5x, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20220614164230583.png?size=large 2x" data-title="image-20220614164230583" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
</li>
</ul>
<h3 id="指针地址和指针类型" class="heading-element">
  <a href="#%e6%8c%87%e9%92%88%e5%9c%b0%e5%9d%80%e5%92%8c%e6%8c%87%e9%92%88%e7%b1%bb%e5%9e%8b" class="heading-mark"></a>1.2 指针地址和指针类型</h3><ul>
<li>
<p>每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。</p>
</li>
<li>
<p>Go 语言中使用&amp;字符放在变量前面对变量进行取地址操作。Go语言中的值类型（int、float、bool、string、array、struct）都有对应的指针类型，如：</p>
</li>
</ul>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">*int、，*int64、*string等</span></span></code></pre></td></tr></table>
</div>
</div><p>取变量指针的语法如下：</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">ptr</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">v</span></span></span></code></pre></td></tr></table>
</div>
</div><p>其中：</p>
<ul>
<li>v：代表被取地址的变量，类型为T</li>
<li>ptr：用于接收地址的变量，ptr的类型就为*T，被称做T的指针类型。* 代表指针</li>
</ul>
<p>举个例子：</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20200721084549011.png?size=large" data-thumbnail="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20200721084549011.png?size=small" data-sub-html="<h2>image-20200721084549011</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20200721084549011.png" alt="image-20200721084549011" srcset="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20200721084549011.png?size=small, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20200721084549011.png?size=medium 1.5x, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20200721084549011.png?size=large 2x" data-title="image-20200721084549011" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">a</span> <span class="p">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">b</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">a</span>
</span></span><span class="line"><span class="cl">	<span class="nb">println</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">a</span><span class="p">)</span> 	<span class="c1">//0xc00003df60
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nb">println</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">b</span><span class="p">)</span>		<span class="c1">//0xc00003df68
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nb">println</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>		<span class="c1">//0xc00003df60
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nb">println</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">b</span><span class="p">))</span>	<span class="c1">//0xc00003df60
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="指针取值" class="heading-element">
  <a href="#%e6%8c%87%e9%92%88%e5%8f%96%e5%80%bc" class="heading-mark"></a>1.3 指针取值</h3><p>在对普通变量进行&amp;操作符取地址后，会获得这个变量指针，然后可以对指针使用*操作，也就是指针取值</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 指针取值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">c</span> <span class="p">=</span> <span class="mi">20</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 得到c的地址，赋值给d
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">d</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">c</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 打印d的值，也就是c的地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 取出d指针所对应的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="o">*</span><span class="nx">d</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// c对应地址的值，改成30
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">*</span><span class="nx">d</span> <span class="p">=</span> <span class="mi">30</span>
</span></span><span class="line"><span class="cl"><span class="c1">// c已经变成30了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>改变内存中的值，会直接改变原来的变量值</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 这个类似于值传递
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">fn4</span><span class="p">(</span><span class="nx">x</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">x</span> <span class="p">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 这个类似于引用数据类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">fn5</span><span class="p">(</span><span class="nx">x</span> <span class="o">*</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="nx">x</span> <span class="p">=</span> <span class="mi">20</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">x</span> <span class="o">:=</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl">	<span class="nf">fn4</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">fn5</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们创建了两个方法，一个是传入局部变量，一个是传入指针类型，最后运行得到的结果</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="m">5</span>
</span></span><span class="line"><span class="cl"><span class="m">20</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="new和make函数" class="heading-element">
  <a href="#new%e5%92%8cmake%e5%87%bd%e6%95%b0" class="heading-mark"></a>1.4 new和make函数</h3><p>需要注意的是，指针必须在创建内存后才可以使用，这个和 slice 和 map是一样的</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 引用数据类型map、slice等，必须使用make分配空间，才能够使用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">userInfo</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">userInfo</span><span class="p">[</span><span class="s">&#34;userName&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;zhangsan&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">userInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">array</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>对于指针变量来说</p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 指针变量初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">a</span> <span class="o">*</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="o">*</span><span class="nx">a</span> <span class="p">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>执行上面的代码会引发panic，为什么呢？在Go语言中对于引用类型的变量，我们在使用的时候不仅要声明它，还要为它分配内存空间，否则我们的值就没办法存储。而对于值类型的声明不需要分配内存空间，是因为它们在声明的时候已经默认分配好了内存空间。要分配内存，就引出来今天的new和make。Go 语言中new和make是内建的两个函数，主要用来分配内存。</p>
<p>这个时候，我们就需要使用new关键字来分配内存，new是一个内置的函数，它的函数签名如下：</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nb">new</span><span class="p">(</span><span class="nx">Type</span><span class="p">)</span> <span class="o">*</span><span class="nx">Type</span></span></span></code></pre></td></tr></table>
</div>
</div><p>其中</p>
<ul>
<li>Type表示类型，new函数只接受一个参数，这个参数是一个类型</li>
<li>*Type表示类型指针，new函数返回一个指向该类型内存地址的指针</li>
</ul>
<p>实际开发中new函数不太常用，使用new函数得到的是一个类型的指针，并且该指针对应的值为该类型的零值。举个例子：</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 使用new关键字创建指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">aPoint</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">bPoint</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%T \n&#34;</span><span class="p">,</span> <span class="nx">aPoint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%T \n&#34;</span><span class="p">,</span> <span class="nx">bPoint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="o">*</span><span class="nx">aPoint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="o">*</span><span class="nx">bPoint</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>类似var a *int 只是声明了一个指针变量a但是没有初始化，指针作为引用类型需要初始化后才会拥有内存空间，才可以给它赋值。应该按照如下方式使用内置的</li>
</ul>
<h3 id="make和new的区别" class="heading-element">
  <a href="#make%e5%92%8cnew%e7%9a%84%e5%8c%ba%e5%88%ab" class="heading-mark"></a>1.5 make和new的区别</h3><ul>
<li>
<p>两者都是用来做内存分配的；</p>
</li>
<li>
<p>make只能用于slice、map以及channel的初始化，返回的还是这三个引用类型的本身</p>
</li>
<li>
<p>而new用于类型的内存分配，并且内存初始的值为类型的零值，返回的是指向类型的指针</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// int byte rune float bool string 这些类型都有默认零值；在变量声明的时候系统自动会分配一块内存空间； 而 point slice、map以及channel的零值是nil 系统不会默认分配空间，所以需要初始化；
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="指针易混淆示例" class="heading-element">
  <a href="#%e6%8c%87%e9%92%88%e6%98%93%e6%b7%b7%e6%b7%86%e7%a4%ba%e4%be%8b" class="heading-mark"></a>1.6 指针易混淆示例</h3><h4 id="1--函数传参指针" class="heading-element">
  <a href="#1--%e5%87%bd%e6%95%b0%e4%bc%a0%e5%8f%82%e6%8c%87%e9%92%88" class="heading-mark"></a>1.6.1 1.  函数传参指针</h4><ul>
<li>
<p>demo</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">T</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">a</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">T</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">b</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">T</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;a addr :%p,&amp;a addr :%p, a: %v\n&#34;</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">a</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">f1</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;a addr :%p, a: %v\n&#34;</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;b addr :%p, b: %v\n&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">f2</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;b addr :%p, b: %v\n&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f1</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;f1--t addr :%p, &amp;t addr :%p:\n&#34;</span><span class="p">,</span> <span class="nx">t</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">t</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">T</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Name</span><span class="p">:</span> <span class="s">&#34;aaaaaaaa&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f2</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;f2--t addr :%p, &amp;t addr :%p:\n&#34;</span><span class="p">,</span> <span class="nx">t</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">t</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="nx">t</span> <span class="p">=</span> <span class="nx">T</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Name</span><span class="p">:</span> <span class="s">&#34;bbbbbbbb&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">a addr :0x14000104210,&amp;a addr :0x1400011c018, a: &amp;{}
</span></span></span><span class="line"><span class="cl"><span class="cm">f1--t addr :0x14000104210, &amp;t addr :0x1400011c028:
</span></span></span><span class="line"><span class="cl"><span class="cm">a addr :0x14000104210, a: &amp;{}
</span></span></span><span class="line"><span class="cl"><span class="cm">b addr :0x14000104220, b: &amp;{}
</span></span></span><span class="line"><span class="cl"><span class="cm">f2--t addr :0x14000104220, &amp;t addr :0x1400011c030:
</span></span></span><span class="line"><span class="cl"><span class="cm">b addr :0x14000104220, b: &amp;{bbbbbbbb}
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>最终a没有发生改变，而b发生了改变</strong>；</p>
<ul>
<li>在<code>f1</code>函数中，通过将<code>t</code>重新赋值为指向新的<code>T</code>结构体的指针，你改变了<code>t</code>的指针目标。这种方式只在函数内部有效，不会对原始指针产生影响。这是因为函数参数是按值传递的，当你将<code>t</code>重新赋值时，只是修改了函数内部的一个副本，不会影响原始指针。&amp;a addr 是0x1400011c018，而f1中 &amp;t addr :0x1400011c028； 这两个对象不同；在<code>main</code>函数中调用<code>f1(a)</code>后，<code>a</code>的值仍然是原始的空指针，因为<code>f1</code>函数中的重新分配操作只影响了函数内部的<code>t</code>副本。</li>
<li>在<code>f2</code>函数中，通过解引用指针并修改解引用后的结构体的字段，你可以改变指针所指向的<code>T</code>结构体的内容。这种方式会影响原始指针，因为你直接修改了指针所指向的内存。</li>
</ul>
</li>
</ul>
<h4 id="2-函数传参数组" class="heading-element">
  <a href="#2-%e5%87%bd%e6%95%b0%e4%bc%a0%e5%8f%82%e6%95%b0%e7%bb%84" class="heading-mark"></a>1.6.2 2. 函数传参数组</h4><ul>
<li>
<p>demo</p>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">l1</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">l1</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">l1</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%p,%p\n&#34;</span><span class="p">,</span> <span class="nx">l1</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">l1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">f1</span><span class="p">(</span><span class="nx">l1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">l1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">l2</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">l2</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">l2</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%p,%p\n&#34;</span><span class="p">,</span> <span class="nx">l2</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">l2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">f2</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">l2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">l2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f1</span><span class="p">(</span><span class="nx">l</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%p,%p\n&#34;</span><span class="p">,</span> <span class="nx">l</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">l</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">l</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">f2</span><span class="p">(</span><span class="nx">l</span> <span class="o">*</span><span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%p,%p,%p\n&#34;</span><span class="p">,</span> <span class="nx">l</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">l</span><span class="p">,</span> <span class="o">*</span><span class="nx">l</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="nx">l</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="o">*</span><span class="nx">l</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>f1 并未改变l1，是因为在函数 <code>f()</code> 中，切片 <code>l</code> 是按值传递的，而不是按引用传递的。当你将切片 <code>l1</code> 传递给函数 <code>f()</code> 时，它会创建一个新的切片 <code>l</code>，并将其初始化为与 <code>l1</code> 相同的底层数组。然后，使用 <code>append()</code> 函数将元素 <code>1</code> 添加到新切片 <code>l</code> 中。</p>
</li>
</ul>
]]></description>
</item>
<item>
  <title>3-0. 函数&amp;复合类型</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515174536/</link>
  <pubDate>Thu, 15 May 2025 17:45:36 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515174536/</guid>
  <description><![CDATA[<h1 id="go中的指针" class="heading-element">
  <a href="#go%e4%b8%ad%e7%9a%84%e6%8c%87%e9%92%88" class="heading-mark"></a>Go中的指针</h1><p>要搞明白Go语言中的指针需要先知道三个概念</p>
<ul>
<li>指针地址</li>
<li>指针类型</li>
<li>指针取值</li>
</ul>
<p>Go语言中的指针操作非常简单，我们只需要记住两个符号：&amp;：取地址，*：根据地址取值</p>
<h3 id="关于指针" class="heading-element">
  <a href="#%e5%85%b3%e4%ba%8e%e6%8c%87%e9%92%88" class="heading-mark"></a>0.1 关于指针</h3><ul>
<li>
<p>我们知道变量是用来存储数据的，变量的本质是给存储数据的内存地址起了一个好记的别名。比如我们定义了一个变量a:=10，这个时候可以直接通过a这个变量来读取内存中保存的10这个值。在计算机底层a这个变量其实对应了一个内存地址。</p>
</li>
<li>
<p>指针也是一个变量，但它是一种特殊的变量，它存储的数据不是一个普通的值，而<strong>是另一个变量的内存地址。</strong></p>
</li>
</ul>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210328102046113.png?size=large" data-thumbnail="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210328102046113.png?size=small" data-sub-html="<h2>image-20210328102046113</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210328102046113.png" alt="image-20210328102046113" srcset="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210328102046113.png?size=small, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210328102046113.png?size=medium 1.5x, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210328102046113.png?size=large 2x" data-title="image-20210328102046113" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<h3 id="指针地址和指针类型" class="heading-element">
  <a href="#%e6%8c%87%e9%92%88%e5%9c%b0%e5%9d%80%e5%92%8c%e6%8c%87%e9%92%88%e7%b1%bb%e5%9e%8b" class="heading-mark"></a>0.2 指针地址和指针类型</h3><ul>
<li>
<p>每个变量在运行时都拥有一个地址，这个地址代表变量在内存中的位置。</p>
</li>
<li>
<p>Go 语言中使用&amp;字符放在变量前面对变量进行取地址操作。Go语言中的值类型（int、float、bool、string、array、struct）都有对应的指针类型，如：</p>
</li>
</ul>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">*int、，*int64、*string等</span></span></code></pre></td></tr></table>
</div>
</div><p>取变量指针的语法如下：</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">ptr</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">v</span></span></span></code></pre></td></tr></table>
</div>
</div><p>其中：</p>
<ul>
<li>v：代表被取地址的变量，类型为T</li>
<li>ptr：用于接收地址的变量，ptr的类型就为*T，被称做T的指针类型。* 代表指针</li>
</ul>
<p>举个例子：</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20200721084549011.png?size=large" data-thumbnail="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20200721084549011.png?size=small" data-sub-html="<h2>image-20200721084549011</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20200721084549011.png" alt="image-20200721084549011" srcset="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20200721084549011.png?size=small, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20200721084549011.png?size=medium 1.5x, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20200721084549011.png?size=large 2x" data-title="image-20200721084549011" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">a</span> <span class="p">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">b</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">a</span>
</span></span><span class="line"><span class="cl">	<span class="nb">println</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">a</span><span class="p">)</span> 	<span class="c1">//0xc00003df60
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nb">println</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">b</span><span class="p">)</span>		<span class="c1">//0xc00003df68
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nb">println</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>		<span class="c1">//0xc00003df60
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nb">println</span><span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">b</span><span class="p">))</span>	<span class="c1">//0xc00003df60
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="指针取值" class="heading-element">
  <a href="#%e6%8c%87%e9%92%88%e5%8f%96%e5%80%bc" class="heading-mark"></a>0.3 指针取值</h3><p>在对普通变量进行&amp;操作符取地址后，会获得这个变量指针，然后可以对指针使用*操作，也就是指针取值</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 指针取值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">c</span> <span class="p">=</span> <span class="mi">20</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 得到c的地址，赋值给d
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">d</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">c</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 打印d的值，也就是c的地址
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 取出d指针所对应的值
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="o">*</span><span class="nx">d</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// c对应地址的值，改成30
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="o">*</span><span class="nx">d</span> <span class="p">=</span> <span class="mi">30</span>
</span></span><span class="line"><span class="cl"><span class="c1">// c已经变成30了
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>改变内存中的值，会直接改变原来的变量值</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 这个类似于值传递
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">fn4</span><span class="p">(</span><span class="nx">x</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">x</span> <span class="p">=</span> <span class="mi">10</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 这个类似于引用数据类型
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="nf">fn5</span><span class="p">(</span><span class="nx">x</span> <span class="o">*</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="o">*</span><span class="nx">x</span> <span class="p">=</span> <span class="mi">20</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">x</span> <span class="o">:=</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl">	<span class="nf">fn4</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nf">fn5</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p>我们创建了两个方法，一个是传入局部变量，一个是传入指针类型，最后运行得到的结果</p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-bash" data-lang="bash"><span class="line"><span class="cl"><span class="m">5</span>
</span></span><span class="line"><span class="cl"><span class="m">20</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="new和make函数" class="heading-element">
  <a href="#new%e5%92%8cmake%e5%87%bd%e6%95%b0" class="heading-mark"></a>0.4 new和make函数</h3><p>需要注意的是，指针必须在创建内存后才可以使用，这个和 slice 和 map是一样的</p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 引用数据类型map、slice等，必须使用make分配空间，才能够使用
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">userInfo</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">userInfo</span><span class="p">[</span><span class="s">&#34;userName&#34;</span><span class="p">]</span> <span class="p">=</span> <span class="s">&#34;zhangsan&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">userInfo</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">array</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">array</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">array</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>对于指针变量来说</p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 指针变量初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">a</span> <span class="o">*</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="o">*</span><span class="nx">a</span> <span class="p">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>执行上面的代码会引发panic，为什么呢？在Go语言中对于引用类型的变量，我们在使用的时候不仅要声明它，还要为它分配内存空间，否则我们的值就没办法存储。而对于值类型的声明不需要分配内存空间，是因为它们在声明的时候已经默认分配好了内存空间。要分配内存，就引出来今天的new和make。Go 语言中new和make是内建的两个函数，主要用来分配内存。</p>
<p>这个时候，我们就需要使用new关键字来分配内存，new是一个内置的函数，它的函数签名如下：</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">func</span> <span class="nb">new</span><span class="p">(</span><span class="nx">Type</span><span class="p">)</span> <span class="o">*</span><span class="nx">Type</span></span></span></code></pre></td></tr></table>
</div>
</div><p>其中</p>
<ul>
<li>Type表示类型，new函数只接受一个参数，这个参数是一个类型</li>
<li>*Type表示类型指针，new函数返回一个指向该类型内存地址的指针</li>
</ul>
<p>实际开发中new函数不太常用，使用new函数得到的是一个类型的指针，并且该指针对应的值为该类型的零值。举个例子：</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 使用new关键字创建指针
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">aPoint</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">bPoint</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="kt">bool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%T \n&#34;</span><span class="p">,</span> <span class="nx">aPoint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%T \n&#34;</span><span class="p">,</span> <span class="nx">bPoint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="o">*</span><span class="nx">aPoint</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="o">*</span><span class="nx">bPoint</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>本节开始的示例代码中  var a *int 只是声明了一个指针变量a但是没有初始化，指针作为引用类型需要初始化后才会拥有内存空间，才可以给它赋值。应该按照如下方式使用内置的</p>
<h3 id="make和new的区别" class="heading-element">
  <a href="#make%e5%92%8cnew%e7%9a%84%e5%8c%ba%e5%88%ab" class="heading-mark"></a>0.5 make和new的区别</h3><ul>
<li>两者都是用来做内存分配的</li>
<li>make只能用于slice、map以及channel的初始化，返回的还是这三个引用类型的本身</li>
<li>而new用于类型的内存分配，并且内存赌赢的值为类型的零值，返回的是指向类型的指针</li>
</ul>
<h1 id="函数" class="heading-element">
  <a href="#%e5%87%bd%e6%95%b0" class="heading-mark"></a>函数</h1><ul>
<li>
<p>函数是基本的代码块，Go 语言最少有个 main() 函数。</p>
</li>
<li>
<p>函数如果使用参数，该变量可称为函数的形参。</p>
<ul>
<li>形参就像定义在函数体内的局部变量。</li>
</ul>
</li>
<li>
<p>调用函数，可以通过两种方式来传递参数：</p>
<table>
<thead>
<tr>
<th style="text-align:left">传递类型</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/go/go-function-call-by-value.html"target="_blank" rel="external nofollow noopener noreferrer">值传递<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></td>
<td style="text-align:left">值传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</td>
</tr>
<tr>
<td style="text-align:left"><a href="https://www.runoob.com/go/go-function-call-by-reference.html"target="_blank" rel="external nofollow noopener noreferrer">引用传递<i class="fa-solid fa-external-link-alt fa-fw fa-xs ms-1 text-secondary" aria-hidden="true"></i></a></td>
<td style="text-align:left">引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。</td>
</tr>
</tbody>
</table>
<p>默认情况下，Go 语言使用的是值传递，即在调用过程中不会影响到实际参数。</p>
</li>
</ul>
<h3 id="匿名函数" class="heading-element">
  <a href="#%e5%8c%bf%e5%90%8d%e5%87%bd%e6%95%b0" class="heading-mark"></a>0.6 匿名函数</h3><ul>
<li>
<p>函数也是一种类型, 可以定义一个函数类型的变量</p>
</li>
<li>
<p>匿名函数就是一个没有名字的函数</p>
<div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">	<span class="nx">f1</span> <span class="o">:=</span> <span class="kd">func</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nf">f1</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="值传递" class="heading-element">
  <a href="#%e5%80%bc%e4%bc%a0%e9%80%92" class="heading-mark"></a>0.7 值传递</h3><ul>
<li>
<p>传递是指在调用函数时将实际参数复制一份传递到函数中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</p>
</li>
<li>
<p>Go 语言使用的是值传递，即在调用过程中不会影响到实际参数。</p>
<div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="cm">/* 定义局部变量 */</span>
</span></span><span class="line"><span class="cl">   <span class="kd">var</span> <span class="nx">a</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">   <span class="kd">var</span> <span class="nx">b</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">200</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;交换前 a 的值为 : %d\n&#34;</span><span class="p">,</span> <span class="nx">a</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;交换前 b 的值为 : %d\n&#34;</span><span class="p">,</span> <span class="nx">b</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="cm">/* 通过调用函数来交换值 */</span>
</span></span><span class="line"><span class="cl">   <span class="nf">swap</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;交换后 a 的值 : %d\n&#34;</span><span class="p">,</span> <span class="nx">a</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;交换后 b 的值 : %d\n&#34;</span><span class="p">,</span> <span class="nx">b</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* 定义相互交换值的函数 */</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">swap</span><span class="p">(</span><span class="nx">x</span><span class="p">,</span> <span class="nx">y</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kd">var</span> <span class="nx">temp</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">temp</span> <span class="p">=</span> <span class="nx">x</span> <span class="cm">/* 保存 x 的值 */</span>
</span></span><span class="line"><span class="cl">   <span class="nx">x</span> <span class="p">=</span> <span class="nx">y</span>    <span class="cm">/* 将 y 值赋给 x */</span>
</span></span><span class="line"><span class="cl">   <span class="nx">y</span> <span class="p">=</span> <span class="nx">temp</span> <span class="cm">/* 将 temp 值赋给 y*/</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="nx">temp</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/** 输出
</span></span></span><span class="line"><span class="cl"><span class="cm">交换前 a 的值为 : 100
</span></span></span><span class="line"><span class="cl"><span class="cm">交换前 b 的值为 : 200
</span></span></span><span class="line"><span class="cl"><span class="cm">交换后 a 的值 : 100
</span></span></span><span class="line"><span class="cl"><span class="cm">交换后 b 的值 : 200
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="引用传递" class="heading-element">
  <a href="#%e5%bc%95%e7%94%a8%e4%bc%a0%e9%80%92" class="heading-mark"></a>0.8 引用传递</h3><ul>
<li>
<p>引用传递是指在调用函数时将实际参数的地址传递到函数中，那么在函数中对参数所进行的修改，将影响到实际参数。</p>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="cm">/* 定义局部变量 */</span>
</span></span><span class="line"><span class="cl">   <span class="kd">var</span> <span class="nx">a</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">100</span>
</span></span><span class="line"><span class="cl">   <span class="kd">var</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">=</span> <span class="mi">200</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;交换前，a 的值 : %d\n&#34;</span><span class="p">,</span> <span class="nx">a</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;交换前，b 的值 : %d\n&#34;</span><span class="p">,</span> <span class="nx">b</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="cm">/* 调用 swap() 函数
</span></span></span><span class="line"><span class="cl"><span class="cm">   * &amp;a 指向 a 指针，a 变量的地址
</span></span></span><span class="line"><span class="cl"><span class="cm">   * &amp;b 指向 b 指针，b 变量的地址
</span></span></span><span class="line"><span class="cl"><span class="cm">   */</span>
</span></span><span class="line"><span class="cl">   <span class="nf">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;交换后，a 的值 : %d\n&#34;</span><span class="p">,</span> <span class="nx">a</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl">   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;交换后，b 的值 : %d\n&#34;</span><span class="p">,</span> <span class="nx">b</span> <span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">swap</span><span class="p">(</span><span class="nx">x</span> <span class="o">*</span><span class="kt">int</span><span class="p">,</span> <span class="nx">y</span> <span class="o">*</span><span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kd">var</span> <span class="nx">temp</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">   <span class="nx">temp</span> <span class="p">=</span> <span class="o">*</span><span class="nx">x</span>    <span class="cm">/* 保存 x 地址上的值 */</span>
</span></span><span class="line"><span class="cl">   <span class="o">*</span><span class="nx">x</span> <span class="p">=</span> <span class="o">*</span><span class="nx">y</span>      <span class="cm">/* 将 y 值赋给 x */</span>
</span></span><span class="line"><span class="cl">   <span class="o">*</span><span class="nx">y</span> <span class="p">=</span> <span class="nx">temp</span>    <span class="cm">/* 将 temp 值赋给 y */</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">交换前，a 的值 : 100
</span></span></span><span class="line"><span class="cl"><span class="cm">交换前，b 的值 : 200
</span></span></span><span class="line"><span class="cl"><span class="cm">交换后，a 的值 : 200
</span></span></span><span class="line"><span class="cl"><span class="cm">交换后，b 的值 : 100
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="变量作用域" class="heading-element">
  <a href="#%e5%8f%98%e9%87%8f%e4%bd%9c%e7%94%a8%e5%9f%9f" class="heading-mark"></a>0.9 变量作用域</h3><ul>
<li>
<p>局部变量:在函数体内声明的变量称之为局部变量，它们的作用域只在函数体内，参数和返回值变量也是局部变量。</p>
</li>
<li>
<p>全局变量:在函数体外声明的变量称之为全局变量，全局变量可以在整个包甚至外部包（被导出后）使用。</p>
</li>
<li>
<p>可通过花括号来控制变量的作用域，花括号中的变量是单独的作用域，同名变量会覆盖外层。</p>
<div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">:=</span> <span class="mi">5</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nx">a</span> <span class="o">:=</span> <span class="mi">3</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;in a = &#34;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;out a = &#34;</span><span class="p">,</span> <span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">in a = 3
</span></span></span><span class="line"><span class="cl"><span class="cm">out a = 5
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="defer关键字" class="heading-element">
  <a href="#defer%e5%85%b3%e9%94%ae%e5%ad%97" class="heading-mark"></a>0.10 defer关键字</h3><ul>
<li>defer 定义的语句不会立即执行, 会在函数return之前执行</li>
<li>一般用作资源释放</li>
<li>多个defer 语句会以栈的规则执行, 先进后出</li>
</ul>
<h3 id="内置函数" class="heading-element">
  <a href="#%e5%86%85%e7%bd%ae%e5%87%bd%e6%95%b0" class="heading-mark"></a>0.11 内置函数</h3><ul>
<li>close:主要用来关闭 channel</li>
<li>len:用来求长度,比如 string、 array、 slice、map、 channe</li>
<li>cap: 获取容器的容量大小</li>
<li>new:用来分配内存,主要用来分配值类型,比如iηt、 struct。返回的是指针</li>
<li>make:用来分配内存,主要用来分配引用类型,比如chan、map、 slice</li>
<li>append:用来追加元素到数组、slice中</li>
<li>copy: 将一个slice拷贝到另一个slice中</li>
<li>delete: 删除map中的键值对</li>
<li>panic和 recover:用来做错误处理</li>
</ul>
<h3 id="闭包函数" class="heading-element">
  <a href="#%e9%97%ad%e5%8c%85%e5%87%bd%e6%95%b0" class="heading-mark"></a>0.12 闭包函数</h3><ul>
<li>
<p>闭包函数的两个必要条件: 1.嵌套函数 2. 外部引用</p>
</li>
<li>
<p>闭包函数的机制类似于面向对象的实例; 每一个实例对象内部的变量在实例生命周期内一直存在,只有重新创建实例时,内部变量才会被重置</p>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">getSequence</span><span class="p">()</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">i</span><span class="o">:=</span><span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="k">return</span> <span class="kd">func</span><span class="p">()</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">i</span><span class="o">+=</span><span class="mi">1</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">i</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">	<span class="cm">/* nextNumber 为一个函数，函数 i 为 0 */</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nextNumber</span> <span class="o">:=</span> <span class="nf">getSequence</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/* 调用 nextNumber 函数，i 变量自增 1 并返回 */</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">nextNumber</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">nextNumber</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">nextNumber</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="cm">/* 创建新的函数 nextNumber1，并查看结果 */</span>
</span></span><span class="line"><span class="cl">	<span class="nx">nextNumber1</span> <span class="o">:=</span> <span class="nf">getSequence</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">nextNumber1</span><span class="p">())</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">nextNumber1</span><span class="p">())</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">1
</span></span></span><span class="line"><span class="cl"><span class="cm">2
</span></span></span><span class="line"><span class="cl"><span class="cm">3
</span></span></span><span class="line"><span class="cl"><span class="cm">1
</span></span></span><span class="line"><span class="cl"><span class="cm">2
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="数组" class="heading-element">
  <a href="#%e6%95%b0%e7%bb%84" class="heading-mark"></a>数组</h1><ul>
<li>
<p>数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型例如整型、字符串或者自定义类型。</p>
</li>
<li>
<p><strong>声明数组的时候必须声明长度或者用[&hellip;], 不然就是切片.</strong></p>
</li>
<li>
<p>初始化数组:</p>
</li>
</ul>
<div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">balance</span> <span class="p">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="kt">float32</span><span class="p">{</span><span class="mf">1000.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">,</span> <span class="mf">50.0</span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果数组长度不确定，可以使用 <strong>&hellip;</strong> 代替数组的长度，编译器会根据元素个数自行推断数组的长度：</li>
</ul>
<div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">balance</span> <span class="o">:=</span> <span class="p">[</span><span class="o">...</span><span class="p">]</span><span class="kt">float32</span><span class="p">{</span><span class="mf">1000.0</span><span class="p">,</span> <span class="mf">2.0</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">,</span> <span class="mf">50.0</span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果设置了数组的长度，我们还可以通过指定下标来初始化元素：</li>
</ul>
<div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//  将索引为 1 和 3 的元素初始化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">balance</span> <span class="o">:=</span> <span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="kt">float32</span><span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="mf">2.0</span><span class="p">,</span><span class="mi">3</span><span class="p">:</span><span class="mf">7.0</span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h1 id="切片slice" class="heading-element">
  <a href="#%e5%88%87%e7%89%87slice" class="heading-mark"></a>切片(slice)</h1><ul>
<li>
<p>Go 语言切片是对数组的抽象。也可以被看做为&quot;动态数组&quot;,数组的长度不可改变,切片长度可变</p>
</li>
<li>
<p>在做函数调用时，slice 按引用传递，array 按值传递：</p>
</li>
<li>
<p><strong>切片是对数组的引用,切片本身并不包含任何元素</strong></p>
</li>
<li>
<p>切片的结构包括三个部分:</p>
<ul>
<li><strong>地址</strong>: 切片的地址一般指切片中的第一个元素所指向的内存地址, 用十六进制表示;</li>
<li><strong>长度</strong>: 切片实际存在元素的个数;</li>
<li><strong>容量</strong>: <strong>从切片的起始元素开始到其底层数组中最后一个元素的个数</strong>;</li>
</ul>
</li>
<li>
<p><strong>切片的长度和容量都不是固定的,追加元素会使切片的长度和容量都增大</strong></p>
</li>
<li>
<p>切片如果是从其他数组或者切片中来的话, 切片容量增加但是所引用数组容量不变</p>
<ul>
<li>切片如果是从其他数组或者切片中来的话, 当切片长度大于多引用的数组容量时; 切片容量会以 <strong>切片新容量=2*切片当前容量</strong> 的速度扩容</li>
</ul>
</li>
<li>
<p>切片如果是从其他数组或者切片中来的话, 当前片长量大于所引用数组的容量时, 切片中的第一个元素所指向的内存地址会发生改变;</p>
</li>
</ul>
<p><strong>定义切片</strong></p>
<ul>
<li>声明一个未指定大小的数组来定义切片(<strong>切片不需要说明长度</strong>)：</li>
</ul>
<div class="highlight" id="id-19"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">identifier</span> <span class="p">[]</span><span class="kd">type</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>使用 <strong>make()</strong> 函数来创建切片:</li>
</ul>
<div class="highlight" id="id-20"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">slice1</span> <span class="p">[]</span><span class="kd">type</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kd">type</span><span class="p">,</span> <span class="nx">len</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">也可以简写为</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">slice1</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kd">type</span><span class="p">,</span> <span class="nx">len</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>也可以指定容量，其中 <strong>capacity</strong> 为可选参数。</li>
</ul>
<div class="highlight" id="id-21"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nb">make</span><span class="p">([]</span><span class="nx">T</span><span class="p">,</span> <span class="nx">length</span><span class="p">,</span> <span class="nx">capacity</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">//这里 len 是数组的长度并且也是切片的初始长度。
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p>特殊</p>
<div class="highlight" id="id-22"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">:</span> <span class="mi">1</span><span class="p">}</span>  <span class="c1">// 声明切片索引为2的写入1
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="切片函数" class="heading-element">
  <a href="#%e5%88%87%e7%89%87%e5%87%bd%e6%95%b0" class="heading-mark"></a>0.13 切片函数</h3><ul>
<li>
<p>len()  获取长度</p>
</li>
<li>
<p>cap()  获取切片容量,即最大长度</p>
</li>
<li>
<p>append()  往切片尾部添加一个元素</p>
</li>
<li>
<p>copy()   <em>拷贝 numbers 的内容到 numbers1</em></p>
<div class="highlight" id="id-23"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="cm">/* 拷贝 numbers 的内容到 numbers1 */</span>
</span></span><span class="line"><span class="cl"><span class="nb">copy</span><span class="p">(</span><span class="nx">numbers1</span><span class="p">,</span><span class="nx">numbers</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>合并多个数组：</p>
<div class="highlight" id="id-24"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">arr1</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">arr2</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">arr3</span> <span class="p">=</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">s1</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nb">append</span><span class="p">(</span><span class="nx">arr1</span><span class="p">,</span> <span class="nx">arr2</span><span class="o">...</span><span class="p">),</span> <span class="nx">arr3</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;s1: %v\n&#34;</span><span class="p">,</span> <span class="nx">s1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// s1: [1 2 3 4 5 6 7 8 9]
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>从切片中删除元素</p>
<div class="highlight" id="id-25"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">sli1</span><span class="o">:=</span><span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">}</span>
</span></span><span class="line"><span class="cl">  <span class="nx">c</span><span class="o">:=</span><span class="nb">append</span><span class="p">(</span><span class="nx">sli1</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">1</span><span class="p">],</span><span class="nx">sli1</span><span class="p">[</span><span class="mi">2</span><span class="p">:]</span><span class="o">...</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// [1 3]
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="映射map" class="heading-element">
  <a href="#%e6%98%a0%e5%b0%84map" class="heading-mark"></a>映射(map)</h1><ul>
<li>
<p>Map 是一种无序的键值对的集合。Map 最重要的一点是通过 key 来快速检索数据，key 类似于索引，指向数据的值。</p>
</li>
<li>
<p>Map 是无序的，这是因为 Map 是使用 hash 表来实现的。</p>
</li>
<li>
<p>类似python中的字典dict,</p>
</li>
<li>
<p>可以使用内建函数 make 也可以使用 map 关键字来定义 Map:</p>
</li>
</ul>
<div class="highlight" id="id-26"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="cm">/* 声明变量，默认 map 是 nil */</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">map_variable</span> <span class="kd">map</span><span class="p">[</span><span class="nx">key_data_type</span><span class="p">]</span><span class="nx">value_data_type</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* 使用 make 函数 */</span>
</span></span><span class="line"><span class="cl"><span class="nx">map_variable</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="nx">key_data_type</span><span class="p">]</span><span class="nx">value_data_type</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>如果不初始化 map，那么就会创建一个 nil map。nil map 不能用来存放键值对</li>
<li>map 取值 通过[]<code>v,ok:= someMap[&quot;key&quot;]</code></li>
</ul>
<h3 id="删除键值对" class="heading-element">
  <a href="#%e5%88%a0%e9%99%a4%e9%94%ae%e5%80%bc%e5%af%b9" class="heading-mark"></a>0.14 删除键值对</h3><ul>
<li>delete(map,key) 删除键值对</li>
</ul>
<h3 id="syncmap" class="heading-element">
  <a href="#syncmap" class="heading-mark"></a>0.15 sync.Map</h3><p><code>map不是携程安全的,在同一时刻只能由一个携程操作map; 并发操作map时要加锁; 因为加锁会消耗性能, 所以推荐使用go1.9中的sync.Map</code></p>
<ul>
<li>
<p>sync.Map的特点</p>
<ul>
<li>内部通过冗余的数据结构降低加锁对性能的影响;</li>
<li>使用前无需初始化, 直接声明即可</li>
<li>sync.Map不使用map中的方式进行读取和赋值等操作</li>
</ul>
<div class="highlight" id="id-27"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;sync&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">GoMap</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Map</span>
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span> <span class="s">&#34;\n&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nf">writeMap</span><span class="p">(</span><span class="nx">GoMap</span><span class="p">,</span> <span class="nx">i</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">go</span> <span class="nf">readMap</span><span class="p">(</span><span class="nx">GoMap</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">readMap</span><span class="p">(</span><span class="nx">goMap</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Map</span><span class="p">,</span> <span class="nx">key</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">res</span><span class="p">,</span> <span class="nx">ok</span> <span class="o">:=</span> <span class="nx">goMap</span><span class="p">.</span><span class="nf">Load</span><span class="p">(</span><span class="nx">key</span><span class="p">)</span> <span class="c1">//线程安全提取
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="k">if</span> <span class="nx">ok</span> <span class="o">==</span> <span class="kc">true</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="nx">res</span><span class="p">.(</span><span class="kt">int</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="k">return</span> <span class="mi">0</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">writeMap</span><span class="p">(</span><span class="nx">goMap</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Map</span><span class="p">,</span> <span class="nx">key</span> <span class="kt">int</span><span class="p">,</span> <span class="nx">value</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">goMap</span><span class="p">.</span><span class="nf">Store</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">value</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>Sync.Map 不能使用make()方法创建</p>
</li>
<li>
<p>Load() 方法的第一个返回值是一个接口类型,需要将其转换为map值得类型</p>
</li>
<li>
<p>syny.mao为了保证安全还是会有性能损耗,单线程推荐使用map</p>
</li>
</ul>
<h1 id="range" class="heading-element">
  <a href="#range" class="heading-mark"></a>range</h1><ul>
<li>range 关键字用于 for 循环中迭代数组(array)、切片(slice)、通道(channel)或集合(map)的元素。在数组和切片中它返回元素的索引和索引对应的值，在集合中返回 key-value 对。</li>
</ul>
<table>
<thead>
<tr>
<th>range表达式</th>
<th>第一分返回值</th>
<th>第二返回值</th>
</tr>
</thead>
<tbody>
<tr>
<td>数组</td>
<td>index</td>
<td>value</td>
</tr>
<tr>
<td>切片</td>
<td>index</td>
<td>value</td>
</tr>
<tr>
<td>映射</td>
<td>key</td>
<td>value</td>
</tr>
<tr>
<td>通道</td>
<td>value</td>
<td>N/A</td>
</tr>
</tbody>
</table>
<h1 id="结构体" class="heading-element">
  <a href="#%e7%bb%93%e6%9e%84%e4%bd%93" class="heading-mark"></a>结构体</h1><ul>
<li>
<p>Go 语言中数组可以存储同一类型的数据，但在结构体中我们可以为不同项定义不同的数据类型;</p>
</li>
<li>
<p>lgo语言没有class类，只是个结构体struct;</p>
</li>
<li>
<p>结构体传参以值方式传递;</p>
</li>
<li>
<p><strong>结构体注意要点:</strong></p>
<ul>
<li><strong>同一个包内结构体名称不能重复</strong></li>
<li><strong>同一个结构体内成员名不能重复</strong></li>
<li><strong>同类型的成员可以写在同一行</strong></li>
<li><strong>结构体|方法名|变量名的首字母大写时可以在当前包外使用</strong></li>
</ul>
</li>
<li>
<p>结构体定义需要使用 type 和 struct 语句。struct 语句定义一个新的数据类型，结构体中有一个或多个成员。type 语句设定了结构体的名称。结构体的格式如下：</p>
</li>
</ul>
<div class="highlight" id="id-28"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">struct_variable_type</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="nx">member</span> <span class="nx">definition</span>
</span></span><span class="line"><span class="cl">   <span class="nx">member</span> <span class="nx">definition</span>
</span></span><span class="line"><span class="cl">   <span class="o">...</span>
</span></span><span class="line"><span class="cl">   <span class="nx">member</span> <span class="nx">definition</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>一旦定义了结构体类型，它就能用于变量的声明，语法格式如下：</li>
</ul>
<div class="highlight" id="id-29"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="n">variable_name</span> <span class="p">:</span><span class="o">=</span> <span class="n">structure_variable_type</span> <span class="p">{</span><span class="n">value1</span><span class="p">,</span> <span class="n">value2</span><span class="o">...</span><span class="n">valuen</span><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="err">或</span>
</span></span><span class="line"><span class="cl"><span class="n">variable_name</span> <span class="p">:</span><span class="o">=</span> <span class="n">structure_variable_type</span> <span class="p">{</span> <span class="n">key1</span><span class="p">:</span> <span class="n">value1</span><span class="p">,</span> <span class="n">key2</span><span class="p">:</span> <span class="n">value2</span><span class="o">...</span><span class="p">,</span> <span class="n">keyn</span><span class="p">:</span> <span class="n">valuen</span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<h3 id="结构体指针" class="heading-element">
  <a href="#%e7%bb%93%e6%9e%84%e4%bd%93%e6%8c%87%e9%92%88" class="heading-mark"></a>0.16 结构体指针</h3></li>
</ul>
<p>你可以定义指向结构体的指针类似于其他指针变量，格式如下：</p>
<div class="highlight" id="id-30"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-gdscript3" data-lang="gdscript3"><span class="line"><span class="cl"><span class="k">var</span> <span class="n">struct_pointer</span> <span class="o">*</span><span class="n">Books</span></span></span></code></pre></td></tr></table>
</div>
</div><p>以上定义的指针变量可以存储结构体变量的地址。查看结构体变量地址，可以将 &amp; 符号放置于结构体变量前：</p>
<div class="highlight" id="id-31"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">struct_pointer = &amp;Book1</span></span></code></pre></td></tr></table>
</div>
</div><p>使用结构体指针访问结构体成员，使用 &ldquo;.&rdquo; 操作符：</p>
<div class="highlight" id="id-32"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">struct_pointer.title</span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<h3 id="实例化结构体" class="heading-element">
  <a href="#%e5%ae%9e%e4%be%8b%e5%8c%96%e7%bb%93%e6%9e%84%e4%bd%93" class="heading-mark"></a>0.17 实例化结构体</h3></li>
<li>
<p>实例化的方式:</p>
<ul>
<li>
<p>标准实例化</p>
</li>
<li>
<p>new()函数实例化</p>
</li>
<li>
<p>取地址实例化</p>
<div class="highlight" id="id-33"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Boy</span> <span class="kd">struct</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">age</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 标准实例化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="kd">var</span>  <span class="nx">boy</span> <span class="nx">Boy</span>
</span></span><span class="line"><span class="cl">	<span class="nx">boy</span><span class="p">.</span><span class="nx">name</span><span class="p">=</span><span class="s">&#34;Evan&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">boy</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>  <span class="c1">//Evan
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="c1">//new() 函数实例化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">newBoy</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">(</span><span class="nx">Boy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">newBoy</span><span class="p">.</span><span class="nx">age</span> <span class="p">=</span> <span class="mi">1</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">newBoy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="c1">//取地址实例化
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">addrBoy</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">Boy</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">addrBoy</span><span class="p">.</span><span class="nx">name</span> <span class="p">=</span> <span class="s">&#34;Evan&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">addrBoy</span><span class="p">)</span>  <span class="c1">//&amp;{Evan 0}
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">addrBoy</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span> <span class="c1">//Evan
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>取值方式:</p>
</li>
<li>
<p>无论哪种取值方式都可以通过.的方式取值</p>
</li>
<li>
<h3 id="初始化结构体" class="heading-element">
  <a href="#%e5%88%9d%e5%a7%8b%e5%8c%96%e7%bb%93%e6%9e%84%e4%bd%93" class="heading-mark"></a>0.18 初始化结构体</h3></li>
<li>
<p>初始化方式<code>初始化成员最后一定要有逗号</code></p>
<ul>
<li>键值对初始化
<ul>
<li>类似map</li>
</ul>
</li>
<li>列表初始化
<ul>
<li>必须按顺序初始化结构体中的全部成员</li>
<li>与键值对初始化方法不能混用</li>
</ul>
</li>
</ul>
<div class="highlight" id="id-34"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Boy</span> <span class="kd">struct</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">age</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">boy</span> <span class="o">:=</span><span class="nx">Boy</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">name</span><span class="p">:</span> <span class="s">&#34;evan&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">boy2</span> <span class="o">:=</span><span class="nx">Boy</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;bigox&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="mi">18</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">boy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">boy2</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">{evan 0}
</span></span></span><span class="line"><span class="cl"><span class="cm">{bigox 18}
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="结构体方法" class="heading-element">
  <a href="#%e7%bb%93%e6%9e%84%e4%bd%93%e6%96%b9%e6%b3%95" class="heading-mark"></a>0.19 结构体方法</h3><ul>
<li>
<p>方法: 包含了接收者的函数</p>
</li>
<li>
<p>结构体方法: 接收者可以使结构体类型的值后者指针</p>
<div class="highlight" id="id-35"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Boy</span> <span class="kd">struct</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">age</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 指针类型接收
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">boy</span> <span class="o">*</span><span class="nx">Boy</span><span class="p">)</span> <span class="nf">changeName</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">	<span class="nx">boy</span><span class="p">.</span><span class="nx">name</span> <span class="p">=</span> <span class="s">&#34;bigox&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 值类型接收
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">boy</span> <span class="nx">Boy</span><span class="p">)</span> <span class="nf">changeAge</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">	<span class="nx">boy</span><span class="p">.</span><span class="nx">age</span> <span class="p">=</span> <span class="mi">18</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="c1">// 初始化实例
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">boy</span> <span class="o">:=</span><span class="nx">Boy</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;evan&#34;</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">boy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">boy</span><span class="p">.</span><span class="nf">changeName</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">boy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">boy</span><span class="p">.</span><span class="nf">changeAge</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">boy</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">{evan 17}
</span></span></span><span class="line"><span class="cl"><span class="cm">{bigox 17}
</span></span></span><span class="line"><span class="cl"><span class="cm">{bigox 17}
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="结构体内嵌" class="heading-element">
  <a href="#%e7%bb%93%e6%9e%84%e4%bd%93%e5%86%85%e5%b5%8c" class="heading-mark"></a>0.20 结构体内嵌</h3><ul>
<li>
<p>结构体内嵌可以构建面向对象编程思想中的继承关系, 结构体实例化之后可以直接访问内嵌结构体中的所有成员变量和方法</p>
<div class="highlight" id="id-36"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Book</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">title</span>  <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">author</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">num</span>    <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">id</span>     <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">BookBorrow</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Book</span>
</span></span><span class="line"><span class="cl">	<span class="nx">borrowTime</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">BookNotBorrow</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Book</span>
</span></span><span class="line"><span class="cl">	<span class="nx">readTime</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bookBorrow</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">BookBorrow</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bookNotBorrow</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">BookNotBorrow</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">bookBorrow</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">bookNotBorrow</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">&amp;{{   0 0} }
</span></span></span><span class="line"><span class="cl"><span class="cm">&amp;{{   0 0} }
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>内嵌结构体实例化</p>
<div class="highlight" id="id-37"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Book</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">title</span>  <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">author</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">num</span>    <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="nx">id</span>     <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">BookBorrow</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Book</span>
</span></span><span class="line"><span class="cl">	<span class="nx">borrowTime</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">BookNotBorrow</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Book</span>
</span></span><span class="line"><span class="cl">	<span class="nx">readTime</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bookBorrow</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">BookBorrow</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">Book</span><span class="p">:</span><span class="nx">Book</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">			<span class="nx">title</span> <span class="p">:</span><span class="s">&#34;go&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">author</span> <span class="p">:</span><span class="s">&#34;Tom&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">num</span>    <span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">			<span class="nx">id</span>     <span class="p">:</span><span class="mi">110</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="p">},</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">bookBorrow</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">bookBorrow</span><span class="p">.</span><span class="nx">author</span> <span class="p">=</span> <span class="s">&#34;Jerry&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">bookBorrow</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="cm">/**
</span></span></span><span class="line"><span class="cl"><span class="cm">&amp;{{go Tom 1 110} }
</span></span></span><span class="line"><span class="cl"><span class="cm">&amp;{{go Jerry 1 110} }
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="匿名结构体" class="heading-element">
  <a href="#%e5%8c%bf%e5%90%8d%e7%bb%93%e6%9e%84%e4%bd%93" class="heading-mark"></a>0.21 匿名结构体</h3><ul>
<li>
<p>没有名字的结构体</p>
</li>
<li>
<p>无需使用type关键字, 但是创建匿名结构体的时候也要创建对象</p>
<div class="highlight" id="id-38"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl">	<span class="nx">book</span> <span class="o">:=</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">title</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">		<span class="nx">id</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="p">}{</span>
</span></span><span class="line"><span class="cl">		<span class="s">&#34;go&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">		<span class="mi">110</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">book</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>匿名函数一般可用于组织全局变量| 构建数据模板|和解析JSON使用;</p>
</li>
<li>
<p>经常使用匿名结构体来临时存储经过解析后的JSON数据;</p>
</li>
</ul>
<h3 id="结构体匿名字段" class="heading-element">
  <a href="#%e7%bb%93%e6%9e%84%e4%bd%93%e5%8c%bf%e5%90%8d%e5%ad%97%e6%ae%b5" class="heading-mark"></a>0.22 结构体匿名字段</h3><ul>
<li>
<p>创建结构体时, 字敦可以只有类型, 而没有字段名, 这样的字段成为匿名字段;</p>
<div class="highlight" id="id-39"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">Person</span> <span class="kd">struct</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Name</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="nx">Age</span>  <span class="kt">int</span> <span class="s">`json:&#34;age&#34;`</span>
</span></span><span class="line"><span class="cl">	<span class="kt">string</span>    <span class="c1">// 匿名字段
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
]]></description>
</item>
<item>
  <title>2-5. 基础语法</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515174529/</link>
  <pubDate>Thu, 15 May 2025 17:45:29 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515174529/</guid>
  <description><![CDATA[<h2 id="位-字节-字符-编码" class="heading-element">
  <a href="#%e4%bd%8d-%e5%ad%97%e8%8a%82-%e5%ad%97%e7%ac%a6-%e7%bc%96%e7%a0%81" class="heading-mark"></a>1 位-字节-字符-编码</h2><div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="mi">1</span><span class="err">、</span><span class="nx">位</span><span class="err">：</span><span class="nx">数据存储的最小单位</span><span class="err">。</span><span class="nx">每个二进制数字0或者1就是1个位</span><span class="err">；</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="mi">2</span><span class="err">、</span><span class="nx">字节</span><span class="err">：</span><span class="mi">8</span><span class="nx">个位构成一个字节</span><span class="err">；</span><span class="nx">即</span><span class="err">：</span><span class="mi">1</span> <span class="kt">byte</span> <span class="p">(</span><span class="nx">字节</span><span class="p">)=</span> <span class="mi">8</span> <span class="nf">bit</span><span class="p">(</span><span class="nx">位</span><span class="p">)</span><span class="err">；</span>
</span></span><span class="line"><span class="cl">     <span class="mi">1</span> <span class="nx">KB</span> <span class="p">=</span> <span class="mi">1024</span> <span class="nf">B</span><span class="p">(</span><span class="nx">字节</span><span class="p">)</span><span class="err">；</span>
</span></span><span class="line"><span class="cl">     <span class="mi">1</span> <span class="nx">MB</span> <span class="p">=</span> <span class="mi">1024</span> <span class="nx">KB</span><span class="p">;</span>   <span class="p">(</span><span class="mi">2</span><span class="p">^</span><span class="mi">10</span> <span class="nx">B</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="mi">1</span> <span class="nx">GB</span> <span class="p">=</span> <span class="mi">1024</span> <span class="nx">MB</span><span class="p">;</span>  <span class="p">(</span><span class="mi">2</span><span class="p">^</span><span class="mi">20</span> <span class="nx">B</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="mi">1</span> <span class="nx">TB</span> <span class="p">=</span> <span class="mi">1024</span> <span class="nx">GB</span><span class="p">;</span>   <span class="p">(</span><span class="mi">2</span><span class="p">^</span><span class="mi">30</span> <span class="nx">B</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="mi">3</span><span class="err">、</span><span class="nx">字符</span><span class="err">：</span><span class="nx">a</span><span class="err">、</span><span class="nx">A</span><span class="err">、</span><span class="nx">中</span><span class="err">、</span><span class="o">+</span><span class="err">、</span><span class="o">*</span><span class="err">、</span><span class="nx">の</span><span class="o">......</span><span class="nx">均表示一个字符</span> <span class="err">；</span>
</span></span><span class="line"><span class="cl">	<span class="nx">unioncode</span> <span class="nx">一个汉字4个字节表示</span>
</span></span><span class="line"><span class="cl">    <span class="nx">一般</span> <span class="nx">utf</span><span class="o">-</span><span class="mi">8</span> <span class="nx">编码下</span><span class="err">，</span><span class="nx">一个汉字</span> <span class="nx">字符</span> <span class="nx">占用</span> <span class="mi">3</span> <span class="nx">个</span> <span class="nx">字节</span><span class="err">；</span>
</span></span><span class="line"><span class="cl">    <span class="nx">一般</span> <span class="nx">gbk</span> <span class="nx">编码下</span><span class="err">，</span><span class="nx">一个汉字</span>  <span class="nx">字符</span>  <span class="nx">占用</span> <span class="mi">2</span> <span class="nx">个</span> <span class="nx">字节</span><span class="err">；</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="assic码" class="heading-element">
  <a href="#assic%e7%a0%81" class="heading-mark"></a>2 assic码</h2><table>
<thead>
<tr>
<th style="text-align:left">ASCII值</th>
<th style="text-align:left">控制字符</th>
<th style="text-align:left">ASCII值</th>
<th style="text-align:left">控制字符</th>
<th style="text-align:left">ASCII值</th>
<th style="text-align:left">控制字符</th>
<th style="text-align:left">ASCII值</th>
<th style="text-align:left">控制字符</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">NUT</td>
<td style="text-align:left">32</td>
<td style="text-align:left">(space)</td>
<td style="text-align:left">64</td>
<td style="text-align:left">@</td>
<td style="text-align:left">96</td>
<td style="text-align:left">、</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">SOH</td>
<td style="text-align:left">33</td>
<td style="text-align:left">!</td>
<td style="text-align:left">65</td>
<td style="text-align:left">A</td>
<td style="text-align:left">97</td>
<td style="text-align:left">a</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">STX</td>
<td style="text-align:left">34</td>
<td style="text-align:left">&quot;</td>
<td style="text-align:left">66</td>
<td style="text-align:left">B</td>
<td style="text-align:left">98</td>
<td style="text-align:left">b</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">ETX</td>
<td style="text-align:left">35</td>
<td style="text-align:left">#</td>
<td style="text-align:left">67</td>
<td style="text-align:left">C</td>
<td style="text-align:left">99</td>
<td style="text-align:left">c</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">EOT</td>
<td style="text-align:left">36</td>
<td style="text-align:left">$</td>
<td style="text-align:left">68</td>
<td style="text-align:left">D</td>
<td style="text-align:left">100</td>
<td style="text-align:left">d</td>
</tr>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">ENQ</td>
<td style="text-align:left">37</td>
<td style="text-align:left">%</td>
<td style="text-align:left">69</td>
<td style="text-align:left">E</td>
<td style="text-align:left">101</td>
<td style="text-align:left">e</td>
</tr>
<tr>
<td style="text-align:left">6</td>
<td style="text-align:left">ACK</td>
<td style="text-align:left">38</td>
<td style="text-align:left">&amp;</td>
<td style="text-align:left">70</td>
<td style="text-align:left">F</td>
<td style="text-align:left">102</td>
<td style="text-align:left">f</td>
</tr>
<tr>
<td style="text-align:left">7</td>
<td style="text-align:left">BEL</td>
<td style="text-align:left">39</td>
<td style="text-align:left">,</td>
<td style="text-align:left">71</td>
<td style="text-align:left">G</td>
<td style="text-align:left">103</td>
<td style="text-align:left">g</td>
</tr>
<tr>
<td style="text-align:left">8</td>
<td style="text-align:left">BS</td>
<td style="text-align:left">40</td>
<td style="text-align:left">(</td>
<td style="text-align:left">72</td>
<td style="text-align:left">H</td>
<td style="text-align:left">104</td>
<td style="text-align:left">h</td>
</tr>
<tr>
<td style="text-align:left">9</td>
<td style="text-align:left">HT</td>
<td style="text-align:left">41</td>
<td style="text-align:left">)</td>
<td style="text-align:left">73</td>
<td style="text-align:left">I</td>
<td style="text-align:left">105</td>
<td style="text-align:left">i</td>
</tr>
<tr>
<td style="text-align:left">10</td>
<td style="text-align:left">LF</td>
<td style="text-align:left">42</td>
<td style="text-align:left">*</td>
<td style="text-align:left">74</td>
<td style="text-align:left">J</td>
<td style="text-align:left">106</td>
<td style="text-align:left">j</td>
</tr>
<tr>
<td style="text-align:left">11</td>
<td style="text-align:left">VT</td>
<td style="text-align:left">43</td>
<td style="text-align:left">+</td>
<td style="text-align:left">75</td>
<td style="text-align:left">K</td>
<td style="text-align:left">107</td>
<td style="text-align:left">k</td>
</tr>
<tr>
<td style="text-align:left">12</td>
<td style="text-align:left">FF</td>
<td style="text-align:left">44</td>
<td style="text-align:left">,</td>
<td style="text-align:left">76</td>
<td style="text-align:left">L</td>
<td style="text-align:left">108</td>
<td style="text-align:left">l</td>
</tr>
<tr>
<td style="text-align:left">13</td>
<td style="text-align:left">CR</td>
<td style="text-align:left">45</td>
<td style="text-align:left">-</td>
<td style="text-align:left">77</td>
<td style="text-align:left">M</td>
<td style="text-align:left">109</td>
<td style="text-align:left">m</td>
</tr>
<tr>
<td style="text-align:left">14</td>
<td style="text-align:left">SO</td>
<td style="text-align:left">46</td>
<td style="text-align:left">.</td>
<td style="text-align:left">78</td>
<td style="text-align:left">N</td>
<td style="text-align:left">110</td>
<td style="text-align:left">n</td>
</tr>
<tr>
<td style="text-align:left">15</td>
<td style="text-align:left">SI</td>
<td style="text-align:left">47</td>
<td style="text-align:left">/</td>
<td style="text-align:left">79</td>
<td style="text-align:left">O</td>
<td style="text-align:left">111</td>
<td style="text-align:left">o</td>
</tr>
<tr>
<td style="text-align:left">16</td>
<td style="text-align:left">DLE</td>
<td style="text-align:left">48</td>
<td style="text-align:left">0</td>
<td style="text-align:left">80</td>
<td style="text-align:left">P</td>
<td style="text-align:left">112</td>
<td style="text-align:left">p</td>
</tr>
<tr>
<td style="text-align:left">17</td>
<td style="text-align:left">DCI</td>
<td style="text-align:left">49</td>
<td style="text-align:left">1</td>
<td style="text-align:left">81</td>
<td style="text-align:left">Q</td>
<td style="text-align:left">113</td>
<td style="text-align:left">q</td>
</tr>
<tr>
<td style="text-align:left">18</td>
<td style="text-align:left">DC2</td>
<td style="text-align:left">50</td>
<td style="text-align:left">2</td>
<td style="text-align:left">82</td>
<td style="text-align:left">R</td>
<td style="text-align:left">114</td>
<td style="text-align:left">r</td>
</tr>
<tr>
<td style="text-align:left">19</td>
<td style="text-align:left">DC3</td>
<td style="text-align:left">51</td>
<td style="text-align:left">3</td>
<td style="text-align:left">83</td>
<td style="text-align:left">S</td>
<td style="text-align:left">115</td>
<td style="text-align:left">s</td>
</tr>
<tr>
<td style="text-align:left">20</td>
<td style="text-align:left">DC4</td>
<td style="text-align:left">52</td>
<td style="text-align:left">4</td>
<td style="text-align:left">84</td>
<td style="text-align:left">T</td>
<td style="text-align:left">116</td>
<td style="text-align:left">t</td>
</tr>
<tr>
<td style="text-align:left">21</td>
<td style="text-align:left">NAK</td>
<td style="text-align:left">53</td>
<td style="text-align:left">5</td>
<td style="text-align:left">85</td>
<td style="text-align:left">U</td>
<td style="text-align:left">117</td>
<td style="text-align:left">u</td>
</tr>
<tr>
<td style="text-align:left">22</td>
<td style="text-align:left">SYN</td>
<td style="text-align:left">54</td>
<td style="text-align:left">6</td>
<td style="text-align:left">86</td>
<td style="text-align:left">V</td>
<td style="text-align:left">118</td>
<td style="text-align:left">v</td>
</tr>
<tr>
<td style="text-align:left">23</td>
<td style="text-align:left">TB</td>
<td style="text-align:left">55</td>
<td style="text-align:left">7</td>
<td style="text-align:left">87</td>
<td style="text-align:left">W</td>
<td style="text-align:left">119</td>
<td style="text-align:left">w</td>
</tr>
<tr>
<td style="text-align:left">24</td>
<td style="text-align:left">CAN</td>
<td style="text-align:left">56</td>
<td style="text-align:left">8</td>
<td style="text-align:left">88</td>
<td style="text-align:left">X</td>
<td style="text-align:left">120</td>
<td style="text-align:left">x</td>
</tr>
<tr>
<td style="text-align:left">25</td>
<td style="text-align:left">EM</td>
<td style="text-align:left">57</td>
<td style="text-align:left">9</td>
<td style="text-align:left">89</td>
<td style="text-align:left">Y</td>
<td style="text-align:left">121</td>
<td style="text-align:left">y</td>
</tr>
<tr>
<td style="text-align:left">26</td>
<td style="text-align:left">SUB</td>
<td style="text-align:left">58</td>
<td style="text-align:left">:</td>
<td style="text-align:left">90</td>
<td style="text-align:left">Z</td>
<td style="text-align:left">122</td>
<td style="text-align:left">z</td>
</tr>
<tr>
<td style="text-align:left">27</td>
<td style="text-align:left">ESC</td>
<td style="text-align:left">59</td>
<td style="text-align:left">;</td>
<td style="text-align:left">91</td>
<td style="text-align:left">[</td>
<td style="text-align:left">123</td>
<td style="text-align:left">{</td>
</tr>
<tr>
<td style="text-align:left">28</td>
<td style="text-align:left">FS</td>
<td style="text-align:left">60</td>
<td style="text-align:left">&lt;</td>
<td style="text-align:left">92</td>
<td style="text-align:left">/</td>
<td style="text-align:left">124</td>
<td style="text-align:left">|</td>
</tr>
<tr>
<td style="text-align:left">29</td>
<td style="text-align:left">GS</td>
<td style="text-align:left">61</td>
<td style="text-align:left">=</td>
<td style="text-align:left">93</td>
<td style="text-align:left">]</td>
<td style="text-align:left">125</td>
<td style="text-align:left">}</td>
</tr>
<tr>
<td style="text-align:left">30</td>
<td style="text-align:left">RS</td>
<td style="text-align:left">62</td>
<td style="text-align:left">&gt;</td>
<td style="text-align:left">94</td>
<td style="text-align:left">^</td>
<td style="text-align:left">126</td>
<td style="text-align:left">`</td>
</tr>
<tr>
<td style="text-align:left">31</td>
<td style="text-align:left">US</td>
<td style="text-align:left">63</td>
<td style="text-align:left">?</td>
<td style="text-align:left">95</td>
<td style="text-align:left">_</td>
<td style="text-align:left">127</td>
<td style="text-align:left">DEL</td>
</tr>
</tbody>
</table>
<h2 id="命名" class="heading-element">
  <a href="#%e5%91%bd%e5%90%8d" class="heading-mark"></a>3 命名</h2><ul>
<li>
<p>go语言中的函数名、变量名、常量名、类型名、语句标号和包名等所有的命名，都遵循一个简单的命名规则</p>
<ul>
<li>一个名字必须以一个字母或下划线开头，后面可以跟任意数量的字母、数字或下划线</li>
</ul>
</li>
<li>
<p>go语言中有25个关键字，不能用于自定义名字</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="k">break</span>        <span class="k">default</span>          <span class="kd">func</span>           <span class="kd">interface</span>         <span class="k">select</span>
</span></span><span class="line"><span class="cl"><span class="k">case</span>         <span class="k">defer</span>            <span class="k">go</span>             <span class="kd">map</span>               <span class="kd">struct</span>
</span></span><span class="line"><span class="cl"><span class="kd">chan</span>         <span class="k">else</span>             <span class="k">goto</span>           <span class="kn">package</span>           <span class="k">switch</span>
</span></span><span class="line"><span class="cl"><span class="kd">const</span>        <span class="k">fallthrough</span>      <span class="k">if</span>             <span class="k">range</span>             <span class="kd">type</span>
</span></span><span class="line"><span class="cl"><span class="k">continue</span>     <span class="k">for</span>              <span class="kn">import</span>         <span class="k">return</span>            <span class="kd">var</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>还有30多个预定义的名字，用于内建的常量、类型和函数</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//内建常量:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kc">true</span> <span class="kc">false</span> <span class="kc">iota</span> <span class="kc">nil</span>
</span></span><span class="line"><span class="cl"><span class="c1">//内建类型:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kt">int</span> <span class="kt">int8</span> <span class="kt">int16</span> <span class="kt">int32</span> <span class="kt">int64</span>
</span></span><span class="line"><span class="cl">    <span class="kt">uint</span> <span class="kt">uint8</span> <span class="kt">uint16</span> <span class="kt">uint32</span> <span class="kt">uint64</span> <span class="kt">uintptr</span>
</span></span><span class="line"><span class="cl">    <span class="kt">float32</span> <span class="kt">float64</span> <span class="kt">complex128</span> <span class="kt">complex64</span>
</span></span><span class="line"><span class="cl">    <span class="kt">bool</span> <span class="kt">byte</span> <span class="kt">rune</span> <span class="kt">string</span> <span class="kt">error</span>
</span></span><span class="line"><span class="cl"><span class="c1">//内建函数:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">make</span> <span class="nx">len</span> <span class="nx">cap</span> <span class="nx">new</span> <span class="nx">append</span> <span class="nx">copy</span> <span class="nx">close</span> <span class="nx">delete</span>
</span></span><span class="line"><span class="cl">    <span class="nx">complex</span> <span class="nx">real</span> <span class="nx">imag</span>
</span></span><span class="line"><span class="cl">    <span class="nx">panic</span> <span class="nx">recover</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h2 id="变量" class="heading-element">
  <a href="#%e5%8f%98%e9%87%8f" class="heading-mark"></a>4 变量</h2><div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span>  <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">a</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="nx">b</span> <span class="p">,</span> <span class="nx">c</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">	<span class="kd">var</span> <span class="p">(</span><span class="cm">/* */</span>
</span></span><span class="line"><span class="cl">		<span class="nx">d</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl">		<span class="nx">e</span> <span class="kt">string</span>
</span></span><span class="line"><span class="cl">		<span class="nx">f</span> <span class="kt">bool</span>
</span></span><span class="line"><span class="cl">	<span class="p">)</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">)</span>  <span class="c1">// 0   0  false
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><ol>
<li>
<p><strong>第一种，指定变量类型，如果没有初始化，则变量默认为零值</strong>。</p>
<p><em>零值就是变量没有做初始化时系统默认设置的值</em>。</p>
</li>
</ol>
<ul>
<li>
<p>数值类型（包括complex64/128）为 <strong>0</strong></p>
</li>
<li>
<p>布尔类型为 <strong>false</strong></p>
</li>
<li>
<p>字符串为 <strong>&quot;&quot;</strong>（空字符串）</p>
</li>
<li>
<p>以下几种类型为 <strong>nil</strong>：</p>
<div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">a</span> <span class="o">*</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">a</span> <span class="p">[]</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">a</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">a</span> <span class="kd">chan</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">a</span> <span class="kd">func</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="kt">int</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">a</span> <span class="kt">error</span> <span class="c1">// error 是接口
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<ol start="2">
<li>
<p><strong>第二种，根据值自行判定变量类型。</strong></p>
<div class="highlight" id="id-6"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">d</span> <span class="p">=</span> <span class="kc">true</span>
</span></span><span class="line"><span class="cl">  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p><strong>第三种，省略 var, 注意 := 左侧如果没有声明新的变量，就产生编译错误，格式：</strong></p>
<div class="highlight" id="id-7"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">v_name</span> <span class="o">:=</span> <span class="nx">value</span>
</span></span><span class="line"><span class="cl"><span class="c1">//可以将 var f string = &#34;Runoob&#34; 简写为 f := &#34;Runoob&#34;：
</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="常量" class="heading-element">
  <a href="#%e5%b8%b8%e9%87%8f" class="heading-mark"></a>5 常量</h2><p>常量的定义格式：</p>
<div class="highlight" id="id-8"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="nx">identifier</span> <span class="p">[</span><span class="kd">type</span><span class="p">]</span> <span class="p">=</span> <span class="nx">value</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>
<p><strong>在定义常量组时，如果不提供初始值，则表示将使用上行的表达式。</strong></p>
</li>
<li>
<p>常量是一个简单值的标识符，在程序运行时，不会被修改的量。</p>
</li>
<li>
<p>常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。</p>
</li>
</ul>
<h3 id="iota" class="heading-element">
  <a href="#iota" class="heading-mark"></a>5.1 iota</h3><ul>
<li>
<p>iota，特殊<strong>常量</strong>，可以认为是一个可以被编译器修改的常量, 变量中不可使用。</p>
</li>
<li>
<p>iota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。</p>
</li>
</ul>
<p>iota 可以被用作枚举值：</p>
<div class="highlight" id="id-9"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="nx">a</span> <span class="p">=</span> <span class="kc">iota</span>  <span class="c1">//0
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">b</span> <span class="p">=</span> <span class="kc">iota</span>  <span class="c1">//1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">c</span> <span class="p">=</span> <span class="kc">iota</span>  <span class="c1">//2
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><p>第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1；所以 a=0, b=1, c=2 可以简写为如下形式：</p>
<div class="highlight" id="id-10"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="nx">a</span> <span class="p">=</span> <span class="kc">iota</span>
</span></span><span class="line"><span class="cl">    <span class="nx">b</span>
</span></span><span class="line"><span class="cl">    <span class="nx">c</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>iota 只是在同一个 const 常量组内递增，每当有新的 const 关键字时，iota 计数会重新开始。</strong></li>
</ul>
<h3 id="iota-用法" class="heading-element">
  <a href="#iota-%e7%94%a8%e6%b3%95" class="heading-mark"></a>5.2 iota 用法</h3><div class="highlight" id="id-11"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">      <span class="nx">a</span> <span class="p">=</span> <span class="kc">iota</span>  <span class="o">*</span><span class="c1">//0*
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">b</span>      <span class="o">*</span><span class="c1">//1*
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">c</span>      <span class="o">*</span><span class="c1">//2*
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">d</span> <span class="p">=</span> <span class="s">&#34;ha&#34;</span>  <span class="o">*</span><span class="c1">//独立值，iota += 1*
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">e</span>      <span class="o">*</span><span class="c1">//&#34;ha&#34;  iota += 1*
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">f</span> <span class="p">=</span> <span class="mi">100</span>   <span class="o">*</span><span class="c1">//iota +=1*
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">g</span>      <span class="o">*</span><span class="c1">//100  iota +=1*
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">h</span> <span class="p">=</span> <span class="kc">iota</span>  <span class="o">*</span><span class="c1">//7,恢复计数*
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>      <span class="nx">i</span>      <span class="o">*</span><span class="c1">//8*
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>  <span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 0 1 2 ha ha 100 100 7 8
</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>iota 只是在同一个 const 常量组内递增，每当有新的 const 关键字时，iota 计数会重新开始。</strong></li>
</ul>
<h3 id="iota-和左右运算符" class="heading-element">
  <a href="#iota-%e5%92%8c%e5%b7%a6%e5%8f%b3%e8%bf%90%e7%ae%97%e7%ac%a6" class="heading-mark"></a>5.3 Iota 和左右运算符</h3><div class="highlight" id="id-12"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="kd">const</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">  <span class="nx">i</span><span class="p">=</span><span class="mi">1</span><span class="o">&lt;&lt;</span><span class="kc">iota</span>
</span></span><span class="line"><span class="cl">  <span class="nx">j</span><span class="p">=</span><span class="mi">3</span><span class="o">&lt;&lt;</span><span class="kc">iota</span>
</span></span><span class="line"><span class="cl">  <span class="nx">k</span>
</span></span><span class="line"><span class="cl">  <span class="nx">l</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;i=&#34;</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;j=&#34;</span><span class="p">,</span><span class="nx">j</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;k=&#34;</span><span class="p">,</span><span class="nx">k</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">  <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;l=&#34;</span><span class="p">,</span><span class="nx">l</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">i= 1
</span></span></span><span class="line"><span class="cl"><span class="cm">j= 6
</span></span></span><span class="line"><span class="cl"><span class="cm">k= 12
</span></span></span><span class="line"><span class="cl"><span class="cm">l= 24 */</span></span></span></code></pre></td></tr></table>
</div>
</div><p>iota 表示从 0 开始自动加 1，所以 <strong>i=1&laquo;0</strong>, <strong>j=3&laquo;1</strong>（<strong>&laquo;</strong> 表示左移的意思），即：i=1, j=6，这没问题，关键在 k 和 l，从输出结果看 <strong>k=3&laquo;2</strong>，<strong>l=3&laquo;3</strong>。</p>
<p>简单表述:</p>
<ul>
<li>
<p><strong>i=1</strong>：左移 0 位,不变仍为 1;</p>
</li>
<li>
<p><strong>j=3</strong>：左移 1 位,变为二进制 110, 即 6;</p>
</li>
<li>
<p><strong>k=3</strong>：左移 2 位,变为二进制 1100, 即 12;</p>
</li>
<li>
<p><strong>l=3</strong>：左移 3 位,变为二进制 11000,即 24。</p>
</li>
</ul>
<p>注：<strong>&laquo;n==*(2^n)</strong>。</p>
<div class="highlight" id="id-13"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// 左移运算符 &lt;&lt; 是双目运算符。左移 n 位就是乘以 2 的 n 次方。 其功能把 &lt;&lt; 左边的运算数的各二进位全部左移若干位，由 &lt;&lt; 右边的数指定移动的位数，高位丢弃，低位补 0。
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="c1">//右移运算符 &gt;&gt; 是双目运算符。右移 n 位就是除以 2 的 n 次方。 其功能是把 &gt;&gt; 左边的运算数的各二进位全部右移若干位， &gt;&gt; 右边的数指定移动的位数。
</span></span></span></code></pre></td></tr></table>
</div>
</div><h2 id="数据类型" class="heading-element">
  <a href="#%e6%95%b0%e6%8d%ae%e7%b1%bb%e5%9e%8b" class="heading-mark"></a>6 数据类型</h2><p>Go 语言按类别有以下几种数据类型：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>类型和描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><strong>布尔型</strong>布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool = true。</td>
</tr>
<tr>
<td>2</td>
<td><strong>数字类型</strong>整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。</td>
</tr>
<tr>
<td>3</td>
<td>**字符串类型:**字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。</td>
</tr>
<tr>
<td>4</td>
<td><strong>派生类型:</strong>  指针类型（Pointer） /数组类型   /结构化类型(struct)  / Channel 类型  / 函数类型   /切片类型   /接口类型（interface） /Map 类型</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>字符串格式化</p>
<p><a class="lightgallery" href="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/wpsCUQ8za.jpg?size=large" data-thumbnail="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/wpsCUQ8za.jpg?size=small" data-sub-html="<h2>img</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/wpsCUQ8za.jpg" alt="img" srcset="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/wpsCUQ8za.jpg?size=small, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/wpsCUQ8za.jpg?size=medium 1.5x, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/wpsCUQ8za.jpg?size=large 2x" data-title="img" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
<ul>
<li><code>%v</code>是万能的</li>
<li><code>%T</code>查看数据类型,类似<code>reflect.typeOf()</code></li>
</ul>
</li>
</ul>
<h3 id="字符串类型" class="heading-element">
  <a href="#%e5%ad%97%e7%ac%a6%e4%b8%b2%e7%b1%bb%e5%9e%8b" class="heading-mark"></a>6.1 字符串类型</h3><div class="highlight" id="id-14"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">:=</span> <span class="s">&#34;hello&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">unsafe</span><span class="p">.</span><span class="nf">Sizeof</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">输出结果为：16
</span></span></span><span class="line"><span class="cl"><span class="cm">字符串类型在 go 里是个结构, 包含指向底层数组的指针和长度,这两部分每部分都是 8 个字节，所以字符串类型大小为 16 个字节。
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div><ul>
<li>关键字string,用&quot;&ldquo;或者``反引号表示(&rsquo;&ldquo;&ldquo;支持控制符号,反引号所有的都会原样输出)</li>
<li>占位符 &lsquo;%s</li>
<li>万能占位符&rsquo;%v&rsquo;</li>
</ul>
<h4 id="字符串常用操作" class="heading-element">
  <a href="#%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%b8%b8%e7%94%a8%e6%93%8d%e4%bd%9c" class="heading-mark"></a>6.1.1 字符串常用操作</h4><ul>
<li>
<p>长度 **len(str) ** ,返回一个int, 返回的是字节的长度, 中文的字节长3</p>
</li>
<li>
<p>拼接: 使用**+<strong>或者</strong>fmt.Sprintf()**</p>
</li>
<li>
<p>分割: <strong>strings.Split(str,&lsquo;分割标识&rsquo;)</strong>, 返回一个切片</p>
</li>
<li>
<p>是否存在:</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">函数|返回值</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>strconv 包：</strong></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><strong>Atoi(s string) (int, error)</strong></td>
<td style="text-align:left"><strong>字符串转整型</strong></td>
</tr>
<tr>
<td style="text-align:left"><strong>strings 包：</strong></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left"><strong>Count(s, substr string) int</strong></td>
<td style="text-align:left"><strong>计算子串<code>substr</code>在字符串<code>s</code>中出现的次数</strong></td>
</tr>
<tr>
<td style="text-align:left">Compare(a, b string) int</td>
<td style="text-align:left">比较字符串大小</td>
</tr>
<tr>
<td style="text-align:left"><strong>Contains(s, substr string) bool</strong></td>
<td style="text-align:left"><strong>判断字符串<code>s</code>中是否包含子串<code>substr</code></strong></td>
</tr>
<tr>
<td style="text-align:left">ContainsAny(s, chars string) bool</td>
<td style="text-align:left">判断字符串<code>s</code>中是否包含<code>chars</code>中的某个Unicode字符</td>
</tr>
<tr>
<td style="text-align:left">ContainsRune(s string, r rune) bool</td>
<td style="text-align:left">判断字符串<code>s</code>中是否包含rune型值为<code>r</code>的字符</td>
</tr>
<tr>
<td style="text-align:left"><strong>Index(s, substr string) int</strong></td>
<td style="text-align:left"><strong>查找子串<code>substr</code>在字符串<code>s</code>中第一次出现的位置，如果找不到则返回 -1，如果<code>substr</code>为空，则返回 0</strong></td>
</tr>
<tr>
<td style="text-align:left">LastIndex(s, substr string) int</td>
<td style="text-align:left">查找子串<code>substr</code>在字符串<code>s</code>中最后出现的位置</td>
</tr>
<tr>
<td style="text-align:left">IndexRune(s string, r rune) int</td>
<td style="text-align:left">查找rune型值为<code>r</code>的字符在字符串<code>s</code>中出现的起始位置</td>
</tr>
<tr>
<td style="text-align:left">IndexAny(s, chars string) int</td>
<td style="text-align:left">查找字符串<code>chars</code>中字符，在字符串<code>s</code>中出现的起始位置</td>
</tr>
<tr>
<td style="text-align:left">LastIndexAny(s, chars string) int</td>
<td style="text-align:left">查找字符串<code>s</code>中出现<code>chars</code>中字符的最后位置</td>
</tr>
<tr>
<td style="text-align:left">LastIndexByte(s string, c byte) int</td>
<td style="text-align:left">查找byte型字符<code>c</code>在字符串<code>s</code>中的位置</td>
</tr>
<tr>
<td style="text-align:left">SplitN(s, sep string, n int) []string</td>
<td style="text-align:left">以字符串<code>sep</code>为分隔符，将字符串<code>s</code>切分成<code>n</code>个子串，结果中<strong>不包含</strong><code>sep</code>本身。如果<code>sep</code>为空则将<code>s</code>切分为 Unicode 字符列表，如果<code>s</code>中没有<code>sep</code>子串则整个<code>s</code>作为切片 []string 中的第一个元素返回。参数<code>n</code>表示最多切出几个子串，<code>s</code>超出切分大小时，超出部分不再切分。<code>n</code>超出切分子串个数时，返回实际切分子串数。如果<code>n</code>为 0，则返回 nil；如果<code>n</code>小于 0，则不限制切分个数，全部切分</td>
</tr>
<tr>
<td style="text-align:left">SplitAfterN(s, sep string, n int) []string</td>
<td style="text-align:left">以字符串<code>sep</code>为分隔符，将字符串<code>s</code>切分成<code>n</code>个子串，结果中<strong>包含</strong><code>sep</code>本身。如果<code>sep</code>为空则将<code>s</code>切分为 Unicode 字符列表，如果<code>s</code>中没有<code>sep</code>子串则整个<code>s</code>作为切片 []string 中的第一个元素返回。参数<code>n</code>表示最多切出几个子串，<code>s</code>超出切分大小时，超出部分不再切分。<code>n</code>超出切分子串个数时，返回实际切分子串数。如果<code>n</code>为 0，则返回 nil；如果<code>n</code>小于 0，则不限制切分个数，全部切分</td>
</tr>
<tr>
<td style="text-align:left"><strong>Split(s, sep string) []string</strong></td>
<td style="text-align:left"><strong>以字符串<code>sep</code>为分隔符，将<code>s</code>切分成多个子串，结果中不包含<code>sep</code>本身。如果<code>sep</code>为空，则将<code>s</code>切分成 Unicode 字符列表，如果<code>s</code>中没有<code>sep</code>子串，则将整个<code>s</code>作为 []string 的第一个元素返回</strong></td>
</tr>
<tr>
<td style="text-align:left">SplitAfter(s, sep string) []string</td>
<td style="text-align:left">以字符串<code>sep</code>为分隔符，将<code>s</code>切分成多个子串，结果中<strong>包含</strong><code>sep</code>本身。如果<code>sep</code>为空则将<code>s</code>切分为 Unicode 字符列表，如果<code>s</code>中没有<code>sep</code>子串则整个<code>s</code>作为切片 []string 中的第一个元素返回。</td>
</tr>
<tr>
<td style="text-align:left">Fields(s string) []string</td>
<td style="text-align:left">以连续的空白字符为分隔符，将<code>s</code>切分成多个子串，结果中不包含空白字符本身。空白字符有：\t, \n, \v, \f, \r, &lsquo;&rsquo;, U+0085 (NEL), U+00A0 (NBSP) 。如果<code>s</code>中只包含空白字符，则返回一个空切片</td>
</tr>
<tr>
<td style="text-align:left">FieldsFunc(s string, f func(rune) bool) []string</td>
<td style="text-align:left">以一个或多个满足函数<code>f(rune)</code>的字符为分隔符，将<code>s</code>切分成多个子串，结果中不包含分隔符本身。如果<code>s</code>中没有满足<code>f(rune)</code>的字符，则返回一个空切片</td>
</tr>
<tr>
<td style="text-align:left"><strong>Join(a []string, sep string) string</strong></td>
<td style="text-align:left"><strong>以<code>sep</code>为拼接符，拼接切片<code>a</code>中的字符串</strong></td>
</tr>
<tr>
<td style="text-align:left"><strong>HasPrefix(s, prefix string) bool</strong></td>
<td style="text-align:left"><strong>判断字符串<code>s</code>是否以<code>prefix</code>字符串开头，是返回 true，否则返回 false</strong></td>
</tr>
<tr>
<td style="text-align:left"><strong>HasSuffix(s, suffix string) bool</strong></td>
<td style="text-align:left"><strong>判断字符串<code>s</code>是否以<code>suffix</code>字符串结尾，是返回 true，否则返回 false</strong></td>
</tr>
<tr>
<td style="text-align:left">Map(f func(rune) rune, s string) string</td>
<td style="text-align:left">将字符串<code>s</code>中满足函数<code>f(rune)</code>的字符替换为<code>f(rune)</code>的返回值。如果<code>f(rune)</code>返回负数，则相应的字符将被删除</td>
</tr>
<tr>
<td style="text-align:left">Repeat(s string, count int) string</td>
<td style="text-align:left">返回字符串<code>s</code>重复<code>count</code>次数后的结果</td>
</tr>
<tr>
<td style="text-align:left"><strong>ToUpper(s string) string</strong></td>
<td style="text-align:left"><strong>将字符串<code>s</code>中的小写字符转为大写</strong></td>
</tr>
<tr>
<td style="text-align:left"><strong>ToLower(s string) string</strong></td>
<td style="text-align:left"><strong>将字符串<code>s</code>中的大写字符转为小写</strong></td>
</tr>
<tr>
<td style="text-align:left">ToTitle(s string) string</td>
<td style="text-align:left">将字符串<code>s</code>中的首个单词转为<code>Title</code>形式，大部分字符的<code>Title</code>格式就是<code>Upper</code>格式</td>
</tr>
<tr>
<td style="text-align:left">ToUpperSpecial(c unicode.SpecialCase, s string) string</td>
<td style="text-align:left">将字符串<code>s</code>中的所有字符修改为其大写格式，优先使用<code>c</code>中的规则进行转换</td>
</tr>
<tr>
<td style="text-align:left">ToLowerSpecial(c unicode.SpecialCase, s string) string</td>
<td style="text-align:left">将字符串<code>s</code>中的所有字符修改为其小写格式，优先使用<code>c</code>中的规则进行转换</td>
</tr>
<tr>
<td style="text-align:left">ToTitleSpecial(c unicode.SpecialCase, s string) string</td>
<td style="text-align:left">将字符串<code>s</code>中的所有字符修改为其<code>Title</code>格式，优先使用<code>c</code>中的规则进行转换</td>
</tr>
<tr>
<td style="text-align:left">Title(s string) string</td>
<td style="text-align:left">将字符串<code>s</code>中的所有单词的首字母修改为其<code>Title</code>格式（BUG: Title 规则不能正确处理 Unicode 标点符号）</td>
</tr>
<tr>
<td style="text-align:left">TrimLeftFunc(s string, f func(rune) bool) string</td>
<td style="text-align:left">删除字符串<code>s</code>左边连续满足<code>f(rune)</code>的字符</td>
</tr>
<tr>
<td style="text-align:left">TrimRightFunc(s string, f func(rune) bool) string</td>
<td style="text-align:left">删除字符串<code>s</code>右边连续满足<code>f(rune)</code>的字符</td>
</tr>
<tr>
<td style="text-align:left">TrimFunc(s string, f func(rune) bool) string</td>
<td style="text-align:left">删除字符串<code>s</code>左右两边连续满足<code>f(rune)</code>的字符</td>
</tr>
<tr>
<td style="text-align:left">IndexFunc(s string, f func(rune) bool) int</td>
<td style="text-align:left">查找字符串<code>s</code>中第一个满足<code>f(rune)</code>的字符的字节位置，没有返回 -1</td>
</tr>
<tr>
<td style="text-align:left">LastIndexFunc(s string, f func(rune) bool) int</td>
<td style="text-align:left">查找字符串<code>s</code>中最后一个满足<code>f(rune)</code>的字符的字节位置，没有返回 -1</td>
</tr>
<tr>
<td style="text-align:left"><strong>Trim(s string, cutset string) string</strong></td>
<td style="text-align:left"><strong>删除字符串<code>s</code>左右两边连续包含<code>cutset</code>的字符</strong></td>
</tr>
<tr>
<td style="text-align:left">TrimLeft(s string, cutset string) string</td>
<td style="text-align:left">删除字符串<code>s</code>左边连续包含<code>cutset</code>的字符</td>
</tr>
<tr>
<td style="text-align:left">TrimRight(s string, cutset string) string</td>
<td style="text-align:left">删除字符串<code>s</code>右边连续包含<code>cutset</code>的字符</td>
</tr>
<tr>
<td style="text-align:left"><strong>TrimSpace(s string) string</strong></td>
<td style="text-align:left"><strong>删除字符串<code>s</code>左右两边连续的空白字符</strong></td>
</tr>
<tr>
<td style="text-align:left">TrimPrefix(s, prefix string) string</td>
<td style="text-align:left">删除字符串<code>s</code> 头部的<code>prefix</code>字符串</td>
</tr>
<tr>
<td style="text-align:left">TrimSuffix(s, suffix string) string</td>
<td style="text-align:left">删除字符串<code>s</code> 尾部的<code>suffix</code>字符串</td>
</tr>
<tr>
<td style="text-align:left"><strong>Replace(s, old, new string, n int) string</strong></td>
<td style="text-align:left"><strong>替换字符串<code>s</code>中的<code>old</code>为<code>new</code>，如果<code>old</code>为空则在<code>s</code>中的每个字符间插入<code>new</code>包括首尾，<code>n</code>为替换次数， -1 时替换所有</strong></td>
</tr>
<tr>
<td style="text-align:left"><strong>EqualFold(s, t string) bool</strong></td>
<td style="text-align:left"><strong>忽略大小写比较字符串<code>s</code>和<code>t</code>，相同返回 true，反之返回 false</strong></td>
</tr>
</tbody>
</table>
<p><strong>1. 字符串转数字</strong></p>
<ul>
<li>strconv.Atoi：</li>
</ul>
<div class="highlight" id="id-15"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;strconv&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="kd">var</span> <span class="nx">str</span> <span class="p">=</span> <span class="s">&#34;111&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">i</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%d\n&#34;</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="c1">// 输出：111
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><p><strong>2. 大小写规则转换</strong>
strings.ToUpperSpecial：将字符串<code>s</code>中的所有字符修改为其大写格式，优先使用<code>c</code>中的规则进行转换
strings.ToLowerSpecial：将字符串<code>s</code>中的所有字符修改为其小写格式，优先使用<code>c</code>中的规则进行转换
strings.ToTitleSpecial：将字符串<code>s</code>中的所有字符修改为其<code>Title</code>格式，优先使用<code>c</code>中的规则进行转换
<code>c</code>规则说明，以下列语句为例：
unicode.CaseRange{&lsquo;A&rsquo;, &lsquo;Z&rsquo;, [unicode.MaxCase]rune{3, -3, 0}}</p>
<ul>
<li>其中 &lsquo;A&rsquo;, &lsquo;Z&rsquo; 表示此规则只影响 &lsquo;A&rsquo; 到 &lsquo;Z&rsquo; 之间的字符。</li>
<li>其中<code>[unicode.MaxCase]rune</code>数组表示：</li>
<li>当使用 ToUpperSpecial 转换时，将字符的 Unicode 编码与第一个元素值（3）相加</li>
<li>当使用 ToLowerSpecial 转换时，将字符的 Unicode 编码与第二个元素值（-3）相加</li>
<li>当使用 ToTitleSpecial 转换时，将字符的 Unicode 编码与第三个元素值（0）相加</li>
</ul>
<div class="highlight" id="id-16"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;strings&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;unicode&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">// 定义转换规则
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">var</span> <span class="nx">_MyCase</span> <span class="p">=</span> <span class="nx">unicode</span><span class="p">.</span><span class="nx">SpecialCase</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 将半角逗号替换为全角逗号，ToTitle 不处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">unicode</span><span class="p">.</span><span class="nx">CaseRange</span><span class="p">{</span><span class="sc">&#39;,&#39;</span><span class="p">,</span> <span class="sc">&#39;,&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">[</span><span class="nx">unicode</span><span class="p">.</span><span class="nx">MaxCase</span><span class="p">]</span><span class="kt">rune</span><span class="p">{</span><span class="sc">&#39;，&#39;</span> <span class="o">-</span> <span class="sc">&#39;,&#39;</span><span class="p">,</span> <span class="sc">&#39;，&#39;</span> <span class="o">-</span> <span class="sc">&#39;,&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">}},</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 将半角句号替换为全角句号，ToTitle 不处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">unicode</span><span class="p">.</span><span class="nx">CaseRange</span><span class="p">{</span><span class="sc">&#39;.&#39;</span><span class="p">,</span> <span class="sc">&#39;.&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">[</span><span class="nx">unicode</span><span class="p">.</span><span class="nx">MaxCase</span><span class="p">]</span><span class="kt">rune</span><span class="p">{</span><span class="sc">&#39;。&#39;</span> <span class="o">-</span> <span class="sc">&#39;.&#39;</span><span class="p">,</span> <span class="sc">&#39;。&#39;</span> <span class="o">-</span> <span class="sc">&#39;.&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">}},</span>
</span></span><span class="line"><span class="cl">        <span class="c1">// 将 ABC 分别替换为全角的 ＡＢＣ、ａｂｃ，ToTitle 不处理
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>        <span class="nx">unicode</span><span class="p">.</span><span class="nx">CaseRange</span><span class="p">{</span><span class="sc">&#39;A&#39;</span><span class="p">,</span> <span class="sc">&#39;C&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">            <span class="p">[</span><span class="nx">unicode</span><span class="p">.</span><span class="nx">MaxCase</span><span class="p">]</span><span class="kt">rune</span><span class="p">{</span><span class="sc">&#39;Ａ&#39;</span> <span class="o">-</span> <span class="sc">&#39;A&#39;</span><span class="p">,</span> <span class="sc">&#39;ａ&#39;</span> <span class="o">-</span> <span class="sc">&#39;A&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">}},</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">s</span> <span class="o">:=</span> <span class="s">&#34;ABCDEF,abcdef.&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">us</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">ToUpperSpecial</span><span class="p">(</span><span class="nx">_MyCase</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%q\n&#34;</span><span class="p">,</span> <span class="nx">us</span><span class="p">)</span> <span class="c1">// 输出：&#34;ＡＢＣDEF，ABCDEF。&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">ls</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">ToLowerSpecial</span><span class="p">(</span><span class="nx">_MyCase</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%q\n&#34;</span><span class="p">,</span> <span class="nx">ls</span><span class="p">)</span> <span class="c1">// 输出：&#34;ａｂｃdef，abcdef。&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">ts</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">ToTitleSpecial</span><span class="p">(</span><span class="nx">_MyCase</span><span class="p">,</span> <span class="nx">s</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%q\n&#34;</span><span class="p">,</span> <span class="nx">ts</span><span class="p">)</span> <span class="c1">// 输出：&#34;ABCDEF,ABCDEF.&#34;
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="字符串原理" class="heading-element">
  <a href="#%e5%ad%97%e7%ac%a6%e4%b8%b2%e5%8e%9f%e7%90%86" class="heading-mark"></a>6.2 字符串原理</h3><ul>
<li>
<p>单引号是字符,双引号是字符串</p>
</li>
<li>
<p><strong>字符串的底层就是一个byte数组,所以可以和 []byte 类型互相转换</strong></p>
</li>
<li>
<p>字符串是由byte字节组成的,所以字符串的长度是byte字节的长度</p>
</li>
<li>
<p>rune类型用来表示utf8字符,一个rune字符由1个或多个byte组成</p>
<ul>
<li>
<p>对包含中文的字符串排序</p>
<div class="highlight" id="id-17"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">	<span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">	<span class="nx">str</span> <span class="o">:=</span> <span class="s">&#34;ABCDEFGH你好&#34;</span>
</span></span><span class="line"><span class="cl">	<span class="nx">strRune</span> <span class="o">:=</span> <span class="p">[]</span><span class="nb">rune</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">	<span class="k">for</span> <span class="nx">i</span><span class="o">:=</span><span class="mi">0</span> <span class="p">;</span> <span class="nx">i</span><span class="p">&lt;</span><span class="nb">len</span><span class="p">(</span><span class="nx">strRune</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">		<span class="nx">item</span> <span class="o">:=</span> <span class="nx">strRune</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="nx">strRune</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">strRune</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="nx">strRune</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="nx">i</span><span class="p">]</span>
</span></span><span class="line"><span class="cl">		<span class="nx">strRune</span><span class="p">[</span><span class="nb">len</span><span class="p">(</span><span class="nx">strRune</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">item</span>
</span></span><span class="line"><span class="cl">	<span class="p">}</span>
</span></span><span class="line"><span class="cl">	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="nx">str</span><span class="p">))</span> 	<span class="c1">// 14
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">strRune</span><span class="p">)</span>    <span class="c1">//  [22909 20320 72 71 70 69 68 67 66 65]
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nb">string</span><span class="p">(</span><span class="nx">strRune</span><span class="p">))</span>   <span class="c1">//好你HGFEDCBA
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>扩展</p>
<div class="highlight" id="id-18"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">//1、位：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">数据存储的最小单位</span><span class="err">。</span><span class="nx">每个二进制数字0或者1就是1个位</span><span class="err">；</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//2、字节：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="mi">8</span><span class="nx">个位构成一个字节</span><span class="err">；</span><span class="nx">即</span><span class="err">：</span><span class="mi">1</span> <span class="kt">byte</span> <span class="p">(</span><span class="nx">字节</span><span class="p">)=</span> <span class="mi">8</span> <span class="nf">bit</span><span class="p">(</span><span class="nx">位</span><span class="p">)</span><span class="err">；</span>
</span></span><span class="line"><span class="cl">     <span class="mi">1</span> <span class="nx">KB</span> <span class="p">=</span> <span class="mi">1024</span> <span class="nf">B</span><span class="p">(</span><span class="nx">字节</span><span class="p">)</span><span class="err">；</span>
</span></span><span class="line"><span class="cl">     <span class="mi">1</span> <span class="nx">MB</span> <span class="p">=</span> <span class="mi">1024</span> <span class="nx">KB</span><span class="p">;</span>   <span class="p">(</span><span class="mi">2</span><span class="p">^</span><span class="mi">10</span> <span class="nx">B</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="mi">1</span> <span class="nx">GB</span> <span class="p">=</span> <span class="mi">1024</span> <span class="nx">MB</span><span class="p">;</span>  <span class="p">(</span><span class="mi">2</span><span class="p">^</span><span class="mi">20</span> <span class="nx">B</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">     <span class="mi">1</span> <span class="nx">TB</span> <span class="p">=</span> <span class="mi">1024</span> <span class="nx">GB</span><span class="p">;</span>   <span class="p">(</span><span class="mi">2</span><span class="p">^</span><span class="mi">30</span> <span class="nx">B</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//3、字符：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>     <span class="nx">a</span><span class="err">、</span><span class="nx">A</span><span class="err">、</span><span class="nx">中</span><span class="err">、</span><span class="o">+</span><span class="err">、</span><span class="o">*</span><span class="err">、</span><span class="nx">の</span><span class="o">......</span><span class="nx">均表示一个字符</span><span class="err">；</span>
</span></span><span class="line"><span class="cl">		 <span class="nx">unicode</span><span class="p">,</span><span class="nx">万国码</span><span class="p">,</span><span class="mi">32</span><span class="nx">位既4个字节表示一个字符</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">     <span class="nx">一般</span> <span class="nx">utf</span><span class="o">-</span><span class="mi">8</span> <span class="nx">编码下</span><span class="err">，</span><span class="nx">一个汉字</span> <span class="nx">字符</span> <span class="nx">占用</span> <span class="mi">3</span> <span class="nx">个</span> <span class="nx">字节</span><span class="err">；</span>
</span></span><span class="line"><span class="cl">     <span class="nx">一般</span> <span class="nx">gbk</span> <span class="nx">编码下</span><span class="err">，</span><span class="nx">一个汉字</span>  <span class="nx">字符</span>  <span class="nx">占用</span> <span class="mi">2</span> <span class="nx">个</span> <span class="nx">字节</span><span class="err">；</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//4、字节和字符：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">字节是计算机传输数据的格式</span><span class="err">，</span><span class="nx">供计算识别的</span><span class="err">。</span>
</span></span><span class="line"><span class="cl"><span class="nx">字符是供人类观看的内容</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//5、编码：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">编码</span><span class="err">（</span><span class="nx">encoding</span><span class="err">）</span><span class="p">:</span><span class="nx">把</span><span class="err">…</span><span class="nx">译成密码</span><span class="err">。</span><span class="o">==</span><span class="err">》</span><span class="nx">二进制</span>
</span></span><span class="line"><span class="cl"><span class="nx">解码</span><span class="err">（</span><span class="nx">decoding</span><span class="err">）：</span><span class="nx">破译</span><span class="p">(</span><span class="nx">尤指密码</span><span class="p">)</span> <span class="o">==</span><span class="err">》</span><span class="nx">破解密码成可以看的懂的</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">//6.编码格式：
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">字节和字符之间转换</span><span class="err">，</span><span class="nx">参照的规则就是编码格式</span><span class="err">。</span>
</span></span><span class="line"><span class="cl"><span class="nx">Unicode</span> <span class="nx">编码共有三种具体实现</span><span class="err">，</span><span class="nx">分别为utf</span><span class="o">-</span><span class="mi">8</span><span class="p">,</span><span class="nx">utf</span><span class="o">-</span><span class="mi">16</span><span class="p">,</span><span class="nx">utf</span><span class="o">-</span><span class="mi">32</span><span class="err">，</span><span class="nx">其中utf</span><span class="o">-</span><span class="mi">8</span><span class="nx">占用一到四个字节</span><span class="err">，</span><span class="nx">utf</span><span class="o">-</span><span class="mi">16</span><span class="nx">占用二或四个字节</span><span class="err">，</span><span class="nx">utf</span><span class="o">-</span><span class="mi">32</span><span class="nx">占用四个字节</span><span class="err">。</span>
</span></span><span class="line"><span class="cl"><span class="nx">Unicode码的前128个字符就是ASCII码</span><span class="err">，</span><span class="nx">之后是ASCII码的扩展码</span><span class="err">。</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h3 id="数字类型" class="heading-element">
  <a href="#%e6%95%b0%e5%ad%97%e7%b1%bb%e5%9e%8b" class="heading-mark"></a>6.3 数字类型</h3><ul>
<li>
<p>Go 也有基于架构的类型，例如：int、uint 和 uintptr。</p>
</li>
<li>
<p>所有整数初始化为0,所有浮点数初始化为0.0,布尔类型初始化为 false</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>序号</th>
<th>类型和描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><strong>uint8</strong>无符号 8 位整型 (0 到 255)</td>
</tr>
<tr>
<td>2</td>
<td><strong>uint16</strong>无符号 16 位整型 (0 到 65535)</td>
</tr>
<tr>
<td>3</td>
<td><strong>uint32</strong>无符号 32 位整型 (0 到 4294967295)</td>
</tr>
<tr>
<td>4</td>
<td><strong>uint64</strong>无符号 64 位整型 (0 到 18446744073709551615)</td>
</tr>
<tr>
<td>5</td>
<td><strong>int8</strong>有符号 8 位整型 (-128 到 127)</td>
</tr>
<tr>
<td>6</td>
<td><strong>int16</strong>有符号 16 位整型 (-32768 到 32767)</td>
</tr>
<tr>
<td>7</td>
<td><strong>int32</strong>有符号 32 位整型 (-2147483648 到 2147483647)</td>
</tr>
<tr>
<td>8</td>
<td><strong>int64</strong>有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</td>
</tr>
</tbody>
</table>
<h4 id="浮点型" class="heading-element">
  <a href="#%e6%b5%ae%e7%82%b9%e5%9e%8b" class="heading-mark"></a>6.3.1 <strong>浮点型</strong></h4><table>
<thead>
<tr>
<th>序号</th>
<th>类型和描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><strong>float32</strong>IEEE-754 32位浮点型数</td>
</tr>
<tr>
<td>2</td>
<td><strong>float64</strong>IEEE-754 64位浮点型数</td>
</tr>
<tr>
<td>3</td>
<td><strong>complex64</strong>32 位实数和虚数</td>
</tr>
<tr>
<td>4</td>
<td><strong>complex128</strong>64 位实数和虚数</td>
</tr>
</tbody>
</table>
<hr>
<h4 id="其他数字类型" class="heading-element">
  <a href="#%e5%85%b6%e4%bb%96%e6%95%b0%e5%ad%97%e7%b1%bb%e5%9e%8b" class="heading-mark"></a>6.3.2 其他数字类型</h4><p>以下列出了其他更多的数字类型：</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>类型和描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td><strong>byte</strong>类似 uint8</td>
</tr>
<tr>
<td>2</td>
<td><strong>rune</strong>类似 int32</td>
</tr>
<tr>
<td>3</td>
<td><strong>uint</strong>32 或 64 位</td>
</tr>
<tr>
<td>4</td>
<td><strong>int</strong>与 uint 一样大小</td>
</tr>
<tr>
<td>5</td>
<td><strong>uintptr</strong>无符号整型，用于存放一个指针</td>
</tr>
</tbody>
</table>
<h2 id="时间和日期" class="heading-element">
  <a href="#%e6%97%b6%e9%97%b4%e5%92%8c%e6%97%a5%e6%9c%9f" class="heading-mark"></a>7 时间和日期</h2><p><code>time 包</code></p>
<ul>
<li>时间
<div class="highlight" id="id-19"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">now</span> <span class="o">:=</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">now</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 分别获取年月日等
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">year</span> <span class="o">:=</span> <span class="nx">now</span><span class="p">.</span><span class="nf">Year</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nx">month</span> <span class="o">:=</span> <span class="nx">now</span><span class="p">.</span><span class="nf">Month</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nx">day</span> <span class="o">:=</span> <span class="nx">now</span><span class="p">.</span><span class="nf">Day</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nx">hour</span> <span class="o">:=</span> <span class="nx">now</span><span class="p">.</span><span class="nf">Hour</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nx">minute</span> <span class="o">:=</span> <span class="nx">now</span><span class="p">.</span><span class="nf">Minute</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="nx">send</span> <span class="o">:=</span> <span class="nx">now</span><span class="p">.</span><span class="nf">Second</span><span class="p">()</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<p>// 时间格式化
timer := time.Now()
res := timer.Format(&ldquo;2006-01-02 15:04:05&rdquo;)</p>
<div class="highlight" id="id-20"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">- `%02d 不足两位的数字在前面补0`
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">- 时间戳
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">```go
</span></span><span class="line"><span class="cl">// 获取时间戳
</span></span><span class="line"><span class="cl">timeStamp := time.Now().Unix()
</span></span><span class="line"><span class="cl">fmt.Println(timeStamp)
</span></span><span class="line"><span class="cl">// 时间戳转时间
</span></span><span class="line"><span class="cl">nowObj := time.Unix(timeStamp,0)
</span></span><span class="line"><span class="cl">year =nowObj.Year()
</span></span><span class="line"><span class="cl">month =nowObj.Month()
</span></span><span class="line"><span class="cl">day =nowObj.Day()
</span></span><span class="line"><span class="cl">fmt.Printf(&#34;%02d-%02d-%02d &#34;,year,month,day) 
</span></span><span class="line"><span class="cl">// %02d 不足两位的数字在前面补0</span></span></code></pre></td></tr></table>
</div>
</div><h2 id="运算符" class="heading-element">
  <a href="#%e8%bf%90%e7%ae%97%e7%ac%a6" class="heading-mark"></a>8 运算符</h2><p>Go 语言内置的运算符有：</p>
<ul>
<li>算术运算符</li>
<li>关系运算符</li>
<li>逻辑运算符</li>
<li>位运算符</li>
<li>赋值运算符</li>
<li>其他运算符</li>
</ul>
<h3 id="算术运算符" class="heading-element">
  <a href="#%e7%ae%97%e6%9c%af%e8%bf%90%e7%ae%97%e7%ac%a6" class="heading-mark"></a>8.1 算术运算符</h3><p>下表列出了所有Go语言的算术运算符。假定 A 值为 10，B 值为 20。</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">+</td>
<td style="text-align:left">相加</td>
<td style="text-align:left">A + B 输出结果 30</td>
</tr>
<tr>
<td style="text-align:left">-</td>
<td style="text-align:left">相减</td>
<td style="text-align:left">A - B 输出结果 -10</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">相乘</td>
<td style="text-align:left">A * B 输出结果 200</td>
</tr>
<tr>
<td style="text-align:left">/</td>
<td style="text-align:left">相除</td>
<td style="text-align:left">B / A 输出结果 2</td>
</tr>
<tr>
<td style="text-align:left">%</td>
<td style="text-align:left">求余</td>
<td style="text-align:left">B % A 输出结果 0</td>
</tr>
<tr>
<td style="text-align:left">++</td>
<td style="text-align:left">自增</td>
<td style="text-align:left">A++ 输出结果 11</td>
</tr>
<tr>
<td style="text-align:left">&ndash;</td>
<td style="text-align:left">自减</td>
<td style="text-align:left">A&ndash; 输出结果 9</td>
</tr>
</tbody>
</table>
<h3 id="关系运算符" class="heading-element">
  <a href="#%e5%85%b3%e7%b3%bb%e8%bf%90%e7%ae%97%e7%ac%a6" class="heading-mark"></a>8.2 关系运算符</h3><p>下表列出了所有Go语言的关系运算符。假定 A 值为 10，B 值为 20。</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">==</td>
<td style="text-align:left">检查两个值是否相等，如果相等返回 True 否则返回 False。</td>
<td style="text-align:left">(A == B) 为 False</td>
</tr>
<tr>
<td style="text-align:left">!=</td>
<td style="text-align:left">检查两个值是否不相等，如果不相等返回 True 否则返回 False。</td>
<td style="text-align:left">(A != B) 为 True</td>
</tr>
<tr>
<td style="text-align:left">&gt;</td>
<td style="text-align:left">检查左边值是否大于右边值，如果是返回 True 否则返回 False。</td>
<td style="text-align:left">(A &gt; B) 为 False</td>
</tr>
<tr>
<td style="text-align:left">&lt;</td>
<td style="text-align:left">检查左边值是否小于右边值，如果是返回 True 否则返回 False。</td>
<td style="text-align:left">(A &lt; B) 为 True</td>
</tr>
<tr>
<td style="text-align:left">&gt;=</td>
<td style="text-align:left">检查左边值是否大于等于右边值，如果是返回 True 否则返回 False。</td>
<td style="text-align:left">(A &gt;= B) 为 False</td>
</tr>
<tr>
<td style="text-align:left">&lt;=</td>
<td style="text-align:left">检查左边值是否小于等于右边值，如果是返回 True 否则返回 False。</td>
<td style="text-align:left">(A &lt;= B) 为 True</td>
</tr>
</tbody>
</table>
<h3 id="逻辑运算符" class="heading-element">
  <a href="#%e9%80%bb%e8%be%91%e8%bf%90%e7%ae%97%e7%ac%a6" class="heading-mark"></a>8.3 逻辑运算符</h3><p>下表列出了所有Go语言的逻辑运算符。假定 A 值为 True，B 值为 False。</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&amp;&amp;</td>
<td style="text-align:left">逻辑 AND 运算符。 如果两边的操作数都是 True，则条件 True，否则为 False。</td>
<td style="text-align:left">(A &amp;&amp; B) 为 False</td>
</tr>
<tr>
<td style="text-align:left">||</td>
<td style="text-align:left">逻辑 OR 运算符。 如果两边的操作数有一个 True，则条件 True，否则为 False。</td>
<td style="text-align:left">(A || B) 为 True</td>
</tr>
<tr>
<td style="text-align:left">!</td>
<td style="text-align:left">逻辑 NOT 运算符。 如果条件为 True，则逻辑 NOT 条件 False，否则为 True。</td>
<td style="text-align:left">!(A &amp;&amp; B) 为 True</td>
</tr>
</tbody>
</table>
<h3 id="位运算符" class="heading-element">
  <a href="#%e4%bd%8d%e8%bf%90%e7%ae%97%e7%ac%a6" class="heading-mark"></a>8.4 位运算符</h3><p>位运算符对整数在内存中的二进制位进行操作。</p>
<p>下表列出了位运算符 &amp;, |, 和 ^ 的计算：</p>
<table>
<thead>
<tr>
<th style="text-align:left">p</th>
<th style="text-align:left">q</th>
<th style="text-align:left">p &amp; q</th>
<th style="text-align:left">p | q</th>
<th style="text-align:left">p ^ q</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
<td style="text-align:left">0</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">0</td>
<td style="text-align:left">0</td>
<td style="text-align:left">1</td>
<td style="text-align:left">1</td>
</tr>
</tbody>
</table>
<p>假定 A = 60; B = 13; 其二进制数转换为：</p>
<div class="highlight" id="id-21"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">A</span> <span class="p">=</span> <span class="mo">0011</span> <span class="mi">1100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">B</span> <span class="p">=</span> <span class="mo">0000</span> <span class="mi">1101</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="o">-----------------</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">A</span><span class="o">&amp;</span><span class="nx">B</span> <span class="p">=</span> <span class="mo">0000</span> <span class="mi">1100</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">A</span><span class="p">|</span><span class="nx">B</span> <span class="p">=</span> <span class="mo">0011</span> <span class="mi">1101</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nx">A</span><span class="p">^</span><span class="nx">B</span> <span class="p">=</span> <span class="mo">0011</span> <span class="mo">0001</span></span></span></code></pre></td></tr></table>
</div>
</div><p>Go 语言支持的位运算符如下表所示。假定 A 为60，B 为13：</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&amp;</td>
<td style="text-align:left">按位与运算符&rdquo;&amp;&ldquo;是双目运算符。 其功能是参与运算的两数各对应的二进位相与。</td>
<td style="text-align:left">(A &amp; B) 结果为 12, 二进制为 0000 1100</td>
</tr>
<tr>
<td style="text-align:left">|</td>
<td style="text-align:left">按位或运算符&rdquo;|&ldquo;是双目运算符。 其功能是参与运算的两数各对应的二进位相或</td>
<td style="text-align:left">(A | B) 结果为 61, 二进制为 0011 1101</td>
</tr>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">按位异或运算符&rdquo;^&ldquo;是双目运算符。 其功能是参与运算的两数各对应的二进位相异或，当两对应的二进位相异时，结果为1。</td>
<td style="text-align:left">(A ^ B) 结果为 49, 二进制为 0011 0001</td>
</tr>
<tr>
<td style="text-align:left">&laquo;</td>
<td style="text-align:left">左移运算符&rdquo;&laquo;&ldquo;是双目运算符。左移n位就是乘以2的n次方。 其功能把&rdquo;&laquo;&ldquo;左边的运算数的各二进位全部左移若干位，由&rdquo;&laquo;&ldquo;右边的数指定移动的位数，高位丢弃，低位补0。</td>
<td style="text-align:left">A &laquo; 2 结果为 240 ，二进制为 1111 0000</td>
</tr>
<tr>
<td style="text-align:left">&raquo;</td>
<td style="text-align:left">右移运算符&rdquo;&raquo;&ldquo;是双目运算符。右移n位就是除以2的n次方。 其功能是把&rdquo;&raquo;&ldquo;左边的运算数的各二进位全部右移若干位，&quot;&raquo;&ldquo;右边的数指定移动的位数。</td>
<td style="text-align:left">A &raquo; 2 结果为 15 ，二进制为 0000 1111</td>
</tr>
</tbody>
</table>
<p>以下实例演示了位运算符的用法：</p>
<div class="highlight" id="id-22"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">a</span> <span class="kt">uint</span> <span class="p">=</span> <span class="mi">60</span>   <span class="cm">/* 60 = 0011 1100 */</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">b</span> <span class="kt">uint</span> <span class="p">=</span> <span class="mi">13</span>   <span class="cm">/* 13 = 0000 1101 */</span>
</span></span><span class="line"><span class="cl">  <span class="kd">var</span> <span class="nx">c</span> <span class="kt">uint</span> <span class="p">=</span> <span class="mi">0</span>      
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">  <span class="nx">c</span> <span class="p">=</span> <span class="nx">a</span> <span class="o">&amp;</span> <span class="nx">b</span>    <span class="o">*/</span><span class="err">\</span><span class="o">*</span> <span class="mi">12</span> <span class="p">=</span> <span class="mo">0000</span> <span class="mi">1100</span> <span class="err">\</span><span class="o">*</span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">  fmt.Printf(&#34;第一行 - c 的值为 %d**\n**&#34;, c )
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  c = a | b    */</span><span class="err">\</span><span class="o">*</span> <span class="mi">61</span> <span class="p">=</span> <span class="mo">0011</span> <span class="mi">1101</span> <span class="err">\</span><span class="o">*</span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">  fmt.Printf(&#34;第二行 - c 的值为 %d**\n**&#34;, c )
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  c = a ^ b    */</span><span class="err">\</span><span class="o">*</span> <span class="mi">49</span> <span class="p">=</span> <span class="mo">0011</span> <span class="mo">0001</span> <span class="err">\</span><span class="o">*</span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">  fmt.Printf(&#34;第三行 - c 的值为 %d**\n**&#34;, c )
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  c = a &lt;&lt; 2   */</span><span class="err">\</span><span class="o">*</span> <span class="mi">240</span> <span class="p">=</span> <span class="mi">1111</span> <span class="mo">0000</span> <span class="err">\</span><span class="o">*</span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">  fmt.Printf(&#34;第四行 - c 的值为 %d**\n**&#34;, c )
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">  c = a &gt;&gt; 2   */</span><span class="err">\</span><span class="o">*</span> <span class="mi">15</span> <span class="p">=</span> <span class="mo">0000</span> <span class="mi">1111</span> <span class="err">\</span><span class="o">*</span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">  fmt.Printf(&#34;第五行 - c 的值为 %d**\n**&#34;, c )
</span></span></span><span class="line"><span class="cl"><span class="cm">}
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">第一行 - c 的值为 12
</span></span></span><span class="line"><span class="cl"><span class="cm">第二行 - c 的值为 61
</span></span></span><span class="line"><span class="cl"><span class="cm">第三行 - c 的值为 49
</span></span></span><span class="line"><span class="cl"><span class="cm">第四行 - c 的值为 240
</span></span></span><span class="line"><span class="cl"><span class="cm">第五行 - c 的值为 15
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="赋值运算符" class="heading-element">
  <a href="#%e8%b5%8b%e5%80%bc%e8%bf%90%e7%ae%97%e7%ac%a6" class="heading-mark"></a>8.5 赋值运算符</h3><p>下表列出了所有Go语言的赋值运算符。</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">=</td>
<td style="text-align:left">简单的赋值运算符，将一个表达式的值赋给一个左值</td>
<td style="text-align:left">C = A + B 将 A + B 表达式结果赋值给 C</td>
</tr>
<tr>
<td style="text-align:left">+=</td>
<td style="text-align:left">相加后再赋值</td>
<td style="text-align:left">C += A 等于 C = C + A</td>
</tr>
<tr>
<td style="text-align:left">-=</td>
<td style="text-align:left">相减后再赋值</td>
<td style="text-align:left">C -= A 等于 C = C - A</td>
</tr>
<tr>
<td style="text-align:left">*=</td>
<td style="text-align:left">相乘后再赋值</td>
<td style="text-align:left">C *= A 等于 C = C * A</td>
</tr>
<tr>
<td style="text-align:left">/=</td>
<td style="text-align:left">相除后再赋值</td>
<td style="text-align:left">C /= A 等于 C = C / A</td>
</tr>
<tr>
<td style="text-align:left">%=</td>
<td style="text-align:left">求余后再赋值</td>
<td style="text-align:left">C %= A 等于 C = C % A</td>
</tr>
<tr>
<td style="text-align:left">&laquo;=</td>
<td style="text-align:left">左移后赋值</td>
<td style="text-align:left">C &laquo;= 2 等于 C = C &laquo; 2</td>
</tr>
<tr>
<td style="text-align:left">&raquo;=</td>
<td style="text-align:left">右移后赋值</td>
<td style="text-align:left">C &raquo;= 2 等于 C = C &raquo; 2</td>
</tr>
<tr>
<td style="text-align:left">&amp;=</td>
<td style="text-align:left">按位与后赋值</td>
<td style="text-align:left">C &amp;= 2 等于 C = C &amp; 2</td>
</tr>
<tr>
<td style="text-align:left">^=</td>
<td style="text-align:left">按位异或后赋值</td>
<td style="text-align:left">C ^= 2 等于 C = C ^ 2</td>
</tr>
<tr>
<td style="text-align:left">|=</td>
<td style="text-align:left">按位或后赋值</td>
<td style="text-align:left">C |= 2 等于 C = C | 2</td>
</tr>
</tbody>
</table>
<h3 id="其他运算符" class="heading-element">
  <a href="#%e5%85%b6%e4%bb%96%e8%bf%90%e7%ae%97%e7%ac%a6" class="heading-mark"></a>8.6 其他运算符</h3><p>下表列出了Go语言的其他运算符。</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">&amp;</td>
<td style="text-align:left">返回变量存储地址</td>
<td style="text-align:left">&amp;a; 将给出变量的实际地址。</td>
</tr>
<tr>
<td style="text-align:left">*</td>
<td style="text-align:left">指针变量。</td>
<td style="text-align:left">*a; 是一个指针变量</td>
</tr>
</tbody>
</table>
<div class="highlight" id="id-23"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="kd">var</span> <span class="nx">a</span> <span class="kt">int</span> <span class="p">=</span> <span class="mi">4</span>
</span></span><span class="line"><span class="cl">   <span class="kd">var</span> <span class="nx">b</span> <span class="kt">int32</span>
</span></span><span class="line"><span class="cl">   <span class="kd">var</span> <span class="nx">c</span> <span class="kt">float32</span>
</span></span><span class="line"><span class="cl">   <span class="kd">var</span> <span class="nx">ptr</span> <span class="o">*</span><span class="kt">int</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="cm">/* 运算符实例 */</span>
</span></span><span class="line"><span class="cl">   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;第 1 行 - a 变量类型为 = %T\n&#34;</span><span class="p">,</span> <span class="nx">a</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;第 2 行 - b 变量类型为 = %T\n&#34;</span><span class="p">,</span> <span class="nx">b</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;第 3 行 - c 变量类型为 = %T\n&#34;</span><span class="p">,</span> <span class="nx">c</span> <span class="p">);</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   <span class="cm">/*  &amp; 和 * 运算符实例 */</span>
</span></span><span class="line"><span class="cl">   <span class="nx">ptr</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">a</span>     <span class="cm">/* &#39;ptr&#39; 包含了 &#39;a&#39; 变量的地址 */</span>
</span></span><span class="line"><span class="cl">   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;a 的值为  %d\n&#34;</span><span class="p">,</span> <span class="nx">a</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;*ptr 为 %d\n&#34;</span><span class="p">,</span> <span class="o">*</span><span class="nx">ptr</span><span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div><h3 id="运算符优先级" class="heading-element">
  <a href="#%e8%bf%90%e7%ae%97%e7%ac%a6%e4%bc%98%e5%85%88%e7%ba%a7" class="heading-mark"></a>8.7 运算符优先级</h3><p>有些运算符拥有较高的优先级，二元运算符的运算方向均是从左至右。下表列出了所有运算符以及它们的优先级，由上至下代表优先级由高到低：</p>
<table>
<thead>
<tr>
<th style="text-align:left">优先级</th>
<th style="text-align:left">运算符</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">* / % &laquo; &raquo; &amp; &amp;^</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">+ - | ^</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">== != &lt; &lt;= &gt; &gt;=</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">&amp;&amp;</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">||</td>
</tr>
</tbody>
</table>
<h2 id="golang代码执行步骤" class="heading-element">
  <a href="#golang%e4%bb%a3%e7%a0%81%e6%89%a7%e8%a1%8c%e6%ad%a5%e9%aa%a4" class="heading-mark"></a>9 Golang代码执行步骤</h2><p><a class="lightgallery" href="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210329145018401.png?size=large" data-thumbnail="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210329145018401.png?size=small" data-sub-html="<h2>image-20210329145018401</h2>"><img loading="lazy" src="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210329145018401.png" alt="image-20210329145018401" srcset="https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210329145018401.png?size=small, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210329145018401.png?size=medium 1.5x, https://raw.githubusercontent.com/hellolib/pictures/main/Typora/pic-00-gitee/image-20210329145018401.png?size=large 2x" data-title="image-20210329145018401" style="background: url(/images/loading.min.svg) no-repeat center;" onload="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}this.dataset.lazyloaded='';" onerror="this.title=this.dataset.title;for(const i of ['style', 'data-title','onerror','onload']){this.removeAttribute(i);}"/></a></p>
]]></description>
</item>
<item>
  <title>2-4. 数据类型相关操作</title>
  <link>https://ipfred.github.io/lang/go/go_base/20250515174522/</link>
  <pubDate>Thu, 15 May 2025 17:45:22 &#43;0800</pubDate>
  <author>Fred</author>
  <guid>https://ipfred.github.io/lang/go/go_base/20250515174522/</guid>
  <description><![CDATA[<h1 id="一-数据互相转换" class="heading-element">
  <a href="#%e4%b8%80-%e6%95%b0%e6%8d%ae%e4%ba%92%e7%9b%b8%e8%bd%ac%e6%8d%a2" class="heading-mark"></a>一. 数据互相转换</h1><ul>
<li>
<p>int 转string <code>string := strconv.Itoa(int)</code></p>
</li>
<li>
<p>string到int <code>int,err := strconv.Atoi(string)</code></p>
</li>
<li>
<p>string到int64 <code>int64, err := strconv.ParseInt(string, 10, 64)</code></p>
</li>
<li>
<p>int64到string <code>string := strconv.FormatInt(int64,10)</code></p>
</li>
<li>
<p>map 到json字符串</p>
<div class="highlight" id="id-1"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">m</span> <span class="o">:=</span> <span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kt">string</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="nx">mjson</span><span class="p">,</span><span class="nx">_</span> <span class="o">:=</span><span class="nx">json</span><span class="p">.</span><span class="nf">Marshal</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">mString</span> <span class="o">:=</span><span class="nb">string</span><span class="p">(</span><span class="nx">mjson</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>json到struct</p>
<ul>
<li>
<p>如果是单层可以直接用interface转为map</p>
<div class="highlight" id="id-2"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">jsonStr</span> <span class="p">=</span> <span class="s">`{}`</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">jsonStruct</span> <span class="kd">interface</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="nx">JSON</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">jsonStr</span><span class="p">),</span> <span class="o">&amp;</span><span class="nx">jsonStruct</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>有嵌套，把需要解析的字段一一列出，这里注意要首字母大写，否则无法解析。</p>
<div class="highlight" id="id-3"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="kd">type</span> <span class="nx">MyStruct</span> <span class="kd">struct</span><span class="p">{</span>
</span></span><span class="line"><span class="cl">  <span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&#34;name&#34;`</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="nx">jsonStr</span> <span class="p">=</span> <span class="s">`{name: 12}`</span>
</span></span><span class="line"><span class="cl"><span class="kd">var</span> <span class="nx">jsonStruct</span> <span class="nx">MyStruct</span><span class="p">{}</span>
</span></span><span class="line"><span class="cl"><span class="nx">JSON</span><span class="p">.</span><span class="nf">Unmarshal</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">jsonStr</span><span class="p">),</span> <span class="o">&amp;</span><span class="nx">jsonStruct</span><span class="p">)</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
</li>
<li>
<p>纯字符串拼接</p>
<div class="highlight" id="id-4"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="nx">a</span> <span class="o">:=</span> <span class="s">&#34;hello&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nx">b</span> <span class="o">:=</span> <span class="s">&#34;world&#34;</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 使用操作符
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">result</span> <span class="o">:=</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 使用Sprintf
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">result</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;s%s%&#34;</span><span class="p">,</span> <span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 使用join
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">result</span> <span class="o">:=</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">([]</span><span class="kt">string</span><span class="p">{</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">},</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="c1">// 使用buffer
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">var</span> <span class="nx">buffer</span> <span class="nx">bytes</span><span class="p">.</span><span class="nx">Buffer</span>
</span></span><span class="line"><span class="cl"><span class="nx">buffer</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">buffer</span><span class="p">.</span><span class="nf">WriteString</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="nx">result</span> <span class="o">:=</span> <span class="nx">buffer</span><span class="p">.</span><span class="nf">String</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// 以上四种方式性能最好是buffer，实际开发中自行调节即可
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="cm">/*
</span></span></span><span class="line"><span class="cl"><span class="cm">BenchmarkAddStringWithJoin-8       	20785686	        51.5 ns/op
</span></span></span><span class="line"><span class="cl"><span class="cm">BenchmarkAddStringWithBuffer-8     	1000000000	        0.000123 ns/op
</span></span></span><span class="line"><span class="cl"><span class="cm">BenchmarkAddStringWithSprintf-8    	 5727165	        196 ns/op
</span></span></span><span class="line"><span class="cl"><span class="cm">BenchmarkAddStringWithOperator-8   	39417948	        29.1 ns/op
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">
</span></span></span><span class="line"><span class="cl"><span class="cm">*/</span></span></span></code></pre></td></tr></table>
</div>
</div><div class="highlight" id="id-5"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-golang" data-lang="golang"><span class="line"><span class="cl"><span class="kn">package</span> <span class="nx">main</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kn">import</span> <span class="p">(</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;fmt&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="s">&#34;strconv&#34;</span>
</span></span><span class="line"><span class="cl"><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">IntToString</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//todo :int to string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">v</span> <span class="o">:=</span> <span class="mi">456</span>
</span></span><span class="line"><span class="cl">    <span class="nx">vS</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Itoa</span><span class="p">(</span><span class="nx">v</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">vS</span><span class="p">)</span> <span class="c1">//方法1，简便版
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>
</span></span><span class="line"><span class="cl">    <span class="c1">//todo :int64 to string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">var</span> <span class="nx">vI64</span> <span class="kt">int64</span> <span class="p">=</span> <span class="mi">789</span>
</span></span><span class="line"><span class="cl">    <span class="nx">vInt64S</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatInt</span><span class="p">(</span><span class="nx">vI64</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="c1">//方法2，int64转string，可指定几进制
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">vInt64S</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="c1">//todo :uint64 to string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="kd">var</span> <span class="nx">vUI64</span> <span class="kt">uint64</span> <span class="p">=</span> <span class="mi">91011</span>
</span></span><span class="line"><span class="cl">    <span class="nx">vUI64S</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatUint</span><span class="p">(</span><span class="nx">vUI64</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span> <span class="c1">//方法3， uint64转string，可指定几进制
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">vUI64S</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">StringToInt</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//todo :string to int/int64
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">s</span> <span class="o">:=</span> <span class="s">&#34;123&#34;</span>
</span></span><span class="line"><span class="cl">    <span class="nx">vInt</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">Atoi</span><span class="p">(</span><span class="nx">s</span><span class="p">)</span> <span class="c1">//方法1，便捷版
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">vInt</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">vInt64</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseInt</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span> <span class="c1">//方案2，有符号整型，可以指定几进制，整数长度
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">vInt64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">    <span class="nx">vUInt64</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseUint</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span> <span class="c1">//方案3，无符号整型，可以指定几进制，整数长度
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">vUInt64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">StringToFloat</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//todo :string to float
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">f64</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseFloat</span><span class="p">(</span><span class="s">&#34;123.456&#34;</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span> <span class="c1">//方法1，可以指定长度
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">f64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">FloatToString</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//todo :float to string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">f64</span> <span class="o">:=</span> <span class="mf">1223.13252</span>
</span></span><span class="line"><span class="cl">    <span class="nx">sF64</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatFloat</span><span class="p">(</span><span class="nx">f64</span><span class="p">,</span> <span class="sc">&#39;f&#39;</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span> <span class="c1">//方法1，可以指定输出格式、精度、长度
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">sF64</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">StringToBool</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//todo :string to bool
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>     <span class="nx">接受</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">t</span><span class="p">,</span> <span class="nx">T</span><span class="p">,</span> <span class="nx">TRUE</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">True</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">f</span><span class="p">,</span> <span class="nx">F</span><span class="p">,</span> <span class="nx">FALSE</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="nx">False</span> <span class="nx">等字符串</span><span class="err">；</span>
</span></span><span class="line"><span class="cl">     <span class="nx">其他形式的字符串会返回错误</span>
</span></span><span class="line"><span class="cl">    <span class="nx">b</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">ParseBool</span><span class="p">(</span><span class="s">&#34;1&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">BoolToString</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="c1">//todo :bool to string
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">sBool</span> <span class="o">:=</span> <span class="nx">strconv</span><span class="p">.</span><span class="nf">FormatBool</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span> <span class="c1">//方法1
</span></span></span><span class="line"><span class="cl"><span class="c1"></span>    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">sBool</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">    <span class="nf">StringToInt</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nf">IntToString</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nf">StringToFloat</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nf">FloatToString</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nf">BoolToString</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="nf">StringToBool</span><span class="p">()</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span></span></span></code></pre></td></tr></table>
</div>
</div></li>
</ul>
<h1 id="二-fmt占位符" class="heading-element">
  <a href="#%e4%ba%8c-fmt%e5%8d%a0%e4%bd%8d%e7%ac%a6" class="heading-mark"></a>二. fmt占位符</h1><table>
<thead>
<tr>
<th>占位符</th>
<th>说明</th>
<th>举例</th>
<th>输出</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>%v</strong></td>
<td>相应值的默认格式。</td>
<td>Printf(&quot;%v&quot;, people)</td>
<td>{zhangsan}</td>
</tr>
<tr>
<td><strong>%+v</strong></td>
<td>打印结构体时，会添加字段名</td>
<td>Printf(&quot;%+v&quot;, people)</td>
<td>{Name:zhangsan}</td>
</tr>
<tr>
<td><strong>%#v</strong></td>
<td>相应值的Go语法表示</td>
<td>Printf(&quot;#v&quot;, people)</td>
<td>main.Human{Name:&ldquo;zhangsan&rdquo;}</td>
</tr>
<tr>
<td>%T</td>
<td>相应值的类型的Go语法表示</td>
<td>Printf(&quot;%T&quot;, people)</td>
<td>main.Human</td>
</tr>
<tr>
<td>%%</td>
<td>字面上的百分号，并非值的占位符</td>
<td>Printf(&quot;%%&quot;)</td>
<td>%</td>
</tr>
<tr>
<td><strong>%t</strong></td>
<td>true 或 false。</td>
<td>Printf(&quot;%t&quot;, true)</td>
<td>true</td>
</tr>
<tr>
<td>%b</td>
<td>二进制表示</td>
<td>Printf(&quot;%b&quot;, 5)</td>
<td>101</td>
</tr>
<tr>
<td>%c</td>
<td>相应Unicode码点所表示的字符</td>
<td>Printf(&quot;%c&quot;, 0x4E2D)</td>
<td>中</td>
</tr>
<tr>
<td><strong>%d</strong></td>
<td>十进制表示</td>
<td>Printf(&quot;%d&quot;, 0x12)</td>
<td>18</td>
</tr>
<tr>
<td>%o</td>
<td>八进制表示</td>
<td>Printf(&quot;%d&quot;, 10)</td>
<td>12</td>
</tr>
<tr>
<td><strong>%q</strong></td>
<td>单引号围绕的字符字面值，由Go语法安全地转义</td>
<td>Printf(&quot;%q&quot;, 0x4E2D)</td>
<td>&lsquo;中&rsquo;</td>
</tr>
<tr>
<td>%x</td>
<td>十六进制表示，字母形式为小写 a-f</td>
<td>Printf(&quot;%x&quot;, 13)</td>
<td>d</td>
</tr>
<tr>
<td>%X</td>
<td>十六进制表示，字母形式为大写 A-F</td>
<td>Printf(&quot;%x&quot;, 13)</td>
<td>D</td>
</tr>
<tr>
<td>%U</td>
<td>Unicode格式：U+1234，等同于 &ldquo;U+%04X&rdquo;</td>
<td>Printf(&quot;%U&quot;, 0x4E2D)</td>
<td>U+4E2D</td>
</tr>
<tr>
<td>%b</td>
<td>无小数部分的，指数为二的幂的科学计数法，与 strconv.FormatFloat 的 &lsquo;b&rsquo; 转换格式一致。</td>
<td></td>
<td></td>
</tr>
<tr>
<td>%e</td>
<td>科学计数法，例如 -1234.456e+78</td>
<td>Printf(&quot;%e&quot;, 10.2)</td>
<td>1.020000e+01</td>
</tr>
<tr>
<td>%E</td>
<td>科学计数法，例如 -1234.456E+78</td>
<td>Printf(&quot;%e&quot;, 10.2)</td>
<td>1.020000E+01</td>
</tr>
<tr>
<td>%f</td>
<td>有小数点而无指数，例如 123.456</td>
<td>Printf(&quot;%f&quot;, 10.2)</td>
<td>10.200000</td>
</tr>
<tr>
<td>%g</td>
<td>根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）输出</td>
<td>Printf(&quot;%g&quot;, 10.20)</td>
<td>10.2</td>
</tr>
<tr>
<td>%G</td>
<td>根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）输出</td>
<td>Printf(&quot;%G&quot;, 10.20+2i)</td>
<td>(10.2+2i)</td>
</tr>
<tr>
<td><strong>%s</strong></td>
<td>输出字符串表示（string类型或[]byte)</td>
<td>Printf(&quot;%s&quot;, []byte(&ldquo;Go语言&rdquo;))</td>
<td>Go语言</td>
</tr>
<tr>
<td><strong>%q</strong></td>
<td>双引号围绕的字符串，由Go语法安全地转义</td>
<td>Printf(&quot;%q&quot;, &ldquo;Go语言&rdquo;)</td>
<td>&ldquo;Go语言&rdquo;</td>
</tr>
<tr>
<td>%x</td>
<td>十六进制，小写字母，每字节两个字符</td>
<td>Printf(&quot;%x&quot;, &ldquo;golang&rdquo;)</td>
<td>676f6c616e67</td>
</tr>
<tr>
<td>%X</td>
<td>十六进制，大写字母，每字节两个字符</td>
<td>Printf(&quot;%X&quot;, &ldquo;golang&rdquo;)</td>
<td>676F6C616E67</td>
</tr>
<tr>
<td>%p</td>
<td>十六进制表示，前缀 0x</td>
<td>Printf(&quot;%p&quot;, &amp;people)</td>
<td>0x4f57f0</td>
</tr>
</tbody>
</table>
]]></description>
</item>
</channel>
</rss>
